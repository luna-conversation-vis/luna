[{"previous_utterances": [], "utterance": "What is the feature type name of the feature AirCon?", "select_target": [0], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[5, "eq", "AirCon"]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\"", "number_predicates": 1}, "prior_select": [["*"], ["feature description"], ["feature type name"]], "prior_where_col": [[], [["eq", "feature name", "AirCon"]], [["eq", "feature name", "AirCon"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"feature type name\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the feature type name of the feature AirCon?"], "utterance": "What is the full feature description of the feature name AirCon?", "select_target": [0], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[5, "eq", "AirCon"]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\"", "number_predicates": 1}, "prior_select": [["*"], ["feature description"], ["feature type name"]], "prior_where_col": [[], [["eq", "feature name", "AirCon"]], [["eq", "feature name", "AirCon"]]], "result": ["{\n  \"data columns\": [\"feature type name\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"feature description\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the full feature description of the feature name AirCon?", "What is the feature type name of the feature AirCon?"], "utterance": "How many different feature IDs are there?", "select_target": [0], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[5, "eq", "AirCon"]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\"", "number_predicates": 1}, "prior_select": [["*"], ["feature description"], ["feature type name"]], "prior_where_col": [[], [["eq", "feature name", "AirCon"]], [["eq", "feature name", "AirCon"]]], "result": ["{\n  \"data columns\": [\"feature type name\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"feature description\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"feature id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["How many different feature IDs are there?", "What is the full feature description of the feature name AirCon?", "What is the feature type name of the feature AirCon?"], "utterance": "What sort of feature type code is associated with AirCon?", "select_target": [0], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[5, "eq", "AirCon"]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "select feature_type_code from Other_Available_Features  where feature_name  =  \"AirCon\"", "number_predicates": 1}, "prior_select": [["*"], ["feature description"], ["feature type name"]], "prior_where_col": [[], [["eq", "feature name", "AirCon"]], [["eq", "feature name", "AirCon"]]], "result": ["{\n  \"data columns\": [\"feature type name\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"feature description\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"feature id\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"feature type code\"],\n  \"data filters\": [\n    {\n      \"column\": \"feature name\",\n      \"operator\": \"=\",\n      \"value\": \"AirCon\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "What are the names of the properties with more that one room?", "select_target": [15], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[2, "eq", "House"], [12, "gt", 1]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1", "number_predicates": 2}, "prior_select": [["property name", "room count"], ["property name"], ["property name"]], "prior_where_col": [[], [], [["gt", "room count", 1]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [{\n        \"column\": \"room count\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["What are the names of the properties with more that one room?"], "utterance": "What are the names of the properties that are either houses or apartments with more than one room?", "select_target": [15], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[2, "eq", "House"], [12, "gt", 1]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1", "number_predicates": 2}, "prior_select": [["property name", "room count"], ["property name"], ["property name"]], "prior_where_col": [[], [], [["gt", "room count", 1]]], "result": ["{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [{\n        \"column\": \"room count\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [\n        {\n            \"column\": \"property type description\",\n            \"operator\": \"in\",\n            \"value\": [\"house\", \"apartment\"]\n        },\n        {\n            \"column\": \"room count\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the names of the properties that are either houses or apartments with more than one room?", "What are the names of the properties with more that one room?"], "utterance": "How many rooms do each of those have?", "select_target": [15], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[2, "eq", "House"], [12, "gt", 1]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1", "number_predicates": 2}, "prior_select": [["property name", "room count"], ["property name"], ["property name"]], "prior_where_col": [[], [], [["gt", "room count", 1]]], "result": ["{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [{\n        \"column\": \"room count\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [\n        {\n            \"column\": \"property type description\",\n            \"operator\": \"in\",\n            \"value\": [\"house\", \"apartment\"]\n        },\n        {\n            \"column\": \"room count\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"property name\", \"room count\"],\n    \"data filters\": [\n        {\n            \"column\": \"property type description\",\n            \"operator\": \"in\",\n            \"value\": [\"house\", \"apartment\"]\n        },\n        {\n            \"column\": \"room count\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many rooms do each of those have?", "What are the names of the properties that are either houses or apartments with more than one room?", "What are the names of the properties with more that one room?"], "utterance": "What is the average agreed selling price of all houses with more than one room?", "select_target": [15], "column_names": ["feature type code", "feature type name", "property type code", "property type description", "feature id", "feature name", "feature description", "property id", "date on market", "date sold", "property name", "property address", "room count", "vendor requested price", "buyer offered price", "agreed selling price", "apt feature 1", "apt feature 2", "apt feature 3", "fld feature 1", "fld feature 2", "fld feature 3", "hse feature 1", "hse feature 2", "hse feature 3", "oth feature 1", "oth feature 2", "oth feature 3", "shp feature 1", "shp feature 2", "shp feature 3", "other property details", "property feature description", "*"], "where_clauses": [[2, "eq", "House"], [12, "gt", 1]], "debug_info": {"where_categorization": -1, "db_id": "real_estate_properties", "raw_sql": "SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   \"House\" AND room_count  >  1", "number_predicates": 2}, "prior_select": [["property name", "room count"], ["property name"], ["property name"]], "prior_where_col": [[], [], [["gt", "room count", 1]]], "result": ["{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [{\n        \"column\": \"room count\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"property name\"],\n    \"data filters\": [\n        {\n            \"column\": \"property type description\",\n            \"operator\": \"in\",\n            \"value\": [\"house\", \"apartment\"]\n        },\n        {\n            \"column\": \"room count\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"property name\", \"room count\"],\n    \"data filters\": [\n        {\n            \"column\": \"property type description\",\n            \"operator\": \"in\",\n            \"value\": [\"house\", \"apartment\"]\n        },\n        {\n            \"column\": \"room count\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"agreed selling price\"],\n    \"data filters\": [\n        {\n            \"column\": \"property type description\",\n            \"operator\": \"=\",\n            \"value\": \"house\"\n        },\n        {\n            \"column\": \"room count\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many Likes there", "select_target": [3], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[4, "eq", 1689]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT student_id FROM friend where friend_id  =  1689", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n  \"data_columns\": [\"liked id\"],\n  \"data_filters\": []\n}"}, {"previous_utterances": ["how many Likes there"], "utterance": "how many friends there", "select_target": [3], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[4, "eq", 1689]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT student_id FROM friend where friend_id  =  1689", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n  \"data_columns\": [\"liked id\"],\n  \"data_filters\": []\n}"], "pred_intent": "{\n  \"data_columns\": [\"friend id\"],\n  \"data_filters\": []\n}"}, {"previous_utterances": ["how many friends there", "how many Likes there"], "utterance": "what is the  friend id of  1689 | Do you mean the id of students with friend id 1689? | yes sir", "select_target": [3], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[4, "eq", 1689]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT student_id FROM friend where friend_id  =  1689", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n  \"data_columns\": [\"liked id\"],\n  \"data_filters\": []\n}", "{\n  \"data_columns\": [\"friend id\"],\n  \"data_filters\": []\n}"], "pred_intent": "{\n  \"data_columns\": [\"friend id\"],\n  \"data_filters\": [\n    {\n      \"column\": \"id\",\n      \"operator\": \"=\",\n      \"value\": \"1689\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "Show the names of all of the high schoolers.", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Gabriel"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["id"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Jordan"]], [["eq", "id", 1709]], [["eq", "name", "Kyle"]], [["eq", "name", "Kyle"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    }]\n}"}, {"previous_utterances": ["Show the names of all of the high schoolers."], "utterance": "Which of the high schoolers are friends with Kyle?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Gabriel"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["id"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Jordan"]], [["eq", "id", 1709]], [["eq", "name", "Kyle"]], [["eq", "name", "Kyle"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    },\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}"}, {"previous_utterances": ["Which of the high schoolers are friends with Kyle?", "Show the names of all of the high schoolers."], "utterance": "What is Kyle's ID?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Gabriel"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["id"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Jordan"]], [["eq", "id", 1709]], [["eq", "name", "Kyle"]], [["eq", "name", "Kyle"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    },\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}"}, {"previous_utterances": ["What is Kyle's ID?", "Which of the high schoolers are friends with Kyle?", "Show the names of all of the high schoolers."], "utterance": "Who has the ID 1709?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Gabriel"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["id"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Jordan"]], [["eq", "id", 1709]], [["eq", "name", "Kyle"]], [["eq", "name", "Kyle"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    },\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"1709\"\n    }]\n}"}, {"previous_utterances": ["Who has the ID 1709?", "What is Kyle's ID?", "Which of the high schoolers are friends with Kyle?", "Show the names of all of the high schoolers."], "utterance": "Who else is Jordan friends with?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Gabriel"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["id"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Jordan"]], [["eq", "id", 1709]], [["eq", "name", "Kyle"]], [["eq", "name", "Kyle"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    },\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"1709\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Jordan\"\n    }]\n}"}, {"previous_utterances": ["Who else is Jordan friends with?", "Who has the ID 1709?", "What is Kyle's ID?", "Which of the high schoolers are friends with Kyle?", "Show the names of all of the high schoolers."], "utterance": "Who is friends with Gabriel?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Gabriel"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Gabriel\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["id"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Jordan"]], [["eq", "id", 1709]], [["eq", "name", "Kyle"]], [["eq", "name", "Kyle"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"high school\"\n    },\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Kyle\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"1709\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Jordan\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"Gabriel\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "which grade has the \nmost high schoolers", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": [], "pred_intent": "{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["which grade has the \nmost high schoolers"], "utterance": "what are the name of high schoolers in grade 9", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": ["{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}"}, {"previous_utterances": ["what are the name of high schoolers in grade 9", "which grade has the \nmost high schoolers"], "utterance": "what grade is tiffany", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": ["{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}"], "pred_intent": "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"tiffany\"}]\n}"}, {"previous_utterances": ["what grade is tiffany", "what are the name of high schoolers in grade 9", "which grade has the \nmost high schoolers"], "utterance": "how many high schoolers in grade 9", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": ["{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}", "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"tiffany\"}]\n}"], "pred_intent": "{\n\"data columns\": [\"count(*)\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}"}, {"previous_utterances": ["how many high schoolers in grade 9", "what grade is tiffany", "what are the name of high schoolers in grade 9", "which grade has the \nmost high schoolers"], "utterance": "what grade is gabriel | Did you mean the Gabriel with ID 1689? | yes", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": ["{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}", "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"tiffany\"}]\n}", "{\n\"data columns\": [\"count(*)\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}"], "pred_intent": "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"id\", \"operator\": \"=\", \"value\": \"1689\"}]\n}"}, {"previous_utterances": ["what grade is gabriel | Did you mean the Gabriel with ID 1689? | yes", "how many high schoolers in grade 9", "what grade is tiffany", "what are the name of high schoolers in grade 9", "which grade has the \nmost high schoolers"], "utterance": "What ID is Tiffany?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": ["{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}", "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"tiffany\"}]\n}", "{\n\"data columns\": [\"count(*)\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}", "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"id\", \"operator\": \"=\", \"value\": \"1689\"}]\n}"], "pred_intent": "{\n\"data columns\": [\"id\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"Tiffany\"}]\n}"}, {"previous_utterances": ["What ID is Tiffany?", "what grade is gabriel | Did you mean the Gabriel with ID 1689? | yes", "how many high schoolers in grade 9", "what grade is tiffany", "what are the name of high schoolers in grade 9", "which grade has the \nmost high schoolers"], "utterance": "Which high schooler has ID of 1510?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE ID  =  1510", "number_predicates": 1}, "prior_select": [["id"], ["grade"], ["*"], ["grade"], ["name"], ["grade"]], "prior_where_col": [[["eq", "name", "Tiffany"]], [["eq", "name", "Gabriel"], ["eq", "id", 1689]], [["eq", "grade", 9]], [["eq", "name", "Tiffany"]], [["eq", "grade", 9]], []], "result": ["{\n\"data columns\": [\"grade\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}", "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"tiffany\"}]\n}", "{\n\"data columns\": [\"count(*)\"],\n\"data filters\": [{\"column\": \"grade\", \"operator\": \"=\", \"value\": \"9\"}]\n}", "{\n\"data columns\": [\"grade\"],\n\"data filters\": [{\"column\": \"id\", \"operator\": \"=\", \"value\": \"1689\"}]\n}", "{\n\"data columns\": [\"id\"],\n\"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"Tiffany\"}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\"column\": \"id\", \"operator\": \"=\", \"value\": \"1510\"}]\n}"}, {"previous_utterances": [], "utterance": "How many students are there?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Kyle"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade from highschooler where name  =  \"Kyle\"", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "grade", 9]], []], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many students are there?"], "utterance": "How many students have grade 9", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Kyle"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade from highschooler where name  =  \"Kyle\"", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "grade", 9]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"9\"\n    }]\n}"}, {"previous_utterances": ["How many students have grade 9", "How many students are there?"], "utterance": "What is his grade?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[1, "eq", "Kyle"]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade from highschooler where name  =  \"Kyle\"", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "grade", 9]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}", "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"9\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"9\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What is the average grade of all students who have some friends, please?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ", "number_predicates": 0}, "prior_select": [["name"], ["grade"], ["*"], ["grade"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }\n    ]\n}"}, {"previous_utterances": ["What is the average grade of all students who have some friends, please?"], "utterance": "Are there any students that have no friends?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ", "number_predicates": 0}, "prior_select": [["name"], ["grade"], ["*"], ["grade"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}"}, {"previous_utterances": ["Are there any students that have no friends?", "What is the average grade of all students who have some friends, please?"], "utterance": "What are their grades?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ", "number_predicates": 0}, "prior_select": [["name"], ["grade"], ["*"], ["grade"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}"}, {"previous_utterances": ["What are their grades?", "Are there any students that have no friends?", "What is the average grade of all students who have some friends, please?"], "utterance": "What are their names?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ", "number_predicates": 0}, "prior_select": [["name"], ["grade"], ["*"], ["grade"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}"}, {"previous_utterances": ["What are their names?", "What are their grades?", "Are there any students that have no friends?", "What is the average grade of all students who have some friends, please?"], "utterance": "What are the names of the students with friends?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ", "number_predicates": 0}, "prior_select": [["name"], ["grade"], ["*"], ["grade"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"=\",\n        \"value\": \"null\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }\n    ]\n}"}, {"previous_utterances": [], "utterance": "what is the average of grades?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT MAX ( grade )  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["grade"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"grade\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["what is the average of grades?"], "utterance": "what is the name of higshoolers that starting with 'A'?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT MAX ( grade )  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["grade"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"grade\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"like\",\n    \"value\": \"A%\"\n  }]\n}"}, {"previous_utterances": ["what is the name of higshoolers that starting with 'A'?", "what is the average of grades?"], "utterance": "what is the best grade ? | Did you mean to ask for the highest grade? | yes", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT MAX ( grade )  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["grade"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"grade\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"like\",\n    \"value\": \"A%\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"grade\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Show the names of students who have at least 2 likes.", "select_target": [0], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    >=    1", "number_predicates": 0}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"liked id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["Show the names of students who have at least 2 likes."], "utterance": "How about 1 like?", "select_target": [0], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    >=    1", "number_predicates": 0}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"liked id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"liked id\",\n        \"operator\": \">=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["How about 1 like?", "Show the names of students who have at least 2 likes."], "utterance": "What are their IDs?", "select_target": [0], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    >=    1", "number_predicates": 0}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"liked id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"liked id\",\n        \"operator\": \">=\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"liked id\",\n        \"operator\": \">=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What are the names of all of the high schoolers?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1", "number_predicates": 0}, "prior_select": [["*"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [\n    {\n      \"column\": \"grade\",\n      \"operator\": \">\",\n      \"value\": \"9\"\n    }\n  ]\n}"}, {"previous_utterances": ["What are the names of all of the high schoolers?"], "utterance": "What is the value of the greatest number of likes for each high schooler? | what  did  you mean  the value? | Sorry, the amount of the greatest number of likes.", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1", "number_predicates": 0}, "prior_select": [["*"], ["name"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"name\"],\n  \"data filters\": [\n    {\n      \"column\": \"grade\",\n      \"operator\": \">\",\n      \"value\": \"9\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"name\", \"liked id\"],\n  \"data filters\": [\n    {\n      \"column\": \"grade\",\n      \"operator\": \">\",\n      \"value\": \"9\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the value of the greatest number of likes for each high schooler? | what  did  you mean  the value? | Sorry, the amount of the greatest number of likes.", "What are the names of all of the high schoolers?"], "utterance": "What is the name of the high schooler who has the greatest number of likes?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1", "number_predicates": 0}, "prior_select": [["*"], ["name"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"name\"],\n  \"data filters\": [\n    {\n      \"column\": \"grade\",\n      \"operator\": \">\",\n      \"value\": \"9\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"name\", \"liked id\"],\n  \"data filters\": [\n    {\n      \"column\": \"grade\",\n      \"operator\": \">\",\n      \"value\": \"9\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"name\", \"liked id\"],\n  \"data filters\": [\n    {\n      \"column\": \"grade\",\n      \"operator\": \">\",\n      \"value\": \"9\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "Can you show me a list of student IDs and their friends IDs?", "select_target": [1, 2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name, grade FROM Highschooler where id  =  1510", "number_predicates": 1}, "prior_select": [["id", "friend id"], ["friend id"], ["id"], ["id"], ["student id", "friend id"]], "prior_where_col": [[], [], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"student id\", \"friend id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you show me a list of student IDs and their friends IDs?"], "utterance": "Can you show me a list of all student IDs? | Did you mean the id of all High schoolers? | Yes", "select_target": [1, 2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name, grade FROM Highschooler where id  =  1510", "number_predicates": 1}, "prior_select": [["id", "friend id"], ["friend id"], ["id"], ["id"], ["student id", "friend id"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"student id\", \"friend id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"High school\"\n    }]\n}"}, {"previous_utterances": ["Can you show me a list of all student IDs? | Did you mean the id of all High schoolers? | Yes", "Can you show me a list of student IDs and their friends IDs?"], "utterance": "Can you tell me the total number of student IDs?", "select_target": [1, 2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name, grade FROM Highschooler where id  =  1510", "number_predicates": 1}, "prior_select": [["id", "friend id"], ["friend id"], ["id"], ["id"], ["student id", "friend id"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"student id\", \"friend id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"High school\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you tell me the total number of student IDs?", "Can you show me a list of all student IDs? | Did you mean the id of all High schoolers? | Yes", "Can you show me a list of student IDs and their friends IDs?"], "utterance": "Can you tell me the total number of Friend IDs?", "select_target": [1, 2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name, grade FROM Highschooler where id  =  1510", "number_predicates": 1}, "prior_select": [["id", "friend id"], ["friend id"], ["id"], ["id"], ["student id", "friend id"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"student id\", \"friend id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"High school\"\n    }]\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"friend id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you tell me the total number of Friend IDs?", "Can you tell me the total number of student IDs?", "Can you show me a list of all student IDs? | Did you mean the id of all High schoolers? | Yes", "Can you show me a list of student IDs and their friends IDs?"], "utterance": "Can you tell me which Student ID is not on the list of Friend IDs? | by student id, do you mean the student id in the table friend or all high schoolers' ids. | All high schoolers' ids", "select_target": [1, 2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name, grade FROM Highschooler where id  =  1510", "number_predicates": 1}, "prior_select": [["id", "friend id"], ["friend id"], ["id"], ["id"], ["student id", "friend id"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"student id\", \"friend id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"High school\"\n    }]\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"friend id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"not in\",\n        \"value\": {\n            \"subquery\": {\n                \"data columns\": [\"friend id\"],\n                \"data filters\": []\n            }\n        }\n    }]\n}"}, {"previous_utterances": ["Can you tell me which Student ID is not on the list of Friend IDs? | by student id, do you mean the student id in the table friend or all high schoolers' ids. | All high schoolers' ids", "Can you tell me the total number of Friend IDs?", "Can you tell me the total number of student IDs?", "Can you show me a list of all student IDs? | Did you mean the id of all High schoolers? | Yes", "Can you show me a list of student IDs and their friends IDs?"], "utterance": "Can you tell me the name and the grade of student ID 1510?", "select_target": [1, 2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [[0, "eq", 1510]], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT name, grade FROM Highschooler where id  =  1510", "number_predicates": 1}, "prior_select": [["id", "friend id"], ["friend id"], ["id"], ["id"], ["student id", "friend id"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"student id\", \"friend id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"High school\"\n    }]\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"friend id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"not in\",\n        \"value\": {\n            \"subquery\": {\n                \"data columns\": [\"friend id\"],\n                \"data filters\": []\n            }\n        }\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"grade\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"1510\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many students in this table?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade FROM Highschooler order by grade limit 1", "number_predicates": 0}, "prior_select": [["grade"], ["grade"], ["*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many students in this table?"], "utterance": "To find average grade of these students?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade FROM Highschooler order by grade limit 1", "number_predicates": 0}, "prior_select": [["grade"], ["grade"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["To find average grade of these students?", "How many students in this table?"], "utterance": "Find top grade of the student?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade FROM Highschooler order by grade limit 1", "number_predicates": 0}, "prior_select": [["grade"], ["grade"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Find top grade of the student?", "To find average grade of these students?", "How many students in this table?"], "utterance": "Find the lowest  grade of the student?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT grade FROM Highschooler order by grade limit 1", "number_predicates": 0}, "prior_select": [["grade"], ["grade"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [""], "utterance": "Hello!  Can you see all of the ids of the high school students?", "select_target": [3], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "select student_id from Friend", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [\n        {\n            \"column\": \"grade\",\n            \"operator\": \"=\",\n            \"value\": \"high school\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many students are there?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{}"}, {"previous_utterances": ["How many students are there?"], "utterance": "What about friends?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{}"], "pred_intent": "{}"}, {"previous_utterances": ["What about friends?", "How many students are there?"], "utterance": "What are the names of all the highschoolers who have friends ?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{}", "{}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"grade\",\n        \"operator\": \"=\",\n        \"value\": \"highschool\"\n    },\n    {\n        \"column\": \"friend id\",\n        \"operator\": \"!=\",\n        \"value\": \"NULL\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what is the average of friend id?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT MAX ( grade )  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["friend id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"friend id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the average of friend id?"], "utterance": "what is the average of grades?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT MAX ( grade )  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["friend id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"friend id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the average of grades?", "what is the average of friend id?"], "utterance": "what is the highest grade?", "select_target": [2], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT MAX ( grade )  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["friend id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"friend id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many friends in this table?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT DISTINCT name  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many friends in this table?"], "utterance": "Find average grade of the students? | Do you want me to find the average grade of entries in the Highschooler table? | Yes?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT DISTINCT name  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Find average grade of the students? | Do you want me to find the average grade of entries in the Highschooler table? | Yes?", "How many friends in this table?"], "utterance": "Show names of all high school students?", "select_target": [1], "column_names": ["id", "name", "grade", "student id", "friend id", "liked id", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "network_1", "raw_sql": "SELECT DISTINCT name  FROM Highschooler", "number_predicates": 0}, "prior_select": [["grade"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Can you show me orchestra names and the major record formats?", "select_target": [9], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC", "number_predicates": 0}, "prior_select": [["orchestra"], ["orchestra", "major record format"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"orchestra\", \"major record format\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you show me orchestra names and the major record formats?"], "utterance": "I want a list of orchestra names in ascending order.", "select_target": [9], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC", "number_predicates": 0}, "prior_select": [["orchestra"], ["orchestra", "major record format"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"orchestra\", \"major record format\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": [],\n    \"sorting\": {\n        \"column\": \"orchestra\",\n        \"order\": \"ascending\"\n    }\n}"}, {"previous_utterances": ["I want a list of orchestra names in ascending order.", "Can you show me orchestra names and the major record formats?"], "utterance": "Hmm, please show me the record formats of orchestras in ascending order of count.", "select_target": [9], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC", "number_predicates": 0}, "prior_select": [["orchestra"], ["orchestra", "major record format"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"orchestra\", \"major record format\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": [],\n    \"sorting\": {\n        \"column\": \"orchestra\",\n        \"order\": \"ascending\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"major record format\"],\n    \"data filters\": [],\n    \"sorting\": {\n        \"column\": \"major record format\",\n        \"order\": \"ascending\",\n        \"count\": true\n    }\n}"}, {"previous_utterances": [], "utterance": "Please answer the question.what is the orchestra of conductor? | Do you want all the orchestras of all conductors? | yes", "select_target": [2], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [[1, "eq", "Colin Davis"]], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\"", "number_predicates": 1}, "prior_select": [["name"], ["orchestra"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Please answer the question.what is the orchestra of conductor? | Do you want all the orchestras of all conductors? | yes"], "utterance": "what is the name of all conductors?", "select_target": [2], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [[1, "eq", "Colin Davis"]], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\"", "number_predicates": 1}, "prior_select": [["name"], ["orchestra"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the name of all conductors?", "Please answer the question.what is the orchestra of conductor? | Do you want all the orchestras of all conductors? | yes"], "utterance": "What is the age of Colin Davis?", "select_target": [2], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [[1, "eq", "Colin Davis"]], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Age FROM conductor WHERE Name  =  \"Colin Davis\"", "number_predicates": 1}, "prior_select": [["name"], ["orchestra"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Colin Davis\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many record companies are there?", "select_target": [7], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["year of founded"], ["orchestra"], ["orchestra id"], ["record company"]], "prior_where_col": [[["eq", "orchestra", "Royal Danish Orchestra"]], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"record company\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many record companies are there?"], "utterance": "How many orchestras are there?", "select_target": [7], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["year of founded"], ["orchestra"], ["orchestra id"], ["record company"]], "prior_where_col": [[["eq", "orchestra", "Royal Danish Orchestra"]], [], [], []], "result": ["{\n    \"data columns\": [\"record company\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many orchestras are there?", "How many record companies are there?"], "utterance": "Can you list the orchestras by the date they were founded for me starting with the oldest? | Do you mean listing the names of the orchestras by the date they were founded starting with the oldest? | yes.", "select_target": [7], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["year of founded"], ["orchestra"], ["orchestra id"], ["record company"]], "prior_where_col": [[["eq", "orchestra", "Royal Danish Orchestra"]], [], [], []], "result": ["{\n    \"data columns\": [\"record company\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"orchestra\", \"year of founded\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you list the orchestras by the date they were founded for me starting with the oldest? | Do you mean listing the names of the orchestras by the date they were founded starting with the oldest? | yes.", "How many orchestras are there?", "How many record companies are there?"], "utterance": "What year was the Royal Danish Orchestra founded?", "select_target": [7], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["year of founded"], ["orchestra"], ["orchestra id"], ["record company"]], "prior_where_col": [[["eq", "orchestra", "Royal Danish Orchestra"]], [], [], []], "result": ["{\n    \"data columns\": [\"record company\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\", \"year of founded\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"orchestra\", \"year of founded\"],\n    \"data filters\": [{\n        \"column\": \"orchestra\",\n        \"operator\": \"=\",\n        \"value\": \"Royal Danish Orchestra\"\n    }]\n}"}, {"previous_utterances": ["What year was the Royal Danish Orchestra founded?", "Can you list the orchestras by the date they were founded for me starting with the oldest? | Do you mean listing the names of the orchestras by the date they were founded starting with the oldest? | yes.", "How many orchestras are there?", "How many record companies are there?"], "utterance": "What record company is shared by the most orchestras?", "select_target": [7], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["year of founded"], ["orchestra"], ["orchestra id"], ["record company"]], "prior_where_col": [[["eq", "orchestra", "Royal Danish Orchestra"]], [], [], []], "result": ["{\n    \"data columns\": [\"record company\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\", \"year of founded\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra\", \"year of founded\"],\n    \"data filters\": [{\n        \"column\": \"orchestra\",\n        \"operator\": \"=\",\n        \"value\": \"Royal Danish Orchestra\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"record company\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many orchestras are there?", "select_target": [5, 6], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ", "number_predicates": 0}, "prior_select": [["orchestra"], ["orchestra"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"orchestra id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many orchestras are there?"], "utterance": "How many of them are there have no performance? | Did you mean to ask for the number of orchestras that have no performance? | Yes", "select_target": [5, 6], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ", "number_predicates": 0}, "prior_select": [["orchestra"], ["orchestra"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"orchestra id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"orchestra id\"],\n    \"data filters\": [\n        {\n            \"column\": \"performance id\",\n            \"operator\": \"!=\",\n            \"value\": \"*\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many of them are there have no performance? | Did you mean to ask for the number of orchestras that have no performance? | Yes", "How many orchestras are there?"], "utterance": "Can you show me its id and its name please?", "select_target": [5, 6], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ", "number_predicates": 0}, "prior_select": [["orchestra"], ["orchestra"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"orchestra id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"orchestra id\"],\n    \"data filters\": [\n        {\n            \"column\": \"performance id\",\n            \"operator\": \"!=\",\n            \"value\": \"*\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"orchestra id\", \"orchestra\"],\n    \"data filters\": [\n        {\n            \"column\": \"performance id\",\n            \"operator\": \"!=\",\n            \"value\": \"*\"\n        }\n    ]\n}"}, {"previous_utterances": [""], "utterance": "When are the auditions? | Would you like to know the dates of all performances with the type audition? | Yes that's exactly it", "select_target": [12], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT date FROM performance WHERE TYPE LIKE \"%audition%\"", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\"data columns\": [\"date\"], \"data filters\": [{\"column\": \"type\", \"operator\": \"=\", \"value\": \"audition\"}]}"}, {"previous_utterances": [], "utterance": "List the name of the conductor with the most years of work.", "select_target": [1], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1", "number_predicates": 0}, "prior_select": [["year of work"], ["name"]], "prior_where_col": [[["eq", "name", "Robert Craft"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["List the name of the conductor with the most years of work."], "utterance": "How many years did Robert Craft work?", "select_target": [1], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1", "number_predicates": 0}, "prior_select": [["year of work"], ["name"]], "prior_where_col": [[["eq", "name", "Robert Craft"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Robert Craft\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many years did Robert Craft work?", "List the name of the conductor with the most years of work."], "utterance": "List the name of the conductor with the least years of work", "select_target": [1], "column_names": ["conductor id", "name", "age", "nationality", "year of work", "orchestra id", "orchestra", "record company", "year of founded", "major record format", "performance id", "type", "date", "official ratings (millions)", "weekly rank", "share", "show id", "if first show", "result", "attendance", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "orchestra", "raw_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1", "number_predicates": 0}, "prior_select": [["year of work"], ["name"]], "prior_where_col": [[["eq", "name", "Robert Craft"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Robert Craft\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "hi, what number of students have a dog as a pet?", "select_target": [2], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"], [9, "eq", "dog"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'", "number_predicates": 2}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "pet type", "cat"]], [["eq", "pet type", "dog"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"pet type\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"dog\"\n    }]\n}"}, {"previous_utterances": ["hi, what number of students have a dog as a pet?"], "utterance": "and what about the number that have a cat as a pet?", "select_target": [2], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"], [9, "eq", "dog"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'", "number_predicates": 2}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "pet type", "cat"]], [["eq", "pet type", "dog"]]], "result": ["{\n    \"data columns\": [\"pet type\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"dog\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"pet type\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"cat\"\n    }]\n}"}, {"previous_utterances": ["and what about the number that have a cat as a pet?", "hi, what number of students have a dog as a pet?"], "utterance": "Great. Can you tell me the first names of these 3 students?", "select_target": [2], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"], [9, "eq", "dog"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog'", "number_predicates": 2}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "pet type", "cat"]], [["eq", "pet type", "dog"]]], "result": ["{\n    \"data columns\": [\"pet type\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"dog\"\n    }]\n}", "{\n    \"data columns\": [\"pet type\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"cat\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"cat\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hi. What are the different types of pets?", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"], [10, "eq", "pet_age"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" ) ", "number_predicates": 2}, "prior_select": [["pet age"], ["*"], ["pet type"]], "prior_where_col": [[["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Hi. What are the different types of pets?"], "utterance": "Between the cats and dogs, how many of them are dogs?", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"], [10, "eq", "pet_age"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" ) ", "number_predicates": 2}, "prior_select": [["pet age"], ["*"], ["pet type"]], "prior_where_col": [[["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], []], "result": ["{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}"}, {"previous_utterances": ["Between the cats and dogs, how many of them are dogs?", "Hi. What are the different types of pets?"], "utterance": "What are the ages of the 2 dogs?", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"], [10, "eq", "pet_age"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" ) ", "number_predicates": 2}, "prior_select": [["pet age"], ["*"], ["pet type"]], "prior_where_col": [[["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], []], "result": ["{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"pet age\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}"}, {"previous_utterances": ["What are the ages of the 2 dogs?", "Between the cats and dogs, how many of them are dogs?", "Hi. What are the different types of pets?"], "utterance": "How much does the youngest dog, the 1 year old, weigh?", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"], [10, "eq", "pet_age"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT weight  from Pets where PetType = \"dog\" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = \"dog\" ) ", "number_predicates": 2}, "prior_select": [["pet age"], ["*"], ["pet type"]], "prior_where_col": [[["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], []], "result": ["{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"pet type\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"pet age\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"weight\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    },\n    {\n      \"column\": \"pet age\",\n      \"operator\": \"=\",\n      \"value\": \"1\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "How many students in the \"Student\" table are over the age of 20?", "select_target": [12], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[3, "gt", 20]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20", "number_predicates": 1}, "prior_select": [["*"]], "prior_where_col": [[["gt", "age", 20]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"first name\", \"last name\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \">\",\n    \"value\": \"20\"\n  }]\n}"}, {"previous_utterances": ["How many students in the \"Student\" table are over the age of 20?"], "utterance": "How many of those students own pets?", "select_target": [12], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[3, "gt", 20]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20", "number_predicates": 1}, "prior_select": [["*"]], "prior_where_col": [[["gt", "age", 20]]], "result": ["{\n  \"data columns\": [\"first name\", \"last name\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \">\",\n    \"value\": \"20\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"first name\", \"last name\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \">\",\n    \"value\": \"20\"\n  },\n  {\n    \"column\": \"pet id\",\n    \"operator\": \"!=\",\n    \"value\": \"null\"\n  }]\n}"}, {"previous_utterances": [], "utterance": "That are available", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[4, "eq", "F"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'", "number_predicates": 1}, "prior_select": [["city code"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "sex", "F"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"student id\", \"last name\", \"first name\", \"age\", \"sex\", \"major\", \"advisor\", \"city code\", \"pet id\", \"pet type\", \"pet age\", \"weight\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["That are available"], "utterance": "What are the city codes for all available students", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[4, "eq", "F"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'", "number_predicates": 1}, "prior_select": [["city code"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "sex", "F"]]], "result": ["{\n\"data columns\": [\"student id\", \"last name\", \"first name\", \"age\", \"sex\", \"major\", \"advisor\", \"city code\", \"pet id\", \"pet type\", \"pet age\", \"weight\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"city code\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["What are the city codes for all available students", "That are available"], "utterance": "Can i have the weight of the pets that were raised by female student", "select_target": [11], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[4, "eq", "F"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F'", "number_predicates": 1}, "prior_select": [["city code"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "sex", "F"]]], "result": ["{\n\"data columns\": [\"student id\", \"last name\", \"first name\", \"age\", \"sex\", \"major\", \"advisor\", \"city code\", \"pet id\", \"pet type\", \"pet age\", \"weight\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"city code\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"weight\"],\n\"data filters\": [\n{\n\"column\": \"sex\",\n\"operator\": \"=\",\n\"value\": \"female\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "Hey can you tell me the average age for cats?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'", "number_predicates": 1}, "prior_select": [["pet age", "pet type"], ["pet age"], ["pet age"], ["pet age"]], "prior_where_col": [[], [["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], [["eq", "pet type", "cat"]]], "result": [], "pred_intent": "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}"}, {"previous_utterances": ["Hey can you tell me the average age for cats?"], "utterance": "What about for dogs?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'", "number_predicates": 1}, "prior_select": [["pet age", "pet type"], ["pet age"], ["pet age"], ["pet age"]], "prior_where_col": [[], [["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], [["eq", "pet type", "cat"]]], "result": ["{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}"], "pred_intent": "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}"}, {"previous_utterances": ["What about for dogs?", "Hey can you tell me the average age for cats?"], "utterance": "Thanks! Now what's the maximum age for dogs?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'", "number_predicates": 1}, "prior_select": [["pet age", "pet type"], ["pet age"], ["pet age"], ["pet age"]], "prior_where_col": [[], [["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], [["eq", "pet type", "cat"]]], "result": ["{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}", "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}"], "pred_intent": "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ],\n  \"data filters\": [\n    {\n      \"column\": \"pet age\",\n      \"operator\": \">\",\n      \"value\": \"max\"\n    }\n  ]\n}"}, {"previous_utterances": ["Thanks! Now what's the maximum age for dogs?", "What about for dogs?", "Hey can you tell me the average age for cats?"], "utterance": "And the maximum age for cats and dogs?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'", "number_predicates": 1}, "prior_select": [["pet age", "pet type"], ["pet age"], ["pet age"], ["pet age"]], "prior_where_col": [[], [["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], [["eq", "pet type", "cat"]]], "result": ["{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}", "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}", "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ],\n  \"data filters\": [\n    {\n      \"column\": \"pet age\",\n      \"operator\": \">\",\n      \"value\": \"max\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ],\n  \"data filters\": [\n    {\n      \"column\": \"pet age\",\n      \"operator\": \">\",\n      \"value\": \"max\"\n    }\n  ]\n}"}, {"previous_utterances": ["And the maximum age for cats and dogs?", "Thanks! Now what's the maximum age for dogs?", "What about for dogs?", "Hey can you tell me the average age for cats?"], "utterance": "So what's the maximum age for just cats?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat'", "number_predicates": 1}, "prior_select": [["pet age", "pet type"], ["pet age"], ["pet age"], ["pet age"]], "prior_where_col": [[], [["eq", "pet type", "dog"]], [["eq", "pet type", "dog"]], [["eq", "pet type", "cat"]]], "result": ["{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}", "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}", "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ],\n  \"data filters\": [\n    {\n      \"column\": \"pet age\",\n      \"operator\": \">\",\n      \"value\": \"max\"\n    }\n  ]\n}", "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ],\n  \"data filters\": [\n    {\n      \"column\": \"pet age\",\n      \"operator\": \">\",\n      \"value\": \"max\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    },\n    {\n      \"column\": \"pet age\",\n      \"operator\": \"=\",\n      \"value\": \"max\"\n    }\n  ],\n  \"data columns\": [\n    \"pet age\"\n  ]\n}"}, {"previous_utterances": [], "utterance": "Can you tell me the last names of students who have pets?", "select_target": [1], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[10, "eq", 3], [9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "number_predicates": 2}, "prior_select": [["last name"], ["last name"]], "prior_where_col": [[["eq", "pet type", "cat"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"}, {"previous_utterances": ["Can you tell me the last names of students who have pets?"], "utterance": "Hmm, I want to know the last names of students who have cats.", "select_target": [1], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[10, "eq", 3], [9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "number_predicates": 2}, "prior_select": [["last name"], ["last name"]], "prior_where_col": [[["eq", "pet type", "cat"]], []], "result": ["{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"cat\"\n    }]\n}"}, {"previous_utterances": ["Hmm, I want to know the last names of students who have cats.", "Can you tell me the last names of students who have pets?"], "utterance": "Please find out the last name of the student who has a cat that is age 3.", "select_target": [1], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[10, "eq", 3], [9, "eq", "cat"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "number_predicates": 2}, "prior_select": [["last name"], ["last name"]], "prior_where_col": [[["eq", "pet type", "cat"]], []], "result": ["{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}", "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"cat\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"pet type\",\n        \"operator\": \"=\",\n        \"value\": \"cat\"\n    },\n    {\n        \"column\": \"pet age\",\n        \"operator\": \"=\",\n        \"value\": \"3\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What are the names of all students who have cat pets? | Linda is the first name of the student who has a cat pet. | What are the first names of all students who have dog pets?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[2, "eq", "Linda"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\"", "number_predicates": 1}, "prior_select": [["student id"], ["first name"]], "prior_where_col": [[], [["eq", "pet type", "dog"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"first name\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"}, {"previous_utterances": ["What are the names of all students who have cat pets? | Linda is the first name of the student who has a cat pet. | What are the first names of all students who have dog pets?"], "utterance": "How many students have any type of pet?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[2, "eq", "Linda"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\"", "number_predicates": 1}, "prior_select": [["student id"], ["first name"]], "prior_where_col": [[], [["eq", "pet type", "dog"]]], "result": ["{\n  \"data columns\": [\"first name\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"}, {"previous_utterances": ["How many students have any type of pet?", "What are the names of all students who have cat pets? | Linda is the first name of the student who has a cat pet. | What are the first names of all students who have dog pets?"], "utterance": "What is the age of Linda's pet?", "select_target": [10], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[2, "eq", "Linda"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  \"Linda\"", "number_predicates": 1}, "prior_select": [["student id"], ["first name"]], "prior_where_col": [[], [["eq", "pet type", "dog"]]], "result": ["{\n  \"data columns\": [\"first name\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"pet age\"],\n  \"data filters\": [\n    {\n      \"column\": \"first name\",\n      \"operator\": \"=\",\n      \"value\": \"Linda\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "How many female students are on the list?", "select_target": [7], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[0, "eq", 1003]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT city_code  FROM student WHERE \nStuID = 1003", "number_predicates": 1}, "prior_select": [["age"], ["last name", "first name"], ["*"]], "prior_where_col": [[], [], [["eq", "sex", "F"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"sex\"],\n    \"data filters\": [{\n        \"column\": \"sex\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}"}, {"previous_utterances": ["How many female students are on the list?"], "utterance": "What is the full names of least aged students on the list?", "select_target": [7], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[0, "eq", 1003]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT city_code  FROM student WHERE \nStuID = 1003", "number_predicates": 1}, "prior_select": [["age"], ["last name", "first name"], ["*"]], "prior_where_col": [[], [], [["eq", "sex", "F"]]], "result": ["{\n    \"data columns\": [\"sex\"],\n    \"data filters\": [{\n        \"column\": \"sex\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"<\",\n        \"value\": \"age\"\n    }]\n}"}, {"previous_utterances": ["What is the full names of least aged students on the list?", "How many female students are on the list?"], "utterance": "Find the average age of students who do not have any pet?", "select_target": [7], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[0, "eq", 1003]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT city_code  FROM student WHERE \nStuID = 1003", "number_predicates": 1}, "prior_select": [["age"], ["last name", "first name"], ["*"]], "prior_where_col": [[], [], [["eq", "sex", "F"]]], "result": ["{\n    \"data columns\": [\"sex\"],\n    \"data filters\": [{\n        \"column\": \"sex\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"<\",\n        \"value\": \"age\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \"=\",\n        \"value\": \"None\"\n    }]\n}"}, {"previous_utterances": ["Find the average age of students who do not have any pet?", "What is the full names of least aged students on the list?", "How many female students are on the list?"], "utterance": "What is the city code of student id 1003?", "select_target": [7], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[0, "eq", 1003]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT city_code  FROM student WHERE \nStuID = 1003", "number_predicates": 1}, "prior_select": [["age"], ["last name", "first name"], ["*"]], "prior_where_col": [[], [], [["eq", "sex", "F"]]], "result": ["{\n    \"data columns\": [\"sex\"],\n    \"data filters\": [{\n        \"column\": \"sex\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"<\",\n        \"value\": \"age\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \"=\",\n        \"value\": \"None\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"student id\", \"city code\"],\n    \"data filters\": [{\n        \"column\": \"student id\",\n        \"operator\": \"=\",\n        \"value\": \"1003\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many students have more than one pet?", "select_target": [1, 2, 4], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "number_predicates": 0}, "prior_select": [["last name", "first name"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"student id\", \"last name\", \"first name\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["How many students have more than one pet?"], "utterance": "What are their names?", "select_target": [1, 2, 4], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "number_predicates": 0}, "prior_select": [["last name", "first name"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"student id\", \"last name\", \"first name\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\", \"first name\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["What are their names?", "How many students have more than one pet?"], "utterance": "What gender is Kim Tracy?", "select_target": [1, 2, 4], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1", "number_predicates": 0}, "prior_select": [["last name", "first name"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"student id\", \"last name\", \"first name\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"last name\", \"first name\"],\n    \"data filters\": [{\n        \"column\": \"pet id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"sex\"],\n    \"data filters\": [{\n        \"column\": \"last name\",\n        \"operator\": \"=\",\n        \"value\": \"Tracy\"\n    },\n    {\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Kim\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hello!  Can you show me a list of all of the student IDs for students who have pets?", "select_target": [2, 1, 5, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ", "number_predicates": 0}, "prior_select": [["first name", "last name", "major", "age"], ["student id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n    {\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"}, {"previous_utterances": ["Hello!  Can you show me a list of all of the student IDs for students who have pets?"], "utterance": "Great!  Can you show me the name (first and last), major and age of those two students?", "select_target": [2, 1, 5, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ", "number_predicates": 0}, "prior_select": [["first name", "last name", "major", "age"], ["student id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n    {\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"major\", \"age\"],\n    \"data filters\": [\n    {\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"}, {"previous_utterances": ["Great!  Can you show me the name (first and last), major and age of those two students?", "Hello!  Can you show me a list of all of the student IDs for students who have pets?"], "utterance": "Great!  Now can you filter this list to show me which student(s) have a pet other than a cat?", "select_target": [2, 1, 5, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ", "number_predicates": 0}, "prior_select": [["first name", "last name", "major", "age"], ["student id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n    {\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"major\", \"age\"],\n    \"data filters\": [\n    {\n        \"column\": \"pet id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"major\", \"age\"],\n    \"data filters\": [\n    {\n        \"column\": \"pet type\",\n        \"operator\": \"!=\",\n        \"value\": \"cat\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many students are there?", "select_target": [8, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[1, "eq", "Smith"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'", "number_predicates": 1}, "prior_select": [["age"], ["student id"]], "prior_where_col": [[["eq", "last name", "Smith"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many students are there?"], "utterance": "How old is the student whose last name is 'Smith\u2019?", "select_target": [8, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[1, "eq", "Smith"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'", "number_predicates": 1}, "prior_select": [["age"], ["student id"]], "prior_where_col": [[["eq", "last name", "Smith"]], []], "result": ["{\n    \"data columns\": [\"student id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"last name\",\n        \"operator\": \"=\",\n        \"value\": \"Smith\"\n    }]\n}"}, {"previous_utterances": ["How old is the student whose last name is 'Smith\u2019?", "How many students are there?"], "utterance": "Can you plsease include their pets' id too?", "select_target": [8, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[1, "eq", "Smith"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'", "number_predicates": 1}, "prior_select": [["age"], ["student id"]], "prior_where_col": [[["eq", "last name", "Smith"]], []], "result": ["{\n    \"data columns\": [\"student id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"last name\",\n        \"operator\": \"=\",\n        \"value\": \"Smith\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\", \"pet id\"],\n    \"data filters\": [{\n        \"column\": \"last name\",\n        \"operator\": \"=\",\n        \"value\": \"Smith\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you show me a list of all of the students IDs for students who have dogs as their pet type?", "select_target": [2, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "number_predicates": 1}, "prior_select": [["student id"], ["student id"]], "prior_where_col": [[], [["eq", "pet type", "dog"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}"}, {"previous_utterances": ["Can you show me a list of all of the students IDs for students who have dogs as their pet type?"], "utterance": "Which of those two students have a cat as their pet in addition also having a dog?", "select_target": [2, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "number_predicates": 1}, "prior_select": [["student id"], ["student id"]], "prior_where_col": [[], [["eq", "pet type", "dog"]]], "result": ["{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    },\n    {\n      \"column\": \"student id\",\n      \"operator\": \"in\",\n      \"value\": [\"student id1\", \"student id2\"]\n    }\n  ]\n}"}, {"previous_utterances": ["Which of those two students have a cat as their pet in addition also having a dog?", "Can you show me a list of all of the students IDs for students who have dogs as their pet type?"], "utterance": "Thanks! Can you please list the first name and ages of the two students who have dogs as pets?", "select_target": [2, 3], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [[9, "eq", "dog"]], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "number_predicates": 1}, "prior_select": [["student id"], ["student id"]], "prior_where_col": [[], [["eq", "pet type", "dog"]]], "result": ["{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    },\n    {\n      \"column\": \"student id\",\n      \"operator\": \"in\",\n      \"value\": [\"student id1\", \"student id2\"]\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"first name\", \"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"dog\"\n    },\n    {\n      \"column\": \"student id\",\n      \"operator\": \"in\",\n      \"value\": [\"student id1\", \"student id2\"]\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "How many students have a cat pet?", "select_target": [0, 0], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], [["eq", "pet type", "cat"]]], "result": [], "pred_intent": "{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"}, {"previous_utterances": ["How many students have a cat pet?"], "utterance": "And what about students that don't have a cat pet?", "select_target": [0, 0], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], [["eq", "pet type", "cat"]]], "result": ["{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"!=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"}, {"previous_utterances": ["And what about students that don't have a cat pet?", "How many students have a cat pet?"], "utterance": "And what are their ids?", "select_target": [0, 0], "column_names": ["student id", "last name", "first name", "age", "sex", "major", "advisor", "city code", "pet id", "pet type", "pet age", "weight", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "pets_1", "raw_sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat'", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], [["eq", "pet type", "cat"]]], "result": ["{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"=\",\n      \"value\": \"cat\"\n    }\n  ]\n}", "{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"!=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": [\n    {\n      \"column\": \"pet type\",\n      \"operator\": \"!=\",\n      \"value\": \"cat\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "Hello there!  Can you tell me the total number of visitors who did not visit any museum that was opened after 2010?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [{\n        \"column\": \"open year\",\n        \"operator\": \">\",\n        \"value\": \"2010\"\n    }]\n}"}, {"previous_utterances": ["Hello there!  Can you tell me the total number of visitors who did not visit any museum that was opened after 2010?"], "utterance": "Can you please provide me with the names and membership levels of these three members?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [{\n        \"column\": \"open year\",\n        \"operator\": \">\",\n        \"value\": \"2010\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"open year\",\n        \"operator\": \">\",\n        \"value\": \"2010\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many visitors are ther?", "select_target": [1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["*"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many visitors are ther?"], "utterance": "How many of them have membership levels higher than 4?", "select_target": [1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["*"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], []], "result": ["{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"num of ticket\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}"}, {"previous_utterances": ["How many of them have membership levels higher than 4?", "How many visitors are ther?"], "utterance": "Can you please list their names?", "select_target": [1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["*"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], []], "result": ["{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"num of ticket\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"num of ticket\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}"}, {"previous_utterances": ["Can you please list their names?", "How many of them have membership levels higher than 4?", "How many visitors are ther?"], "utterance": "Can you rank them by their membership level from high to low?", "select_target": [1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["*"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], []], "result": ["{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"num of ticket\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}", "{\n    \"data columns\": [\"name\", \"num of ticket\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"num of ticket\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }],\n    \"sort\": {\n        \"column\": \"level of membership\",\n        \"order\": \"desc\"\n    }\n}"}, {"previous_utterances": [], "utterance": "Can you tell me the total amount spent on tickets by visitors with membership level 1?", "select_target": [5, 8], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership", "number_predicates": 0}, "prior_select": [["name"], ["level of membership"], ["customer id"], ["total spent"]], "prior_where_col": [[["eq", "level of membership", 1]], [], [["eq", "level of membership", 1]], [["eq", "level of membership", 1]]], "result": [], "pred_intent": "{\"data columns\": [\"total spent\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}"}, {"previous_utterances": ["Can you tell me the total amount spent on tickets by visitors with membership level 1?"], "utterance": "Can you tell me how many visitors there are at membership level 1?", "select_target": [5, 8], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership", "number_predicates": 0}, "prior_select": [["name"], ["level of membership"], ["customer id"], ["total spent"]], "prior_where_col": [[["eq", "level of membership", 1]], [], [["eq", "level of membership", 1]], [["eq", "level of membership", 1]]], "result": ["{\"data columns\": [\"total spent\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}"], "pred_intent": "{\"data columns\": [\"customer id\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}"}, {"previous_utterances": ["Can you tell me how many visitors there are at membership level 1?", "Can you tell me the total amount spent on tickets by visitors with membership level 1?"], "utterance": "How many membership levels are there?", "select_target": [5, 8], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership", "number_predicates": 0}, "prior_select": [["name"], ["level of membership"], ["customer id"], ["total spent"]], "prior_where_col": [[["eq", "level of membership", 1]], [], [["eq", "level of membership", 1]], [["eq", "level of membership", 1]]], "result": ["{\"data columns\": [\"total spent\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}", "{\"data columns\": [\"customer id\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}"], "pred_intent": "{\"data columns\": [\"level of membership\"]}"}, {"previous_utterances": ["How many membership levels are there?", "Can you tell me how many visitors there are at membership level 1?", "Can you tell me the total amount spent on tickets by visitors with membership level 1?"], "utterance": "Can you show me the names of each visitor with membership level 1?", "select_target": [5, 8], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership", "number_predicates": 0}, "prior_select": [["name"], ["level of membership"], ["customer id"], ["total spent"]], "prior_where_col": [[["eq", "level of membership", 1]], [], [["eq", "level of membership", 1]], [["eq", "level of membership", 1]]], "result": ["{\"data columns\": [\"total spent\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}", "{\"data columns\": [\"customer id\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}", "{\"data columns\": [\"level of membership\"]}"], "pred_intent": "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}"}, {"previous_utterances": ["Can you show me the names of each visitor with membership level 1?", "How many membership levels are there?", "Can you tell me how many visitors there are at membership level 1?", "Can you tell me the total amount spent on tickets by visitors with membership level 1?"], "utterance": "I'd like to know how much was spent on tickets at each membership level, can you show me?", "select_target": [5, 8], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership", "number_predicates": 0}, "prior_select": [["name"], ["level of membership"], ["customer id"], ["total spent"]], "prior_where_col": [[["eq", "level of membership", 1]], [], [["eq", "level of membership", 1]], [["eq", "level of membership", 1]]], "result": ["{\"data columns\": [\"total spent\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}", "{\"data columns\": [\"customer id\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}", "{\"data columns\": [\"level of membership\"]}", "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"level of membership\", \"operator\": \"=\", \"value\": \"1\"}]}"], "pred_intent": "{\"data columns\": [\"level of membership\", \"total spent\"]}"}, {"previous_utterances": [], "utterance": "List the number of tickets bought in all visits | the total number of tickets bought in all visits is 63. | what is the maximum number of tickets bought in all visits", "select_target": [7], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT avg ( num_of_ticket )  FROM visit", "number_predicates": 0}, "prior_select": [["num of ticket"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["List the number of tickets bought in all visits | the total number of tickets bought in all visits is 63. | what is the maximum number of tickets bought in all visits"], "utterance": "what is the average number of tickets bought in all visits", "select_target": [7], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT avg ( num_of_ticket )  FROM visit", "number_predicates": 0}, "prior_select": [["num of ticket"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Whats the level of membership customer id 1 has?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[4, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Age FROM visitor WHERE ID  =  1", "number_predicates": 1}, "prior_select": [["name"], ["level of membership"]], "prior_where_col": [[["eq", "customer id", 1]], [["eq", "customer id", 1]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"level of membership\"],\n  \"data filters\": [{\n    \"column\": \"customer id\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"}, {"previous_utterances": ["Whats the level of membership customer id 1 has?"], "utterance": "What is the name of customer id 1?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[4, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Age FROM visitor WHERE ID  =  1", "number_predicates": 1}, "prior_select": [["name"], ["level of membership"]], "prior_where_col": [[["eq", "customer id", 1]], [["eq", "customer id", 1]]], "result": ["{\n  \"data columns\": [\"level of membership\"],\n  \"data filters\": [{\n    \"column\": \"customer id\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [{\n    \"column\": \"customer id\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"}, {"previous_utterances": ["What is the name of customer id 1?", "Whats the level of membership customer id 1 has?"], "utterance": "What is the age of customer id 1?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[4, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Age FROM visitor WHERE ID  =  1", "number_predicates": 1}, "prior_select": [["name"], ["level of membership"]], "prior_where_col": [[["eq", "customer id", 1]], [["eq", "customer id", 1]]], "result": ["{\n  \"data columns\": [\"level of membership\"],\n  \"data filters\": [{\n    \"column\": \"customer id\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}", "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [{\n    \"column\": \"customer id\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [{\n    \"column\": \"customer id\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"}, {"previous_utterances": [], "utterance": "List the names of all visitors who visited some museums more than once, please.", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[8, "gt", 100]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100", "number_predicates": 1}, "prior_select": [["name", "level of membership"], ["name", "customer id", "age"], ["name"]], "prior_where_col": [[["gt", "age", 20]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["List the names of all visitors who visited some museums more than once, please."], "utterance": "Can you list their IDs and ages too?", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[8, "gt", 100]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100", "number_predicates": 1}, "prior_select": [["name", "level of membership"], ["name", "customer id", "age"], ["name"]], "prior_where_col": [[["gt", "age", 20]], [], []], "result": ["{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"customer id\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["Can you list their IDs and ages too?", "List the names of all visitors who visited some museums more than once, please."], "utterance": "What are the names and level of membership for all visitors over the age of 20?", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[8, "gt", 100]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100", "number_predicates": 1}, "prior_select": [["name", "level of membership"], ["name", "customer id", "age"], ["name"]], "prior_where_col": [[["gt", "age", 20]], [], []], "result": ["{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"customer id\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \">\",\n        \"value\": \"20\"\n    }]\n}"}, {"previous_utterances": ["What are the names and level of membership for all visitors over the age of 20?", "Can you list their IDs and ages too?", "List the names of all visitors who visited some museums more than once, please."], "utterance": "What are the names and ages of all the customers who spent over 100?", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[8, "gt", 100]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100", "number_predicates": 1}, "prior_select": [["name", "level of membership"], ["name", "customer id", "age"], ["name"]], "prior_where_col": [[["gt", "age", 20]], [], []], "result": ["{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"customer id\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"name\", \"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \">\",\n        \"value\": \"20\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"total spent\",\n        \"operator\": \">\",\n        \"value\": \"100\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "how many museum id in the list?", "select_target": [3], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Capital Plaza Museum"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum'", "number_predicates": 1}, "prior_select": [["num of staff"], ["museum id"]], "prior_where_col": [[["eq", "museum id", 3]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"museum id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many museum id in the list?"], "utterance": "find the staff count in the museum with an id 3?", "select_target": [3], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Capital Plaza Museum"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum'", "number_predicates": 1}, "prior_select": [["num of staff"], ["museum id"]], "prior_where_col": [[["eq", "museum id", 3]], []], "result": ["{\n    \"data columns\": [\"museum id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"num of staff\"],\n    \"data filters\": [\n        {\n            \"column\": \"museum id\",\n            \"operator\": \"=\",\n            \"value\": \"3\"\n        }\n    ]\n}"}, {"previous_utterances": ["find the staff count in the museum with an id 3?", "how many museum id in the list?"], "utterance": "which year open the capital plaza museum?", "select_target": [3], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Capital Plaza Museum"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Open_year FROM museum where Name = 'Capital Plaza Museum'", "number_predicates": 1}, "prior_select": [["num of staff"], ["museum id"]], "prior_where_col": [[["eq", "museum id", 3]], []], "result": ["{\n    \"data columns\": [\"museum id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"num of staff\"],\n    \"data filters\": [\n        {\n            \"column\": \"museum id\",\n            \"operator\": \"=\",\n            \"value\": \"3\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"open year\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"capital plaza museum\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What age of Gonzalo Higua\u00edn?", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["total spent"], ["num of ticket"], ["age"]], "prior_where_col": [[["eq", "name", "Arjen Robben"]], [["eq", "customer id", 5]], [["eq", "name", "Gonzalo Higua\u00edn"]]], "result": [], "pred_intent": "{\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}"}, {"previous_utterances": ["What age of Gonzalo Higua\u00edn?"], "utterance": "How many tickets of customer id 5?", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["total spent"], ["num of ticket"], ["age"]], "prior_where_col": [[["eq", "name", "Arjen Robben"]], [["eq", "customer id", 5]], [["eq", "name", "Gonzalo Higua\u00edn"]]], "result": ["{\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": [{\n        \"column\": \"customer id\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}"}, {"previous_utterances": ["How many tickets of customer id 5?", "What age of Gonzalo Higua\u00edn?"], "utterance": "How many spent of Arjen Robben?", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["total spent"], ["num of ticket"], ["age"]], "prior_where_col": [[["eq", "name", "Arjen Robben"]], [["eq", "customer id", 5]], [["eq", "name", "Gonzalo Higua\u00edn"]]], "result": ["{\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}", "{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": [{\n        \"column\": \"customer id\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"total spent\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Arjen Robben\"\n    }]\n}"}, {"previous_utterances": ["How many spent of Arjen Robben?", "How many tickets of customer id 5?", "What age of Gonzalo Higua\u00edn?"], "utterance": "Find the name and age of the visitor who bought the most tickets at once.", "select_target": [1, 6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["total spent"], ["num of ticket"], ["age"]], "prior_where_col": [[["eq", "name", "Arjen Robben"]], [["eq", "customer id", 5]], [["eq", "name", "Gonzalo Higua\u00edn"]]], "result": ["{\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}", "{\n    \"data columns\": [\"num of ticket\"],\n    \"data filters\": [{\n        \"column\": \"customer id\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}", "{\n    \"data columns\": [\"total spent\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Arjen Robben\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [{\n        \"column\": \"num of ticket\",\n        \"operator\": \"=\",\n        \"value\": \"MAX\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What are the names who have a membership level higher than 4?", "select_target": [4], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["name"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], [["gt", "level of membership", 4]]], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the names who have a membership level higher than 4?"], "utterance": "And can you add a column showing their age?", "select_target": [4], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["name"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], [["gt", "level of membership", 4]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}"}, {"previous_utterances": ["And can you add a column showing their age?", "What are the names who have a membership level higher than 4?"], "utterance": "And now sort the list by age with oldest first.", "select_target": [4], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["name"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], [["gt", "level of membership", 4]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ],\n    \"sort by\": {\n        \"column\": \"age\",\n        \"order\": \"desc\"\n    }\n}"}, {"previous_utterances": ["And now sort the list by age with oldest first.", "And can you add a column showing their age?", "What are the names who have a membership level higher than 4?"], "utterance": "OK...what are their customer IDs?", "select_target": [4], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["name"]], "prior_where_col": [[["gt", "level of membership", 4]], [["gt", "level of membership", 4]], [["gt", "level of membership", 4]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ],\n    \"sort by\": {\n        \"column\": \"age\",\n        \"order\": \"desc\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"customer id\"],\n    \"data filters\": [\n        {\n            \"column\": \"level of membership\",\n            \"operator\": \">\",\n            \"value\": \"4\"\n        }\n    ],\n    \"sort by\": {\n        \"column\": \"age\",\n        \"order\": \"desc\"\n    }\n}"}, {"previous_utterances": [], "utterance": "What is the membership level of Gonzalo Higua\u00edn ?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["*"], ["age"], ["*"], ["name"], ["level of membership"]], "prior_where_col": [[["gt", "level of membership", 4]], [["eq", "level of membership", 8]], [["gt", "level of membership", 5]], [["eq", "level of membership", 5]], [["eq", "name", "Gonzalo Higua\u00edn "]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}"}, {"previous_utterances": ["What is the membership level of Gonzalo Higua\u00edn ?"], "utterance": "whose membership level is 5?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["*"], ["age"], ["*"], ["name"], ["level of membership"]], "prior_where_col": [[["gt", "level of membership", 4]], [["eq", "level of membership", 8]], [["gt", "level of membership", 5]], [["eq", "level of membership", 5]], [["eq", "name", "Gonzalo Higua\u00edn "]]], "result": ["{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}"}, {"previous_utterances": ["whose membership level is 5?", "What is the membership level of Gonzalo Higua\u00edn ?"], "utterance": "how many numbers of persons whose membership level is greater than 5?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["*"], ["age"], ["*"], ["name"], ["level of membership"]], "prior_where_col": [[["gt", "level of membership", 4]], [["eq", "level of membership", 8]], [["gt", "level of membership", 5]], [["eq", "level of membership", 5]], [["eq", "name", "Gonzalo Higua\u00edn "]]], "result": ["{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"num of staff\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"5\"\n    }]\n}"}, {"previous_utterances": ["how many numbers of persons whose membership level is greater than 5?", "whose membership level is 5?", "What is the membership level of Gonzalo Higua\u00edn ?"], "utterance": "What is the age of membership level 8?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["*"], ["age"], ["*"], ["name"], ["level of membership"]], "prior_where_col": [[["gt", "level of membership", 4]], [["eq", "level of membership", 8]], [["gt", "level of membership", 5]], [["eq", "level of membership", 5]], [["eq", "name", "Gonzalo Higua\u00edn "]]], "result": ["{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}", "{\n    \"data columns\": [\"num of staff\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"5\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"8\"\n    }]\n}"}, {"previous_utterances": ["What is the age of membership level 8?", "how many numbers of persons whose membership level is greater than 5?", "whose membership level is 5?", "What is the membership level of Gonzalo Higua\u00edn ?"], "utterance": "how many persons who have membership level greater than 4?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["*"], ["age"], ["*"], ["name"], ["level of membership"]], "prior_where_col": [[["gt", "level of membership", 4]], [["eq", "level of membership", 8]], [["gt", "level of membership", 5]], [["eq", "level of membership", 5]], [["eq", "name", "Gonzalo Higua\u00edn "]]], "result": ["{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}", "{\n    \"data columns\": [\"num of staff\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"5\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"8\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}"}, {"previous_utterances": ["how many persons who have membership level greater than 4?", "What is the age of membership level 8?", "how many numbers of persons whose membership level is greater than 5?", "whose membership level is 5?", "What is the membership level of Gonzalo Higua\u00edn ?"], "utterance": "please sort the names of persons whose age from old to young according to the membership level?", "select_target": [1, 5], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[5, "gt", 4]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "number_predicates": 1}, "prior_select": [["*"], ["age"], ["*"], ["name"], ["level of membership"]], "prior_where_col": [[["gt", "level of membership", 4]], [["eq", "level of membership", 8]], [["gt", "level of membership", 5]], [["eq", "level of membership", 5]], [["eq", "name", "Gonzalo Higua\u00edn "]]], "result": ["{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Gonzalo Higua\u00edn\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}", "{\n    \"data columns\": [\"num of staff\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"5\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \"=\",\n        \"value\": \"8\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"level of membership\",\n        \"operator\": \">\",\n        \"value\": \"4\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [],\n    \"sort by\": {\n        \"column\": \"age\",\n        \"order\": \"desc\"\n    }\n}"}, {"previous_utterances": [], "utterance": "How many museums do you have?", "select_target": [0, 1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1", "number_predicates": 0}, "prior_select": [["num of staff"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"museum id\"]\n}"}, {"previous_utterances": ["How many museums do you have?"], "utterance": "What is the number of staff members in each museum?", "select_target": [0, 1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1", "number_predicates": 0}, "prior_select": [["num of staff"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"museum id\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"museum id\", \"num of staff\"]\n}"}, {"previous_utterances": ["What is the number of staff members in each museum?", "How many museums do you have?"], "utterance": "Can you tell me the id and the name of the museum, which has the most staff members?", "select_target": [0, 1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1", "number_predicates": 0}, "prior_select": [["num of staff"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"museum id\"]\n}", "{\n    \"data columns\": [\"museum id\", \"num of staff\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"museum id\", \"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"num of staff\",\n            \"operator\": \">\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Fernando Gago"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"", "number_predicates": 1}, "prior_select": [["level of membership"], ["level of membership"], ["name"]], "prior_where_col": [[["eq", "name", "Fernando Gago"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \">\",\n            \"value\": \"2011\"\n        },\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"], "utterance": "What museum did he visit before 2009?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Fernando Gago"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"", "number_predicates": 1}, "prior_select": [["level of membership"], ["level of membership"], ["name"]], "prior_where_col": [[["eq", "name", "Fernando Gago"]], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \">\",\n            \"value\": \"2011\"\n        },\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}"}, {"previous_utterances": ["What museum did he visit before 2009?", "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"], "utterance": "What is Fernando Gago's membership level?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Fernando Gago"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"", "number_predicates": 1}, "prior_select": [["level of membership"], ["level of membership"], ["name"]], "prior_where_col": [[["eq", "name", "Fernando Gago"]], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \">\",\n            \"value\": \"2011\"\n        },\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Fernando Gago\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is Fernando Gago's membership level?", "What museum did he visit before 2009?", "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"], "utterance": "How old is Fernando Gago?", "select_target": [6], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [[1, "eq", "Fernando Gago"]], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT age FROM visitor WHERE name  =  \"Fernando Gago\"", "number_predicates": 1}, "prior_select": [["level of membership"], ["level of membership"], ["name"]], "prior_where_col": [[["eq", "name", "Fernando Gago"]], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \">\",\n            \"value\": \"2011\"\n        },\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"open year\",\n            \"operator\": \"<\",\n            \"value\": \"2009\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"level of membership\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Fernando Gago\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Fernando Gago\"\n        }\n    ]\n}"}, {"previous_utterances": [""], "utterance": "what are the name of the museums?", "select_target": [1], "column_names": ["museum id", "name", "num of staff", "open year", "customer id", "level of membership", "age", "num of ticket", "total spent", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "museum_visit", "raw_sql": "SELECT name from museum", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many matches played in 2013?", "select_target": [12], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[14, "eq", "Petra Kvitova"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\"", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "year", 2016]], [["eq", "year", 2013]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"match num\", \"year\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2013\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many matches played in 2013?"], "utterance": "How many matches played in 2016?", "select_target": [12], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[14, "eq", "Petra Kvitova"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\"", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "year", 2016]], [["eq", "year", 2013]]], "result": ["{\n    \"data columns\": [\"match num\", \"year\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2013\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"match num\", \"year\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2016\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many matches played in 2016?", "How many matches played in 2013?"], "utterance": "What is the loser id  of petra kvitota? | Do  you mean \tloser  id | Yes", "select_target": [12], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[14, "eq", "Petra Kvitova"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT distinct loser_id  FROM  matches where loser_name   = \"Petra Kvitova\"", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "year", 2016]], [["eq", "year", 2013]]], "result": ["{\n    \"data columns\": [\"match num\", \"year\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2013\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"match num\", \"year\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2016\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"loser id\"],\n    \"data filters\": [\n        {\n            \"column\": \"loser name\",\n            \"operator\": \"=\",\n            \"value\": \"petra kvitota\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "find the name of loser and winner who played in the match with the greatest number of minutes", "select_target": [21], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT score FROM matches ORDER BY minutes DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["winner name", "loser name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{ \"data columns\": [\"loser name\", \"winner name\"], \"data filters\": [] }"}, {"previous_utterances": ["find the name of loser and winner who played in the match with the greatest number of minutes"], "utterance": "what were the player's scores?", "select_target": [21], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT score FROM matches ORDER BY minutes DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["winner name", "loser name"]], "prior_where_col": [[]], "result": ["{ \"data columns\": [\"loser name\", \"winner name\"], \"data filters\": [] }"], "pred_intent": "{ \"data columns\": [\"score\"], \"data filters\": [] }"}, {"previous_utterances": [], "utterance": "Could you list the average ranking for each player with their first name?", "select_target": [39, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name", "number_predicates": 1}, "prior_select": [["last name"], ["first name", "last name"], ["ranking", "first name", "last name"], ["ranking", "first name"]], "prior_where_col": [[["eq", "hand", "L"]], [["eq", "hand", "L"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"ranking\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Could you list the average ranking for each player with their first name?"], "utterance": "Could you add in their last names please?", "select_target": [39, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name", "number_predicates": 1}, "prior_select": [["last name"], ["first name", "last name"], ["ranking", "first name", "last name"], ["ranking", "first name"]], "prior_where_col": [[["eq", "hand", "L"]], [["eq", "hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"ranking\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"ranking\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Could you add in their last names please?", "Could you list the average ranking for each player with their first name?"], "utterance": "What are the full names of all left-handed players (hand value \"L\")?", "select_target": [39, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name", "number_predicates": 1}, "prior_select": [["last name"], ["first name", "last name"], ["ranking", "first name", "last name"], ["ranking", "first name"]], "prior_where_col": [[["eq", "hand", "L"]], [["eq", "hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"ranking\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"ranking\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"}, {"previous_utterances": ["What are the full names of all left-handed players (hand value \"L\")?", "Could you add in their last names please?", "Could you list the average ranking for each player with their first name?"], "utterance": "Could you just show their last names, please?", "select_target": [39, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name", "number_predicates": 1}, "prior_select": [["last name"], ["first name", "last name"], ["ranking", "first name", "last name"], ["ranking", "first name"]], "prior_where_col": [[["eq", "hand", "L"]], [["eq", "hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"ranking\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"ranking\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"}, {"previous_utterances": ["Could you just show their last names, please?", "What are the full names of all left-handed players (hand value \"L\")?", "Could you add in their last names please?", "Could you list the average ranking for each player with their first name?"], "utterance": "Would you also add in their rankings? | Do you mean their average rankings? | Yes, please.", "select_target": [39, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  \"L\" GROUP BY T1.first_name", "number_predicates": 1}, "prior_select": [["last name"], ["first name", "last name"], ["ranking", "first name", "last name"], ["ranking", "first name"]], "prior_where_col": [[["eq", "hand", "L"]], [["eq", "hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"ranking\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"ranking\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}", "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\", \"ranking\"],\n    \"data filters\": [{\n        \"column\": \"hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "find the total ranking point for each player and their first name", "select_target": [1], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[39, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1", "number_predicates": 1}, "prior_select": [["ranking points", "first name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"ranking points\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["find the total ranking point for each player and their first name"], "utterance": "which player got first rank and their name | Do you want the first name or last name? | first name", "select_target": [1], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[39, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1", "number_predicates": 1}, "prior_select": [["ranking points", "first name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"first name\", \"ranking points\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"ranking\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what is the first name of player id 200001?", "select_target": [2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[0, "eq", 200003]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT last_name FROM players WHERE player_id  =  200003", "number_predicates": 1}, "prior_select": [["country code"], ["birth date"], ["first name"]], "prior_where_col": [[["eq", "player id", 200003]], [["eq", "player id", 200001]], [["eq", "player id", 200001]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}"}, {"previous_utterances": ["what is the first name of player id 200001?"], "utterance": "When is birth date for Martina ? | There are a lot of Martina. Do you mean the Marina with id 200001? | Martina with id 200001", "select_target": [2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[0, "eq", 200003]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT last_name FROM players WHERE player_id  =  200003", "number_predicates": 1}, "prior_select": [["country code"], ["birth date"], ["first name"]], "prior_where_col": [[["eq", "player id", 200003]], [["eq", "player id", 200001]], [["eq", "player id", 200001]]], "result": ["{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"birth date\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}"}, {"previous_utterances": ["When is birth date for Martina ? | There are a lot of Martina. Do you mean the Marina with id 200001? | Martina with id 200001", "what is the first name of player id 200001?"], "utterance": "what is the country code for player id 200003?", "select_target": [2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[0, "eq", 200003]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT last_name FROM players WHERE player_id  =  200003", "number_predicates": 1}, "prior_select": [["country code"], ["birth date"], ["first name"]], "prior_where_col": [[["eq", "player id", 200003]], [["eq", "player id", 200001]], [["eq", "player id", 200001]]], "result": ["{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}", "{\n    \"data columns\": [\"birth date\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200003\"\n    }]\n}"}, {"previous_utterances": ["what is the country code for player id 200003?", "When is birth date for Martina ? | There are a lot of Martina. Do you mean the Marina with id 200001? | Martina with id 200001", "what is the first name of player id 200001?"], "utterance": "what is the last name of Justine of player id 200003?", "select_target": [2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[0, "eq", 200003]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT last_name FROM players WHERE player_id  =  200003", "number_predicates": 1}, "prior_select": [["country code"], ["birth date"], ["first name"]], "prior_where_col": [[["eq", "player id", 200003]], [["eq", "player id", 200001]], [["eq", "player id", 200001]]], "result": ["{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}", "{\n    \"data columns\": [\"birth date\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200001\"\n    }]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200003\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\"],\n    \"data filters\": [{\n        \"column\": \"player id\",\n        \"operator\": \"=\",\n        \"value\": \"200003\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Tell me the loser_name whose age is 24.626967830300003", "select_target": [33, 35], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["loser id"], ["*"], ["loser name"]], "prior_where_col": [[["gt", "loser rank points", 3500]], [["eq", "loser name", "Petra Kvitova"], ["eq", "winner name", "Petra Kvitova"]], [["eq", "loser age", 24.626967830300003]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"loser name\"],\n    \"data filters\": [{\n        \"column\": \"loser age\",\n        \"operator\": \"=\",\n        \"value\": \"24.626967830300003\"\n    }]\n}"}, {"previous_utterances": ["Tell me the loser_name whose age is 24.626967830300003"], "utterance": "Tell me the total number of matches played by Petra Kvitova...", "select_target": [33, 35], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["loser id"], ["*"], ["loser name"]], "prior_where_col": [[["gt", "loser rank points", 3500]], [["eq", "loser name", "Petra Kvitova"], ["eq", "winner name", "Petra Kvitova"]], [["eq", "loser age", 24.626967830300003]]], "result": ["{\n    \"data columns\": [\"loser name\"],\n    \"data filters\": [{\n        \"column\": \"loser age\",\n        \"operator\": \"=\",\n        \"value\": \"24.626967830300003\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"winner name\", \"loser name\", \"match num\"],\n    \"data filters\": [{\n        \"column\": \"winner name\",\n        \"operator\": \"=\",\n        \"value\": \"Petra Kvitova\"\n    }]\n}"}, {"previous_utterances": ["Tell me the total number of matches played by Petra Kvitova...", "Tell me the loser_name whose age is 24.626967830300003"], "utterance": "Who has high loser_rank_points higher than 3500 ? | What attributes of the people  with loser_rank_points higher than 3500 would you like to know? | based on loser_id", "select_target": [33, 35], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["loser id"], ["*"], ["loser name"]], "prior_where_col": [[["gt", "loser rank points", 3500]], [["eq", "loser name", "Petra Kvitova"], ["eq", "winner name", "Petra Kvitova"]], [["eq", "loser age", 24.626967830300003]]], "result": ["{\n    \"data columns\": [\"loser name\"],\n    \"data filters\": [{\n        \"column\": \"loser age\",\n        \"operator\": \"=\",\n        \"value\": \"24.626967830300003\"\n    }]\n}", "{\n    \"data columns\": [\"winner name\", \"loser name\", \"match num\"],\n    \"data filters\": [{\n        \"column\": \"winner name\",\n        \"operator\": \"=\",\n        \"value\": \"Petra Kvitova\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"loser name\", \"loser rank points\"],\n    \"data filters\": [{\n        \"column\": \"loser rank points\",\n        \"operator\": \">\",\n        \"value\": \"3500\"\n    }]\n}"}, {"previous_utterances": ["Who has high loser_rank_points higher than 3500 ? | What attributes of the people  with loser_rank_points higher than 3500 would you like to know? | based on loser_id", "Tell me the total number of matches played by Petra Kvitova...", "Tell me the loser_name whose age is 24.626967830300003"], "utterance": "Find the name and rank points of the winner who won the most times...", "select_target": [33, 35], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["loser id"], ["*"], ["loser name"]], "prior_where_col": [[["gt", "loser rank points", 3500]], [["eq", "loser name", "Petra Kvitova"], ["eq", "winner name", "Petra Kvitova"]], [["eq", "loser age", 24.626967830300003]]], "result": ["{\n    \"data columns\": [\"loser name\"],\n    \"data filters\": [{\n        \"column\": \"loser age\",\n        \"operator\": \"=\",\n        \"value\": \"24.626967830300003\"\n    }]\n}", "{\n    \"data columns\": [\"winner name\", \"loser name\", \"match num\"],\n    \"data filters\": [{\n        \"column\": \"winner name\",\n        \"operator\": \"=\",\n        \"value\": \"Petra Kvitova\"\n    }]\n}", "{\n    \"data columns\": [\"loser name\", \"loser rank points\"],\n    \"data filters\": [{\n        \"column\": \"loser rank points\",\n        \"operator\": \">\",\n        \"value\": \"3500\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"winner name\", \"winner rank points\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What is the player id for the youngest player?", "select_target": [1, 5], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1", "number_predicates": 0}, "prior_select": [["player id"], ["player id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"birth date\",\n            \"operator\": \">\",\n            \"value\": \"YYYY-MM-DD\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the player id for the youngest player?"], "utterance": "What about the oldest?", "select_target": [1, 5], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1", "number_predicates": 0}, "prior_select": [["player id"], ["player id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"birth date\",\n            \"operator\": \">\",\n            \"value\": \"YYYY-MM-DD\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"birth date\",\n            \"operator\": \"<\",\n            \"value\": \"YYYY-MM-DD\"\n        }\n    ]\n}"}, {"previous_utterances": ["What about the oldest?", "What is the player id for the youngest player?"], "utterance": "What is their first name and country code?", "select_target": [1, 5], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1", "number_predicates": 0}, "prior_select": [["player id"], ["player id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"birth date\",\n            \"operator\": \">\",\n            \"value\": \"YYYY-MM-DD\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"birth date\",\n            \"operator\": \"<\",\n            \"value\": \"YYYY-MM-DD\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"birth date\",\n            \"operator\": \">\",\n            \"value\": \"YYYY-MM-DD\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are the names of the 3 youngest winners across all matches?", "select_target": [14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3", "number_predicates": 0}, "prior_select": [["winner name", "winner rank"], ["winner name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"winner name\", \"winner age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are the names of the 3 youngest winners across all matches?"], "utterance": "What are their ranks? | do you want to show their names as well? | yes, please", "select_target": [14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3", "number_predicates": 0}, "prior_select": [["winner name", "winner rank"], ["winner name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"winner name\", \"winner age\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"winner name\", \"winner age\", \"winner rank\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are their ranks? | do you want to show their names as well? | yes, please", "What are the names of the 3 youngest winners across all matches?"], "utterance": "What is the loser name for each of those matches?", "select_target": [14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3", "number_predicates": 0}, "prior_select": [["winner name", "winner rank"], ["winner name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"winner name\", \"winner age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner name\", \"winner age\", \"winner rank\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"winner name\", \"winner age\", \"winner rank\", \"loser name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "how many players are presented on the table", "select_target": [4], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[1, "eq", "Mirjana"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"", "number_predicates": 1}, "prior_select": [["country code"], ["first name"], ["*"]], "prior_where_col": [[["eq", "first name", "Mirjana"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many players are presented on the table"], "utterance": "list out the players first name", "select_target": [4], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[1, "eq", "Mirjana"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"", "number_predicates": 1}, "prior_select": [["country code"], ["first name"], ["*"]], "prior_where_col": [[["eq", "first name", "Mirjana"]], [], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["list out the players first name", "how many players are presented on the table"], "utterance": "what is the country code of Mirjana", "select_target": [4], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[1, "eq", "Mirjana"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"", "number_predicates": 1}, "prior_select": [["country code"], ["first name"], ["*"]], "prior_where_col": [[["eq", "first name", "Mirjana"]], [], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Mirjana\"\n    }]\n}"}, {"previous_utterances": ["what is the country code of Mirjana", "list out the players first name", "how many players are presented on the table"], "utterance": "what is the birth date of Justine", "select_target": [4], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[1, "eq", "Mirjana"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT birth_date FROM players  where first_name  =  \"Mirjana\"", "number_predicates": 1}, "prior_select": [["country code"], ["first name"], ["*"]], "prior_where_col": [[["eq", "first name", "Mirjana"]], [], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Mirjana\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Justine\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What are the codes of countries that have more than 50 players?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "U"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  FROM players where hand = 'U'", "number_predicates": 1}, "prior_select": [["hand"], ["player id"], ["first name", "last name"], ["country code"], ["country code"]], "prior_where_col": [[["eq", "player id", 206449]], [["eq", "country code", "AHO"]], [["eq", "country code", "AHO"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the codes of countries that have more than 50 players?"], "utterance": "What are the codes of countries that have less than 40 players?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "U"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  FROM players where hand = 'U'", "number_predicates": 1}, "prior_select": [["hand"], ["player id"], ["first name", "last name"], ["country code"], ["country code"]], "prior_where_col": [[["eq", "player id", 206449]], [["eq", "country code", "AHO"]], [["eq", "country code", "AHO"]], [], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the codes of countries that have less than 40 players?", "What are the codes of countries that have more than 50 players?"], "utterance": "What are the player names from the country code AHO? | Do you want first name and last name? | yes", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "U"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  FROM players where hand = 'U'", "number_predicates": 1}, "prior_select": [["hand"], ["player id"], ["first name", "last name"], ["country code"], ["country code"]], "prior_where_col": [[["eq", "player id", 206449]], [["eq", "country code", "AHO"]], [["eq", "country code", "AHO"]], [], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the player names from the country code AHO? | Do you want first name and last name? | yes", "What are the codes of countries that have less than 40 players?", "What are the codes of countries that have more than 50 players?"], "utterance": "What are their player IDs?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "U"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  FROM players where hand = 'U'", "number_predicates": 1}, "prior_select": [["hand"], ["player id"], ["first name", "last name"], ["country code"], ["country code"]], "prior_where_col": [[["eq", "player id", 206449]], [["eq", "country code", "AHO"]], [["eq", "country code", "AHO"]], [], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are their player IDs?", "What are the player names from the country code AHO? | Do you want first name and last name? | yes", "What are the codes of countries that have less than 40 players?", "What are the codes of countries that have more than 50 players?"], "utterance": "What hand is player id 206449?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "U"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  FROM players where hand = 'U'", "number_predicates": 1}, "prior_select": [["hand"], ["player id"], ["first name", "last name"], ["country code"], ["country code"]], "prior_where_col": [[["eq", "player id", 206449]], [["eq", "country code", "AHO"]], [["eq", "country code", "AHO"]], [], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"hand\"],\n    \"data filters\": [\n        {\n            \"column\": \"player id\",\n            \"operator\": \"=\",\n            \"value\": \"206449\"\n        }\n    ]\n}"}, {"previous_utterances": ["What hand is player id 206449?", "What are their player IDs?", "What are the player names from the country code AHO? | Do you want first name and last name? | yes", "What are the codes of countries that have less than 40 players?", "What are the codes of countries that have more than 50 players?"], "utterance": "How many other players have that?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "U"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  FROM players where hand = 'U'", "number_predicates": 1}, "prior_select": [["hand"], ["player id"], ["first name", "last name"], ["country code"], ["country code"]], "prior_where_col": [[["eq", "player id", 206449]], [["eq", "country code", "AHO"]], [["eq", "country code", "AHO"]], [], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"AHO\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"hand\"],\n    \"data filters\": [\n        {\n            \"column\": \"player id\",\n            \"operator\": \"=\",\n            \"value\": \"206449\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"hand\",\n            \"operator\": \"=\",\n            \"value\": \"R\"\n        },\n        {\n            \"column\": \"player id\",\n            \"operator\": \"!=\",\n            \"value\": \"206449\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What year has the most number of matches, please?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[22, "eq", "Hard"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "number_predicates": 1}, "prior_select": [["year", "*"], ["year", "*"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2016]], [], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["What year has the most number of matches, please?"], "utterance": "What year has the least number of matches, please?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[22, "eq", "Hard"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "number_predicates": 1}, "prior_select": [["year", "*"], ["year", "*"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2016]], [], [], []], "result": ["{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["What year has the least number of matches, please?", "What year has the most number of matches, please?"], "utterance": "How many matches were there that year?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[22, "eq", "Hard"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "number_predicates": 1}, "prior_select": [["year", "*"], ["year", "*"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2016]], [], [], []], "result": ["{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"match num\"],\n  \"data filters\": [\n    {\n      \"column\": \"year\",\n      \"operator\": \"=\",\n      \"value\": \"Value\"\n    }\n  ]\n}"}, {"previous_utterances": ["How many matches were there that year?", "What year has the least number of matches, please?", "What year has the most number of matches, please?"], "utterance": "What about in 2016?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[22, "eq", "Hard"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "number_predicates": 1}, "prior_select": [["year", "*"], ["year", "*"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2016]], [], [], []], "result": ["{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"match num\"],\n  \"data filters\": [\n    {\n      \"column\": \"year\",\n      \"operator\": \"=\",\n      \"value\": \"Value\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"match num\"],\n  \"data filters\": [\n    {\n      \"column\": \"year\",\n      \"operator\": \"=\",\n      \"value\": \"2016\"\n    }\n  ]\n}"}, {"previous_utterances": ["What about in 2016?", "How many matches were there that year?", "What year has the least number of matches, please?", "What year has the most number of matches, please?"], "utterance": "How many of those were played on a hard surface?", "select_target": [42], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[22, "eq", "Hard"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT count ( * )  from matches where surface  =  \"Hard\"", "number_predicates": 1}, "prior_select": [["year", "*"], ["year", "*"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2016]], [], [], []], "result": ["{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"year\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"match num\"],\n  \"data filters\": [\n    {\n      \"column\": \"year\",\n      \"operator\": \"=\",\n      \"value\": \"Value\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"match num\"],\n  \"data filters\": [\n    {\n      \"column\": \"year\",\n      \"operator\": \"=\",\n      \"value\": \"2016\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"match num\"],\n  \"data filters\": [\n    {\n      \"column\": \"year\",\n      \"operator\": \"=\",\n      \"value\": \"2016\"\n    },\n    {\n      \"column\": \"surface\",\n      \"operator\": \"=\",\n      \"value\": \"Hard\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "Can you show the birth date of player id 200002?", "select_target": [5], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50", "number_predicates": 0}, "prior_select": [["first name"], ["birth date"]], "prior_where_col": [[["eq", "player id", 200001]], [["eq", "player id", 200002]]], "result": [], "pred_intent": "{\n\"data columns\": [\"birth date\"],\n\"data filters\": [{\n\"column\": \"player id\",\n\"operator\": \"=\",\n\"value\": \"200002\"\n}]\n}"}, {"previous_utterances": ["Can you show the birth date of player id 200002?"], "utterance": "What is the first name of player id 200001?", "select_target": [5], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50", "number_predicates": 0}, "prior_select": [["first name"], ["birth date"]], "prior_where_col": [[["eq", "player id", 200001]], [["eq", "player id", 200002]]], "result": ["{\n\"data columns\": [\"birth date\"],\n\"data filters\": [{\n\"column\": \"player id\",\n\"operator\": \"=\",\n\"value\": \"200002\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"player id\",\n\"operator\": \"=\",\n\"value\": \"200001\"\n}]\n}"}, {"previous_utterances": ["What is the first name of player id 200001?", "Can you show the birth date of player id 200002?"], "utterance": "Can you show the codes of countries that have more than 50 players?", "select_target": [5], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50", "number_predicates": 0}, "prior_select": [["first name"], ["birth date"]], "prior_where_col": [[["eq", "player id", 200001]], [["eq", "player id", 200002]]], "result": ["{\n\"data columns\": [\"birth date\"],\n\"data filters\": [{\n\"column\": \"player id\",\n\"operator\": \"=\",\n\"value\": \"200002\"\n}]\n}", "{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"player id\",\n\"operator\": \"=\",\n\"value\": \"200001\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"country code\"],\n\"data filters\": [{\n\"column\": \"tours\",\n\"operator\": \">\",\n\"value\": \"50\"\n}]\n}"}, {"previous_utterances": [], "utterance": "Find the names of the 3 youngest winners across all matches", "select_target": [27], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3", "number_predicates": 0}, "prior_select": [["loser rank points"], ["winner name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"winner name\"],\n  \"data filters\": [\n    {\n      \"column\": \"round\",\n      \"operator\": \"=\",\n      \"value\": \"F\"\n    }\n  ]\n}"}, {"previous_utterances": ["Find the names of the 3 youngest winners across all matches"], "utterance": "What are points of the 3 youngest winners?", "select_target": [27], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3", "number_predicates": 0}, "prior_select": [["loser rank points"], ["winner name"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"winner name\"],\n  \"data filters\": [\n    {\n      \"column\": \"round\",\n      \"operator\": \"=\",\n      \"value\": \"F\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"winner name\", \"ranking points\"],\n  \"data filters\": [\n    {\n      \"column\": \"round\",\n      \"operator\": \"=\",\n      \"value\": \"F\"\n    }\n  ]\n}"}, {"previous_utterances": ["What are points of the 3 youngest winners?", "Find the names of the 3 youngest winners across all matches"], "utterance": "Give me the age of the 3 youngest winners across all matches", "select_target": [27], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3", "number_predicates": 0}, "prior_select": [["loser rank points"], ["winner name"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"winner name\"],\n  \"data filters\": [\n    {\n      \"column\": \"round\",\n      \"operator\": \"=\",\n      \"value\": \"F\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"winner name\", \"ranking points\"],\n  \"data filters\": [\n    {\n      \"column\": \"round\",\n      \"operator\": \"=\",\n      \"value\": \"F\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"winner name\", \"winner age\"],\n  \"data filters\": [\n    {\n      \"column\": \"round\",\n      \"operator\": \"=\",\n      \"value\": \"F\"\n    }\n  ]\n}"}, {"previous_utterances": [""], "utterance": "what are the names of the tourneys?", "select_target": [26], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT distinct tourney_name FROM matches", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n    \"data columns\": [\"tourney name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "hi, what are the names of the players?", "select_target": [1, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'", "number_predicates": 1}, "prior_select": [["first name", "last name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["hi, what are the names of the players?"], "utterance": "* I have left the chat *", "select_target": [1, 2], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[3, "eq", "L"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT first_name ,  last_name FROM players WHERE hand   =   'L'", "number_predicates": 1}, "prior_select": [["first name", "last name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What is the average age of the losers from all matches?", "select_target": [33, 14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[19, "eq", "minutes"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ", "number_predicates": 1}, "prior_select": [["*"], ["winner age"], ["loser age"]], "prior_where_col": [[["eq", "winner hand", "L"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the average age of the losers from all matches?"], "utterance": "What about the average age of the winners from all matches?", "select_target": [33, 14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[19, "eq", "minutes"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ", "number_predicates": 1}, "prior_select": [["*"], ["winner age"], ["loser age"]], "prior_where_col": [[["eq", "winner hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What about the average age of the winners from all matches?", "What is the average age of the losers from all matches?"], "utterance": "How many winners are left handed?", "select_target": [33, 14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[19, "eq", "minutes"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ", "number_predicates": 1}, "prior_select": [["*"], ["winner age"], ["loser age"]], "prior_where_col": [[["eq", "winner hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"winner hand\"],\n    \"data filters\": [{\n        \"column\": \"winner hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"}, {"previous_utterances": ["How many winners are left handed?", "What about the average age of the winners from all matches?", "What is the average age of the losers from all matches?"], "utterance": "What are the names of the winner and loser from the longest match?", "select_target": [33, 14], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [[19, "eq", "minutes"]], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ", "number_predicates": 1}, "prior_select": [["*"], ["winner age"], ["loser age"]], "prior_where_col": [[["eq", "winner hand", "L"]], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner hand\"],\n    \"data filters\": [{\n        \"column\": \"winner hand\",\n        \"operator\": \"=\",\n        \"value\": \"L\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"winner name\", \"loser name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What's the average age of all losers of all matches?", "select_target": [19], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT min ( minutes )  FROM matches", "number_predicates": 0}, "prior_select": [["minutes"], ["minutes"], ["winner age"], ["loser age"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What's the average age of all losers of all matches?"], "utterance": "What's the average age of all winners of all matches?", "select_target": [19], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT min ( minutes )  FROM matches", "number_predicates": 0}, "prior_select": [["minutes"], ["minutes"], ["winner age"], ["loser age"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What's the average age of all winners of all matches?", "What's the average age of all losers of all matches?"], "utterance": "What are the average minutes of all matches?", "select_target": [19], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT min ( minutes )  FROM matches", "number_predicates": 0}, "prior_select": [["minutes"], ["minutes"], ["winner age"], ["loser age"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"minutes\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are the average minutes of all matches?", "What's the average age of all winners of all matches?", "What's the average age of all losers of all matches?"], "utterance": "What was the longest match in minutes?", "select_target": [19], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT min ( minutes )  FROM matches", "number_predicates": 0}, "prior_select": [["minutes"], ["minutes"], ["winner age"], ["loser age"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"minutes\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"minutes\"],\n    \"data filters\": [{\n        \"column\": \"minutes\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }]\n}"}, {"previous_utterances": ["What was the longest match in minutes?", "What are the average minutes of all matches?", "What's the average age of all winners of all matches?", "What's the average age of all losers of all matches?"], "utterance": "What was the shortest match in minutes?", "select_target": [19], "column_names": ["player id", "first name", "last name", "hand", "birth date", "country code", "best of", "draw size", "loser age", "loser entry", "loser hand", "loser ht", "loser id", "loser ioc", "loser name", "loser rank", "loser rank points", "loser seed", "match num", "minutes", "round", "score", "surface", "tourney date", "tourney id", "tourney level", "tourney name", "winner age", "winner entry", "winner hand", "winner ht", "winner id", "winner ioc", "winner name", "winner rank", "winner rank points", "winner seed", "year", "ranking date", "ranking", "ranking points", "tours", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "wta_1", "raw_sql": "SELECT min ( minutes )  FROM matches", "number_predicates": 0}, "prior_select": [["minutes"], ["minutes"], ["winner age"], ["loser age"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"loser age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"winner age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"minutes\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"minutes\"],\n    \"data filters\": [{\n        \"column\": \"minutes\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"minutes\"],\n    \"data filters\": [{\n        \"column\": \"minutes\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "To which nationality does the people_id 1 belongs to ?", "select_target": [4], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["earnings"], ["birth date"], ["nationality"]], "prior_where_col": [[["eq", "people id", 5]], [["eq", "name", "Teodor Salparov"]], [["eq", "people id", 1]]], "result": [], "pred_intent": "{\n     \"data columns\": [\"nationality\"],\n     \"data filters\": [{\n         \"column\": \"people id\",\n         \"operator\": \"=\",\n         \"value\": \"1\"\n     }]\n}"}, {"previous_utterances": ["To which nationality does the people_id 1 belongs to ?"], "utterance": "Tell me the birthday date of Teodor Salparov ?", "select_target": [4], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["earnings"], ["birth date"], ["nationality"]], "prior_where_col": [[["eq", "people id", 5]], [["eq", "name", "Teodor Salparov"]], [["eq", "people id", 1]]], "result": ["{\n     \"data columns\": [\"nationality\"],\n     \"data filters\": [{\n         \"column\": \"people id\",\n         \"operator\": \"=\",\n         \"value\": \"1\"\n     }]\n}"], "pred_intent": "{\n     \"data columns\": [\"birth date\"],\n     \"data filters\": [{\n         \"column\": \"name\",\n         \"operator\": \"=\",\n         \"value\": \"Teodor Salparov\"\n     }]\n}"}, {"previous_utterances": ["Tell me the birthday date of Teodor Salparov ?", "To which nationality does the people_id 1 belongs to ?"], "utterance": "Tell me the earnings of the people id 5?", "select_target": [4], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["earnings"], ["birth date"], ["nationality"]], "prior_where_col": [[["eq", "people id", 5]], [["eq", "name", "Teodor Salparov"]], [["eq", "people id", 1]]], "result": ["{\n     \"data columns\": [\"nationality\"],\n     \"data filters\": [{\n         \"column\": \"people id\",\n         \"operator\": \"=\",\n         \"value\": \"1\"\n     }]\n}", "{\n     \"data columns\": [\"birth date\"],\n     \"data filters\": [{\n         \"column\": \"name\",\n         \"operator\": \"=\",\n         \"value\": \"Teodor Salparov\"\n     }]\n}"], "pred_intent": "{\n     \"data columns\": [\"earnings\"],\n     \"data filters\": [{\n         \"column\": \"people id\",\n         \"operator\": \"=\",\n         \"value\": \"5\"\n     }]\n}"}, {"previous_utterances": ["Tell me the earnings of the people id 5?", "Tell me the birthday date of Teodor Salparov ?", "To which nationality does the people_id 1 belongs to ?"], "utterance": "What is the money rank of the tallest poker player ?", "select_target": [4], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["earnings"], ["birth date"], ["nationality"]], "prior_where_col": [[["eq", "people id", 5]], [["eq", "name", "Teodor Salparov"]], [["eq", "people id", 1]]], "result": ["{\n     \"data columns\": [\"nationality\"],\n     \"data filters\": [{\n         \"column\": \"people id\",\n         \"operator\": \"=\",\n         \"value\": \"1\"\n     }]\n}", "{\n     \"data columns\": [\"birth date\"],\n     \"data filters\": [{\n         \"column\": \"name\",\n         \"operator\": \"=\",\n         \"value\": \"Teodor Salparov\"\n     }]\n}", "{\n     \"data columns\": [\"earnings\"],\n     \"data filters\": [{\n         \"column\": \"people id\",\n         \"operator\": \"=\",\n         \"value\": \"5\"\n     }]\n}"], "pred_intent": "{\n     \"data columns\": [\"money rank\"],\n     \"data filters\": [{\n         \"column\": \"height\",\n         \"operator\": \"=\",\n         \"value\": \"tallest\"\n     }]\n}"}, {"previous_utterances": [], "utterance": "Can you list all the names of the poker players ordered by the final tables in ascending order please?", "select_target": [3], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1", "number_predicates": 0}, "prior_select": [["name"], ["name"], ["nationality"], ["name"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}"}, {"previous_utterances": ["Can you list all the names of the poker players ordered by the final tables in ascending order please?"], "utterance": "What are the nationalities of the poker players ordered by the final tables in ascending order?", "select_target": [3], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1", "number_predicates": 0}, "prior_select": [["name"], ["name"], ["nationality"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}"}, {"previous_utterances": ["What are the nationalities of the poker players ordered by the final tables in ascending order?", "Can you list all the names of the poker players ordered by the final tables in ascending order please?"], "utterance": "What is the name of the poker player with the highest earnings?", "select_target": [3], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1", "number_predicates": 0}, "prior_select": [["name"], ["name"], ["nationality"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }],\n    \"order by\": {\n        \"column\": \"earnings\",\n        \"order\": \"desc\"\n    },\n    \"limit\": 1\n}"}, {"previous_utterances": ["What is the name of the poker player with the highest earnings?", "What are the nationalities of the poker players ordered by the final tables in ascending order?", "Can you list all the names of the poker players ordered by the final tables in ascending order please?"], "utterance": "What about the poker player with the lowest earnings?", "select_target": [3], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1", "number_predicates": 0}, "prior_select": [["name"], ["name"], ["nationality"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }],\n    \"order by\": {\n        \"column\": \"earnings\",\n        \"order\": \"desc\"\n    },\n    \"limit\": 1\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }],\n    \"order by\": {\n        \"column\": \"earnings\",\n        \"order\": \"asc\"\n    },\n    \"limit\": 1\n}"}, {"previous_utterances": ["What about the poker player with the lowest earnings?", "What is the name of the poker player with the highest earnings?", "What are the nationalities of the poker players ordered by the final tables in ascending order?", "Can you list all the names of the poker players ordered by the final tables in ascending order please?"], "utterance": "What was his best finish?", "select_target": [3], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1", "number_predicates": 0}, "prior_select": [["name"], ["name"], ["nationality"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": [],\n    \"order by\": {\n        \"column\": \"final table made\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }],\n    \"order by\": {\n        \"column\": \"earnings\",\n        \"order\": \"desc\"\n    },\n    \"limit\": 1\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }],\n    \"order by\": {\n        \"column\": \"earnings\",\n        \"order\": \"asc\"\n    },\n    \"limit\": 1\n}"], "pred_intent": "{\n    \"data columns\": [\"best finish\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Name\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Name players whose earnings are more than 300000. | Do you mean the names of the poker players whose earnings is more than 300000? | yes names", "select_target": [0], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT count ( Poker_Player_ID )  from poker_player", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[["gt", "earnings", 300000]]], "result": [], "pred_intent": "{\n  \"data filters\": [\n    {\n      \"column\": \"earnings\",\n      \"operator\": \">\",\n      \"value\": \"300000\"\n    }\n  ]\n}"}, {"previous_utterances": ["Name players whose earnings are more than 300000. | Do you mean the names of the poker players whose earnings is more than 300000? | yes names"], "utterance": "how many poker players?", "select_target": [0], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT count ( Poker_Player_ID )  from poker_player", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[["gt", "earnings", 300000]]], "result": ["{\n  \"data filters\": [\n    {\n      \"column\": \"earnings\",\n      \"operator\": \">\",\n      \"value\": \"300000\"\n    }\n  ]\n}"], "pred_intent": "There is no specific data filter mentioned in the user's question to identify the number of poker players. However, if the user is asking about the total count of poker players in the dataset, the assistant can provide that information. Assuming \"poker player id\" is a unique identifier for each poker player, the visualization intent to retrieve the count of poker players can be as follows:\n\n{\n  \"data columns\": [\"poker player id\"]\n}"}, {"previous_utterances": [], "utterance": "Which height of Aleksey Ostapenko?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    >=    2", "number_predicates": 0}, "prior_select": [["people id"], ["name"], ["height"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [["eq", "birth date", "August 16, 1982"]], [["eq", "name", "Aleksey Ostapenko"]]], "result": [], "pred_intent": "{\"data columns\": [\"height\"], \"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"Aleksey Ostapenko\"}]}"}, {"previous_utterances": ["Which height of Aleksey Ostapenko?"], "utterance": "Who the person is born on August 16, 1982?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    >=    2", "number_predicates": 0}, "prior_select": [["people id"], ["name"], ["height"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [["eq", "birth date", "August 16, 1982"]], [["eq", "name", "Aleksey Ostapenko"]]], "result": ["{\"data columns\": [\"height\"], \"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"Aleksey Ostapenko\"}]}"], "pred_intent": "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"birth date\", \"operator\": \"=\", \"value\": \"1982-08-16\"}]}"}, {"previous_utterances": ["Who the person is born on August 16, 1982?", "Which height of Aleksey Ostapenko?"], "utterance": "What are the people id of nationality Russia?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    >=    2", "number_predicates": 0}, "prior_select": [["people id"], ["name"], ["height"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [["eq", "birth date", "August 16, 1982"]], [["eq", "name", "Aleksey Ostapenko"]]], "result": ["{\"data columns\": [\"height\"], \"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"Aleksey Ostapenko\"}]}", "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"birth date\", \"operator\": \"=\", \"value\": \"1982-08-16\"}]}"], "pred_intent": "{\"data columns\": [\"people id\"], \"data filters\": [{\"column\": \"nationality\", \"operator\": \"=\", \"value\": \"Russia\"}]}"}, {"previous_utterances": ["What are the people id of nationality Russia?", "Who the person is born on August 16, 1982?", "Which height of Aleksey Ostapenko?"], "utterance": "What are the nationalities that are shared by at least two people?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    >=    2", "number_predicates": 0}, "prior_select": [["people id"], ["name"], ["height"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [["eq", "birth date", "August 16, 1982"]], [["eq", "name", "Aleksey Ostapenko"]]], "result": ["{\"data columns\": [\"height\"], \"data filters\": [{\"column\": \"name\", \"operator\": \"=\", \"value\": \"Aleksey Ostapenko\"}]}", "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"birth date\", \"operator\": \"=\", \"value\": \"1982-08-16\"}]}", "{\"data columns\": [\"people id\"], \"data filters\": [{\"column\": \"nationality\", \"operator\": \"=\", \"value\": \"Russia\"}]}"], "pred_intent": "{\"data columns\": [\"nationality\"], \"data filters\": []}"}, {"previous_utterances": [], "utterance": "What are the names of non poker players?", "select_target": [7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"poker player id\",\n\"operator\": \"=\",\n\"value\": \"0\"\n}\n]\n}"}, {"previous_utterances": ["What are the names of non poker players?"], "utterance": "What are the names of people who play poker?", "select_target": [7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"poker player id\",\n\"operator\": \"=\",\n\"value\": \"0\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"poker player id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "How much did the winning poker player make?", "select_target": [2], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["final table made"], ["earnings"], ["earnings"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"earnings\"],\n  \"data filters\": [\n    {\n      \"column\": \"best finish\",\n      \"operator\": \"=\",\n      \"value\": \"1\"\n    }\n  ]\n}"}, {"previous_utterances": ["How much did the winning poker player make?"], "utterance": "Can you rank the poker players earnings from highest to lowest?", "select_target": [2], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["final table made"], ["earnings"], ["earnings"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"earnings\"],\n  \"data filters\": [\n    {\n      \"column\": \"best finish\",\n      \"operator\": \"=\",\n      \"value\": \"1\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"poker player id\", \"earnings\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Can you rank the poker players earnings from highest to lowest?", "How much did the winning poker player make?"], "utterance": "How many final tables did the poker player with the least amount of earnings make?", "select_target": [2], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["final table made"], ["earnings"], ["earnings"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"earnings\"],\n  \"data filters\": [\n    {\n      \"column\": \"best finish\",\n      \"operator\": \"=\",\n      \"value\": \"1\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"poker player id\", \"earnings\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"final table made\"],\n  \"data filters\": [\n    {\n      \"column\": \"earnings\",\n      \"operator\": \"=\",\n      \"value\": \"<value of least earnings>\"\n    }\n  ]\n}"}, {"previous_utterances": ["How many final tables did the poker player with the least amount of earnings make?", "Can you rank the poker players earnings from highest to lowest?", "How much did the winning poker player make?"], "utterance": "What about the poker player with the most earnings how many final table did they make?", "select_target": [2], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["final table made"], ["earnings"], ["earnings"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"earnings\"],\n  \"data filters\": [\n    {\n      \"column\": \"best finish\",\n      \"operator\": \"=\",\n      \"value\": \"1\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"poker player id\", \"earnings\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"final table made\"],\n  \"data filters\": [\n    {\n      \"column\": \"earnings\",\n      \"operator\": \"=\",\n      \"value\": \"<value of least earnings>\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"final table made\"],\n  \"data filters\": [\n    {\n      \"column\": \"earnings\",\n      \"operator\": \"=\",\n      \"value\": \"<value of most earnings>\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "What is the money rank of the poker player with the highest earnings?", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Earnings FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["best finish"], ["people id"], ["money rank"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"money rank\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"}, {"previous_utterances": ["What is the money rank of the poker player with the highest earnings?"], "utterance": "What is the highest earner's people ID?", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Earnings FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["best finish"], ["people id"], ["money rank"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"money rank\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"people id\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"}, {"previous_utterances": ["What is the highest earner's people ID?", "What is the money rank of the poker player with the highest earnings?"], "utterance": "What was their best finish?", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Earnings FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["best finish"], ["people id"], ["money rank"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"money rank\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}", "{\n    \"data columns\": [\"people id\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"best finish\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"}, {"previous_utterances": ["What was their best finish?", "What is the highest earner's people ID?", "What is the money rank of the poker player with the highest earnings?"], "utterance": "And what is the highest earning?", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Earnings FROM poker_player order by Earnings desc limit 1", "number_predicates": 0}, "prior_select": [["best finish"], ["people id"], ["money rank"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"money rank\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}", "{\n    \"data columns\": [\"people id\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}", "{\n    \"data columns\": [\"best finish\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"earnings\"],\n    \"data filters\": [{\n        \"column\": \"earnings\",\n        \"operator\": \"=\",\n        \"value\": \"highest\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many poker players are there ?", "select_target": [7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[5, "gt", 300000]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["gt", "earnings", 300000]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many poker players are there ?"], "utterance": "How many of them earning more than 300000", "select_target": [7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[5, "gt", 300000]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["gt", "earnings", 300000]], []], "result": ["{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"earnings\",\n            \"operator\": \">\",\n            \"value\": \"300000\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many of them earning more than 300000", "How many poker players are there ?"], "utterance": "May i get the name detail of both players", "select_target": [7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[5, "gt", 300000]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["gt", "earnings", 300000]], []], "result": ["{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": [\n        {\n            \"column\": \"earnings\",\n            \"operator\": \">\",\n            \"value\": \"300000\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"earnings\",\n            \"operator\": \">\",\n            \"value\": \"300000\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "List all the nationalities in the table with no duplicate records", "select_target": [10], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Bulgaria"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'", "number_predicates": 1}, "prior_select": [["*"], ["nationality"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["List all the nationalities in the table with no duplicate records"], "utterance": "List all the nationalities in the table", "select_target": [10], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Bulgaria"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'", "number_predicates": 1}, "prior_select": [["*"], ["nationality"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [], []], "result": ["{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["List all the nationalities in the table", "List all the nationalities in the table with no duplicate records"], "utterance": "Count the number of records where nationality is Russia", "select_target": [10], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Bulgaria"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'", "number_predicates": 1}, "prior_select": [["*"], ["nationality"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [], []], "result": ["{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"nationality\",\n        \"operator\": \"=\",\n        \"value\": \"Russia\"\n    }]\n}"}, {"previous_utterances": ["Count the number of records where nationality is Russia", "List all the nationalities in the table", "List all the nationalities in the table with no duplicate records"], "utterance": "Count the number of records where nationality is Bulgaria", "select_target": [10], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Bulgaria"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT count ( * )  FROM people where Nationality  =  'Bulgaria'", "number_predicates": 1}, "prior_select": [["*"], ["nationality"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], [], []], "result": ["{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"nationality\",\n        \"operator\": \"=\",\n        \"value\": \"Russia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"nationality\",\n        \"operator\": \"=\",\n        \"value\": \"Bulgaria\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "how many poker players are on the table", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[9, "gt", 200]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["gt", "height", 200]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many poker players are on the table"], "utterance": "how many have height higher than 200", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[9, "gt", 200]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["gt", "height", 200]], []], "result": ["{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"height\"],\n    \"data filters\": [{\n        \"column\": \"height\",\n        \"operator\": \">\",\n        \"value\": \"200\"\n    }]\n}"}, {"previous_utterances": ["how many have height higher than 200", "how many poker players are on the table"], "utterance": "what is the average earnings of poker players with height higher than 200", "select_target": [5], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[9, "gt", 200]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["gt", "height", 200]], []], "result": ["{\n    \"data columns\": [\"poker player id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"height\"],\n    \"data filters\": [{\n        \"column\": \"height\",\n        \"operator\": \">\",\n        \"value\": \"200\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"earnings\"],\n    \"data filters\": [{\n        \"column\": \"height\",\n        \"operator\": \">\",\n        \"value\": \"200\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What is the birth date of the poker player with the lowest earnings?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["birth date"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\"data columns\": [\"birth date\"], \"data filters\": [{\"column\": \"earnings\", \"operator\": \"=\", \"value\": \"lowest\"}]}"}, {"previous_utterances": ["What is the birth date of the poker player with the lowest earnings?"], "utterance": "What is the name of the poker player with the lowest earnings?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["birth date"]], "prior_where_col": [[], []], "result": ["{\"data columns\": [\"birth date\"], \"data filters\": [{\"column\": \"earnings\", \"operator\": \"=\", \"value\": \"lowest\"}]}"], "pred_intent": "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"earnings\", \"operator\": \"=\", \"value\": \"lowest\"}]}"}, {"previous_utterances": ["What is the name of the poker player with the lowest earnings?", "What is the birth date of the poker player with the lowest earnings?"], "utterance": "What is the nationality of the poker player with the lowest earnings?", "select_target": [6], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["birth date"]], "prior_where_col": [[], []], "result": ["{\"data columns\": [\"birth date\"], \"data filters\": [{\"column\": \"earnings\", \"operator\": \"=\", \"value\": \"lowest\"}]}", "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"earnings\", \"operator\": \"=\", \"value\": \"lowest\"}]}"], "pred_intent": "{\"data columns\": [\"nationality\"], \"data filters\": [{\"column\": \"earnings\", \"operator\": \"=\", \"value\": \"lowest\"}]}"}, {"previous_utterances": [], "utterance": "Hello!  Which nationalities are shared by more than one person?", "select_target": [1, 7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Russia"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'", "number_predicates": 1}, "prior_select": [["people id"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hello!  Which nationalities are shared by more than one person?"], "utterance": "Okay.  Thanks for that!  Can you show me all of the people IDs that have Russia as the nationality?", "select_target": [1, 7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Russia"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'", "number_predicates": 1}, "prior_select": [["people id"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], []], "result": ["{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"people id\"],\n    \"data filters\": [\n    {\n    \"column\": \"nationality\",\n    \"operator\": \"=\",\n    \"value\": \"Russia\"\n    }]\n}"}, {"previous_utterances": ["Okay.  Thanks for that!  Can you show me all of the people IDs that have Russia as the nationality?", "Hello!  Which nationalities are shared by more than one person?"], "utterance": "Excellent!  Can you  update this list to show the names of all of the associated individuals?", "select_target": [1, 7], "column_names": ["poker player id", "people id", "final table made", "best finish", "money rank", "earnings", "nationality", "name", "birth date", "height", "*"], "where_clauses": [[6, "eq", "Russia"]], "debug_info": {"where_categorization": -1, "db_id": "poker_player", "raw_sql": "SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'", "number_predicates": 1}, "prior_select": [["people id"], ["nationality"]], "prior_where_col": [[["eq", "nationality", "Russia"]], []], "result": ["{\n    \"data columns\": [\"nationality\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"people id\"],\n    \"data filters\": [\n    {\n    \"column\": \"nationality\",\n    \"operator\": \"=\",\n    \"value\": \"Russia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n    {\n    \"column\": \"nationality\",\n    \"operator\": \"=\",\n    \"value\": \"Russia\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "which singers were born before 1945?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}"}, {"previous_utterances": ["which singers were born before 1945?"], "utterance": "how about after 1955?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}"}, {"previous_utterances": ["how about after 1955?", "which singers were born before 1945?"], "utterance": "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}"}, {"previous_utterances": ["which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "how about after 1955?", "which singers were born before 1945?"], "utterance": "and after 1955?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}"}, {"previous_utterances": ["and after 1955?", "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "how about after 1955?", "which singers were born before 1945?"], "utterance": "Which singers with a citizenship of United States were born before 1945?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which singers with a citizenship of United States were born before 1945?", "and after 1955?", "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "how about after 1955?", "which singers were born before 1945?"], "utterance": "and after 1955", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}"}, {"previous_utterances": ["and after 1955", "Which singers with a citizenship of United States were born before 1945?", "and after 1955?", "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "how about after 1955?", "which singers were born before 1945?"], "utterance": "Which singers with a citizenship of France were born before 1945?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"France\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which singers with a citizenship of France were born before 1945?", "and after 1955", "Which singers with a citizenship of United States were born before 1945?", "and after 1955?", "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "how about after 1955?", "which singers were born before 1945?"], "utterance": "and after 1955?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"France\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"France\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}"}, {"previous_utterances": ["and after 1955?", "Which singers with a citizenship of France were born before 1945?", "and after 1955", "Which singers with a citizenship of United States were born before 1945?", "and after 1955?", "which singers born before 1945 and after 1955 have the same citizenship? | Did you mean the singers born before 1945 OR after 1955? | what is the citizenship of the singers born before 1945?", "how about after 1955?", "which singers were born before 1945?"], "utterance": "Which singers with a citizenship of Chile were born before 1945 or after 1955?", "select_target": [9, 9], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile'", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"], ["*"], ["citizenship"], ["citizenship"], ["*"], ["*"]], "prior_where_col": [[], [["lt", "birth year", 1945], ["eq", "citizenship", "France"]], [], [["lt", "birth year", 1945], ["eq", "citizenship", "United States"]], [["lt", "birth year", 1945], ["gt", "birth year", 1955]], [["lt", "birth year", 1945]], [["gt", "birth year", 1955]], [["lt", "birth year", 1945]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \"<\",\n        \"value\": \"1945\"\n    }]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"birth year\",\n        \"operator\": \">\",\n        \"value\": \"1955\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"France\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"France\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"citizenship\",\n            \"operator\": \"=\",\n            \"value\": \"Chile\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \"<\",\n            \"value\": \"1945\"\n        },\n        {\n            \"column\": \"birth year\",\n            \"operator\": \">\",\n            \"value\": \"1955\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the most common citizenship of singers, please?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[4, "eq", "Australia"]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer where Citizenship = 'Australia'", "number_predicates": 1}, "prior_select": [["citizenship"], ["citizenship"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the most common citizenship of singers, please?"], "utterance": "What about the least common?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[4, "eq", "Australia"]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer where Citizenship = 'Australia'", "number_predicates": 1}, "prior_select": [["citizenship"], ["citizenship"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What about the least common?", "What is the most common citizenship of singers, please?"], "utterance": "What are the names of all the singers from Australia, please?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[4, "eq", "Australia"]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer where Citizenship = 'Australia'", "number_predicates": 1}, "prior_select": [["citizenship"], ["citizenship"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"citizenship\",\n        \"operator\": \"=\",\n        \"value\": \"Australia\"\n    }]\n}"}, {"previous_utterances": [""], "utterance": "who is the singers name? | did you mean List the names of all singers | yes tell me singers name?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT Name FROM singer", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What are the names of the singers who were born in either 1948 or 1949?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[2, "eq", 1948], [2, "eq", 1949]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "number_predicates": 2}, "prior_select": [["name", "net worth millions"], ["name"], ["citizenship"], ["name"]], "prior_where_col": [[["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]]], "result": [], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"}, {"previous_utterances": ["What are the names of the singers who were born in either 1948 or 1949?"], "utterance": "What is their citizenship?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[2, "eq", 1948], [2, "eq", 1949]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "number_predicates": 2}, "prior_select": [["name", "net worth millions"], ["name"], ["citizenship"], ["name"]], "prior_where_col": [[["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]]], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"citizenship\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"}, {"previous_utterances": ["What is their citizenship?", "What are the names of the singers who were born in either 1948 or 1949?"], "utterance": "Of the singers that were born in 1948 or 1949, which had the highest net worth?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[2, "eq", 1948], [2, "eq", 1949]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "number_predicates": 2}, "prior_select": [["name", "net worth millions"], ["name"], ["citizenship"], ["name"]], "prior_where_col": [[["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]]], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}", "{\n\"data columns\": [\"citizenship\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"net worth millions\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"}, {"previous_utterances": ["Of the singers that were born in 1948 or 1949, which had the highest net worth?", "What is their citizenship?", "What are the names of the singers who were born in either 1948 or 1949?"], "utterance": "Did she have a net worth that was over 30 million?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[2, "eq", 1948], [2, "eq", 1949]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "number_predicates": 2}, "prior_select": [["name", "net worth millions"], ["name"], ["citizenship"], ["name"]], "prior_where_col": [[["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]]], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}", "{\n\"data columns\": [\"citizenship\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}", "{\n\"data columns\": [\"name\", \"net worth millions\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"net worth millions\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n},\n{\n\"column\": \"net worth millions\",\n\"operator\": \">\",\n\"value\": \"30\"\n}\n]\n}"}, {"previous_utterances": ["Did she have a net worth that was over 30 million?", "Of the singers that were born in 1948 or 1949, which had the highest net worth?", "What is their citizenship?", "What are the names of the singers who were born in either 1948 or 1949?"], "utterance": "What was the lowest net worth of any singer who was born between 1948 and 1949?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[2, "eq", 1948], [2, "eq", 1949]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1", "number_predicates": 2}, "prior_select": [["name", "net worth millions"], ["name"], ["citizenship"], ["name"]], "prior_where_col": [[["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]], [["eq", "birth year", 1948], ["eq", "birth year", 1949]]], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}", "{\n\"data columns\": [\"citizenship\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}", "{\n\"data columns\": [\"name\", \"net worth millions\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}", "{\n\"data columns\": [\"name\", \"net worth millions\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n},\n{\n\"column\": \"net worth millions\",\n\"operator\": \">\",\n\"value\": \"30\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"net worth millions\"],\n\"data filters\": [\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1948\"\n},\n{\n\"column\": \"birth year\",\n\"operator\": \"=\",\n\"value\": \"1949\"\n}\n]\n}"}, {"previous_utterances": [""], "utterance": "Can you list all the singer ids that aren't present in the song table?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n    \"data columns\": [\"singer id\"],\n    \"data filters\": [{\n        \"column\": \"singer id\",\n        \"operator\": \"!=\",\n        \"value\": \"*\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "how many singers are on the table?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[7, "gt", 300000]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "number_predicates": 1}, "prior_select": [["name"], ["singer id"]], "prior_where_col": [[["gt", "sales", 300000]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"singer id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many singers are on the table?"], "utterance": "how many singers have songs with sales more than 300000?", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[7, "gt", 300000]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "number_predicates": 1}, "prior_select": [["name"], ["singer id"]], "prior_where_col": [[["gt", "sales", 300000]], []], "result": ["{\n    \"data columns\": [\"singer id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"singer id\"],\n    \"data filters\": [\n        {\n            \"column\": \"sales\",\n            \"operator\": \">\",\n            \"value\": \"300000\"\n        }\n    ]\n}"}, {"previous_utterances": ["how many singers have songs with sales more than 300000?", "how many singers are on the table?"], "utterance": "show distinct names of singers that have songs with sales more than 300000", "select_target": [1], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[7, "gt", 300000]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000", "number_predicates": 1}, "prior_select": [["name"], ["singer id"]], "prior_where_col": [[["gt", "sales", 300000]], []], "result": ["{\n    \"data columns\": [\"singer id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"singer id\"],\n    \"data filters\": [\n        {\n            \"column\": \"sales\",\n            \"operator\": \">\",\n            \"value\": \"300000\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"sales\",\n            \"operator\": \">\",\n            \"value\": \"300000\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many  singer there", "select_target": [7], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[5, "eq", 3]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT Sales from song where song_id  =  3", "number_predicates": 1}, "prior_select": [["citizenship"], ["*"]], "prior_where_col": [[["eq", "name", "Alice Walton"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"singer id\"]\n}"}, {"previous_utterances": ["how many  singer there"], "utterance": "what is the Citizenship of Alice Walton", "select_target": [7], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[5, "eq", 3]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT Sales from song where song_id  =  3", "number_predicates": 1}, "prior_select": [["citizenship"], ["*"]], "prior_where_col": [[["eq", "name", "Alice Walton"]], []], "result": ["{\n    \"data columns\": [\"singer id\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Alice Walton\"\n    }]\n}"}, {"previous_utterances": ["what is the Citizenship of Alice Walton", "how many  singer there"], "utterance": "how many sales from song id 3", "select_target": [7], "column_names": ["singer id", "name", "birth year", "net worth millions", "citizenship", "song id", "title", "sales", "highest position", "*"], "where_clauses": [[5, "eq", 3]], "debug_info": {"where_categorization": -1, "db_id": "singer", "raw_sql": "SELECT Sales from song where song_id  =  3", "number_predicates": 1}, "prior_select": [["citizenship"], ["*"]], "prior_where_col": [[["eq", "name", "Alice Walton"]], []], "result": ["{\n    \"data columns\": [\"singer id\"]\n}", "{\n    \"data columns\": [\"citizenship\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Alice Walton\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"sales\"],\n    \"data filters\": [{\n        \"column\": \"song id\",\n        \"operator\": \"=\",\n        \"value\": \"3\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you list all the flight numbers that have a source airport value of AHD?", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[10, "eq", " AHD"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" AHD\"", "number_predicates": 1}, "prior_select": [["flight number"]], "prior_where_col": [[["eq", "source airport", "AHD"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"AHD\"\n    }]\n}"}, {"previous_utterances": ["Can you list all the flight numbers that have a source airport value of AHD?"], "utterance": "Can you list the names of all the unique airlines that belong to those flight numbers?", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[10, "eq", " AHD"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" AHD\"", "number_predicates": 1}, "prior_select": [["flight number"]], "prior_where_col": [[["eq", "source airport", "AHD"]]], "result": ["{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"AHD\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"airline\"],\n    \"data filters\": [{\n        \"column\": \"flight number\",\n        \"operator\": \"=\",\n        \"value\": \"AHD\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what is the dest airport of airline 1", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[3, "eq", "USA"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"", "number_predicates": 1}, "prior_select": [["country"], ["source airport"], ["country"], ["destination airport"]], "prior_where_col": [[["eq", "airline name", "US Airways"]], [["eq", "destination airport", "ASY"]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "1"]]], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the dest airport of airline 1"], "utterance": "what is the country of united airlines", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[3, "eq", "USA"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"", "number_predicates": 1}, "prior_select": [["country"], ["source airport"], ["country"], ["destination airport"]], "prior_where_col": [[["eq", "airline name", "US Airways"]], [["eq", "destination airport", "ASY"]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "1"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"united airlines\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the country of united airlines", "what is the dest airport of airline 1"], "utterance": "what is the source airport of ASY | What is ASY? | dest airport", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[3, "eq", "USA"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"", "number_predicates": 1}, "prior_select": [["country"], ["source airport"], ["country"], ["destination airport"]], "prior_where_col": [[["eq", "airline name", "US Airways"]], [["eq", "destination airport", "ASY"]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "1"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"united airlines\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"abbreviation\",\n            \"operator\": \"=\",\n            \"value\": \"ASY\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the source airport of ASY | What is ASY? | dest airport", "what is the country of united airlines", "what is the dest airport of airline 1"], "utterance": "what is the country of us airways", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[3, "eq", "USA"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"", "number_predicates": 1}, "prior_select": [["country"], ["source airport"], ["country"], ["destination airport"]], "prior_where_col": [[["eq", "airline name", "US Airways"]], [["eq", "destination airport", "ASY"]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "1"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"united airlines\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"abbreviation\",\n            \"operator\": \"=\",\n            \"value\": \"ASY\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"us airways\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the country of us airways", "what is the source airport of ASY | What is ASY? | dest airport", "what is the country of united airlines", "what is the dest airport of airline 1"], "utterance": "what is the airline of country usa", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[3, "eq", "USA"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Airline FROM Airlines WHERE country   =   \"USA\"", "number_predicates": 1}, "prior_select": [["country"], ["source airport"], ["country"], ["destination airport"]], "prior_where_col": [[["eq", "airline name", "US Airways"]], [["eq", "destination airport", "ASY"]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "1"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"united airlines\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"abbreviation\",\n            \"operator\": \"=\",\n            \"value\": \"ASY\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"us airways\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"country\",\n            \"operator\": \"=\",\n            \"value\": \"usa\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the destination airport of  United Airlines?", "select_target": [9], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "Delta Airlines"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"", "number_predicates": 1}, "prior_select": [["airline name"], ["destination airport"]], "prior_where_col": [[], [["eq", "airline name", "United Airlines"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"destination airport\"],\n    \"data filters\": [{\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"United Airlines\"\n    }]\n}"}, {"previous_utterances": ["What is the destination airport of  United Airlines?"], "utterance": "How many airlines have flights departing from APG?", "select_target": [9], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "Delta Airlines"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"", "number_predicates": 1}, "prior_select": [["airline name"], ["destination airport"]], "prior_where_col": [[], [["eq", "airline name", "United Airlines"]]], "result": ["{\n    \"data columns\": [\"destination airport\"],\n    \"data filters\": [{\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"United Airlines\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"airline\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"APG\"\n    }]\n}"}, {"previous_utterances": ["How many airlines have flights departing from APG?", "What is the destination airport of  United Airlines?"], "utterance": "What is the flight number of Delta Airlines | Did you mean to ask for the flight numbers of all flights on Delta Airlines? | yes flight numbers of all flights on Delta Airlines", "select_target": [9], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "Delta Airlines"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  \"Delta Airlines\"", "number_predicates": 1}, "prior_select": [["airline name"], ["destination airport"]], "prior_where_col": [[], [["eq", "airline name", "United Airlines"]]], "result": ["{\n    \"data columns\": [\"destination airport\"],\n    \"data filters\": [{\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"United Airlines\"\n    }]\n}", "{\n    \"data columns\": [\"airline\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"APG\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [{\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"Delta Airlines\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Find Flight from CVO to SNA", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[10, "eq", " CVO"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"", "number_predicates": 1}, "prior_select": [["*"], ["flight number"]], "prior_where_col": [[["eq", "source airport", "CVO"], ["eq", "destination airport", "DFW"]], [["eq", "source airport", "CVO"], ["eq", "destination airport", "SNA"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"flight number\", \"source airport\", \"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"CVO\"\n        },\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"SNA\"\n        }\n    ]\n}"}, {"previous_utterances": ["Find Flight from CVO to SNA"], "utterance": "Flight from CVO to DFW", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[10, "eq", " CVO"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"", "number_predicates": 1}, "prior_select": [["*"], ["flight number"]], "prior_where_col": [[["eq", "source airport", "CVO"], ["eq", "destination airport", "DFW"]], [["eq", "source airport", "CVO"], ["eq", "destination airport", "SNA"]]], "result": ["{\n    \"data columns\": [\"flight number\", \"source airport\", \"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"CVO\"\n        },\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"SNA\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"flight number\", \"source airport\", \"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"CVO\"\n        },\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"DFW\"\n        }\n    ]\n}"}, {"previous_utterances": ["Flight from CVO to DFW", "Find Flight from CVO to SNA"], "utterance": "Which airlines have flight from CVO?", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[10, "eq", " CVO"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   \" CVO\"", "number_predicates": 1}, "prior_select": [["*"], ["flight number"]], "prior_where_col": [[["eq", "source airport", "CVO"], ["eq", "destination airport", "DFW"]], [["eq", "source airport", "CVO"], ["eq", "destination airport", "SNA"]]], "result": ["{\n    \"data columns\": [\"flight number\", \"source airport\", \"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"CVO\"\n        },\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"SNA\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"flight number\", \"source airport\", \"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"CVO\"\n        },\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"DFW\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"airline\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"CVO\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Hi, What Airline has the largest number of flights?", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "AirTran Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT country from airlines where airline =  \"AirTran Airways\"", "number_predicates": 1}, "prior_select": [["abbreviation"], ["airline name"], ["airline name"]], "prior_where_col": [[["eq", "airline name", "AirTran Airways"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hi, What Airline has the largest number of flights?"], "utterance": "What is the Airline with the fewest number of flights?", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "AirTran Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT country from airlines where airline =  \"AirTran Airways\"", "number_predicates": 1}, "prior_select": [["abbreviation"], ["airline name"], ["airline name"]], "prior_where_col": [[["eq", "airline name", "AirTran Airways"]], [], []], "result": ["{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the Airline with the fewest number of flights?", "Hi, What Airline has the largest number of flights?"], "utterance": "What is the abbreviation of AirTran Airways?", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "AirTran Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT country from airlines where airline =  \"AirTran Airways\"", "number_predicates": 1}, "prior_select": [["abbreviation"], ["airline name"], ["airline name"]], "prior_where_col": [[["eq", "airline name", "AirTran Airways"]], [], []], "result": ["{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"abbreviation\"],\n    \"data filters\": [{\n        \"column\": \"airline name\",\n        \"operator\": \"=\",\n        \"value\": \"AirTran Airways\"\n    }]\n}"}, {"previous_utterances": ["What is the abbreviation of AirTran Airways?", "What is the Airline with the fewest number of flights?", "Hi, What Airline has the largest number of flights?"], "utterance": "Ah, and what is the country of AirTran Airways?", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "AirTran Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT country from airlines where airline =  \"AirTran Airways\"", "number_predicates": 1}, "prior_select": [["abbreviation"], ["airline name"], ["airline name"]], "prior_where_col": [[["eq", "airline name", "AirTran Airways"]], [], []], "result": ["{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"abbreviation\"],\n    \"data filters\": [{\n        \"column\": \"airline name\",\n        \"operator\": \"=\",\n        \"value\": \"AirTran Airways\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [{\n        \"column\": \"airline name\",\n        \"operator\": \"=\",\n        \"value\": \"AirTran Airways\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many 'United Airlines' flights go to the Airport 'ASY'?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", 1], [11, "eq", " ASY"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\"", "number_predicates": 2}, "prior_select": [["airline id"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"], ["eq", "destination airport", "ASY"]]], "result": [], "pred_intent": "{\"data columns\": [\"flight number\"],\n    \"data filters\": [{\n    \"column\": \"airline\",\n    \"operator\": \"=\",\n    \"value\": \"United Airlines\"\n    },\n    {\n    \"column\": \"destination airport\",\n    \"operator\": \"=\",\n    \"value\": \"ASY\"\n    }]\n    }"}, {"previous_utterances": ["How many 'United Airlines' flights go to the Airport 'ASY'?"], "utterance": "What is the airline ID of United Airlines?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", 1], [11, "eq", " ASY"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\"", "number_predicates": 2}, "prior_select": [["airline id"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"], ["eq", "destination airport", "ASY"]]], "result": ["{\"data columns\": [\"flight number\"],\n    \"data filters\": [{\n    \"column\": \"airline\",\n    \"operator\": \"=\",\n    \"value\": \"United Airlines\"\n    },\n    {\n    \"column\": \"destination airport\",\n    \"operator\": \"=\",\n    \"value\": \"ASY\"\n    }]\n    }"], "pred_intent": "{\"data columns\": [\"airline id\"],\n    \"data filters\": [{\n    \"column\": \"airline\",\n    \"operator\": \"=\",\n    \"value\": \"United Airlines\"\n    }]\n    }"}, {"previous_utterances": ["What is the airline ID of United Airlines?", "How many 'United Airlines' flights go to the Airport 'ASY'?"], "utterance": "How many airlines with airline id 1 go to the destination airport ASY?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", 1], [11, "eq", " ASY"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   \" ASY\"", "number_predicates": 2}, "prior_select": [["airline id"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"], ["eq", "destination airport", "ASY"]]], "result": ["{\"data columns\": [\"flight number\"],\n    \"data filters\": [{\n    \"column\": \"airline\",\n    \"operator\": \"=\",\n    \"value\": \"United Airlines\"\n    },\n    {\n    \"column\": \"destination airport\",\n    \"operator\": \"=\",\n    \"value\": \"ASY\"\n    }]\n    }", "{\"data columns\": [\"airline id\"],\n    \"data filters\": [{\n    \"column\": \"airline\",\n    \"operator\": \"=\",\n    \"value\": \"United Airlines\"\n    }]\n    }"], "pred_intent": "{\"data columns\": [\"airline\"],\n    \"data filters\": [{\n    \"column\": \"airline id\",\n    \"operator\": \"=\",\n    \"value\": 1\n    },\n    {\n    \"column\": \"destination airport\",\n    \"operator\": \"=\",\n    \"value\": \"ASY\"\n    }]\n    }"}, {"previous_utterances": [], "utterance": "How many flights in this table?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[5, "eq", "ABR"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "number_predicates": 1}, "prior_select": [["airport name"], ["flight number"], ["city"], ["*"]], "prior_where_col": [[["eq", "airport code", "DYS"]], [["eq", "source airport", "APG"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"count(*)\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many flights in this table?"], "utterance": "Which city has least number of departing flights?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[5, "eq", "ABR"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "number_predicates": 1}, "prior_select": [["airport name"], ["flight number"], ["city"], ["*"]], "prior_where_col": [[["eq", "airport code", "DYS"]], [["eq", "source airport", "APG"]], [], []], "result": ["{\n    \"data columns\": [\"count(*)\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"city\", \"count(*)\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"!=\",\n        \"value\": \"NULL\"\n    }],\n    \"order by\": {\n        \"column\": \"count(*)\",\n        \"order\": \"asc\"\n    }\n}"}, {"previous_utterances": ["Which city has least number of departing flights?", "How many flights in this table?"], "utterance": "Find the flight number of APG?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[5, "eq", "ABR"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "number_predicates": 1}, "prior_select": [["airport name"], ["flight number"], ["city"], ["*"]], "prior_where_col": [[["eq", "airport code", "DYS"]], [["eq", "source airport", "APG"]], [], []], "result": ["{\n    \"data columns\": [\"count(*)\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"city\", \"count(*)\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"!=\",\n        \"value\": \"NULL\"\n    }],\n    \"order by\": {\n        \"column\": \"count(*)\",\n        \"order\": \"asc\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"APG\"\n    }]\n}"}, {"previous_utterances": ["Find the flight number of APG?", "Which city has least number of departing flights?", "How many flights in this table?"], "utterance": "Find the airport names of DYS?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[5, "eq", "ABR"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "number_predicates": 1}, "prior_select": [["airport name"], ["flight number"], ["city"], ["*"]], "prior_where_col": [[["eq", "airport code", "DYS"]], [["eq", "source airport", "APG"]], [], []], "result": ["{\n    \"data columns\": [\"count(*)\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"city\", \"count(*)\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"!=\",\n        \"value\": \"NULL\"\n    }],\n    \"order by\": {\n        \"column\": \"count(*)\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"APG\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [{\n        \"column\": \"airport code\",\n        \"operator\": \"=\",\n        \"value\": \"DYS\"\n    }]\n}"}, {"previous_utterances": ["Find the airport names of DYS?", "Find the flight number of APG?", "Which city has least number of departing flights?", "How many flights in this table?"], "utterance": "Fin the city of ABR?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[5, "eq", "ABR"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT CITY FROM airports WHERE AirportCode = \"ABR\"", "number_predicates": 1}, "prior_select": [["airport name"], ["flight number"], ["city"], ["*"]], "prior_where_col": [[["eq", "airport code", "DYS"]], [["eq", "source airport", "APG"]], [], []], "result": ["{\n    \"data columns\": [\"count(*)\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"city\", \"count(*)\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"!=\",\n        \"value\": \"NULL\"\n    }],\n    \"order by\": {\n        \"column\": \"count(*)\",\n        \"order\": \"asc\"\n    }\n}", "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [{\n        \"column\": \"source airport\",\n        \"operator\": \"=\",\n        \"value\": \"APG\"\n    }]\n}", "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [{\n        \"column\": \"airport code\",\n        \"operator\": \"=\",\n        \"value\": \"DYS\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [{\n        \"column\": \"airport code\",\n        \"operator\": \"=\",\n        \"value\": \"ABR\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many flights are arriving in the city called Aberdeen?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[4, "eq", "Aberdeen"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"", "number_predicates": 1}, "prior_select": [["*"]], "prior_where_col": [[["eq", "city", "Aberdeen"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [\n        {\n            \"column\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"Aberdeen\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many flights are arriving in the city called Aberdeen?"], "utterance": "How many flights are there departing Aberdeen?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[4, "eq", "Aberdeen"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   \"Aberdeen\"", "number_predicates": 1}, "prior_select": [["*"]], "prior_where_col": [[["eq", "city", "Aberdeen"]]], "result": ["{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [\n        {\n            \"column\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"Aberdeen\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"Aberdeen\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Howdy!  Can you show me a list of all flight numbers?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["flight number", "destination airport"], ["flight number"]], "prior_where_col": [[["eq", "city", "Aberdeen"], ["eq", "city", "Abilene"]], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Howdy!  Can you show me a list of all flight numbers?"], "utterance": "Excellent!  Can you update this list to include a column with the destination airport code for each of these?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["flight number", "destination airport"], ["flight number"]], "prior_where_col": [[["eq", "city", "Aberdeen"], ["eq", "city", "Abilene"]], [], []], "result": ["{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"flight number\", \"destination airport\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Excellent!  Can you update this list to include a column with the destination airport code for each of these?", "Howdy!  Can you show me a list of all flight numbers?"], "utterance": "Nice!  Can you tell the quantity of flights that had Aberdeen or Abilene as their destination cities?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["flight number", "destination airport"], ["flight number"]], "prior_where_col": [[["eq", "city", "Aberdeen"], ["eq", "city", "Abilene"]], [], []], "result": ["{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"flight number\", \"destination airport\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"destination airport\",\n      \"operator\": \"=\",\n      \"value\": \"Aberdeen\"\n    },\n    {\n      \"column\": \"destination airport\",\n      \"operator\": \"=\",\n      \"value\": \"Abilene\"\n    }\n  ]\n}"}, {"previous_utterances": ["Nice!  Can you tell the quantity of flights that had Aberdeen or Abilene as their destination cities?", "Excellent!  Can you update this list to include a column with the destination airport code for each of these?", "Howdy!  Can you show me a list of all flight numbers?"], "utterance": "Okay!  Can you tell me the airport city that has the most flights landing in it?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["flight number", "destination airport"], ["flight number"]], "prior_where_col": [[["eq", "city", "Aberdeen"], ["eq", "city", "Abilene"]], [], []], "result": ["{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"flight number\", \"destination airport\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [],\n  \"data filters\": [\n    {\n      \"column\": \"destination airport\",\n      \"operator\": \"=\",\n      \"value\": \"Aberdeen\"\n    },\n    {\n      \"column\": \"destination airport\",\n      \"operator\": \"=\",\n      \"value\": \"Abilene\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"city\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "how many flights does United Airlines operate in USA? | What do you mean by operate in USA? | how many flights does United Airlines have?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "United Airlines"], [11, "eq", "ASY"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "number_predicates": 2}, "prior_select": [["destination airport"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"flight number\"],\n\"data filters\": [\n{\n\"column\": \"airline\",\n\"operator\": \"=\",\n\"value\": \"United Airlines\"\n},\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"USA\"\n}\n]\n}"}, {"previous_utterances": ["how many flights does United Airlines operate in USA? | What do you mean by operate in USA? | how many flights does United Airlines have?"], "utterance": "and how many destination airports do these flights have?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "United Airlines"], [11, "eq", "ASY"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "number_predicates": 2}, "prior_select": [["destination airport"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": ["{\n\"data columns\": [\"flight number\"],\n\"data filters\": [\n{\n\"column\": \"airline\",\n\"operator\": \"=\",\n\"value\": \"United Airlines\"\n},\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"USA\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"destination airport\"],\n\"data filters\": [\n{\n\"column\": \"airline\",\n\"operator\": \"=\",\n\"value\": \"United Airlines\"\n},\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"USA\"\n}\n]\n}"}, {"previous_utterances": ["and how many destination airports do these flights have?", "how many flights does United Airlines operate in USA? | What do you mean by operate in USA? | how many flights does United Airlines have?"], "utterance": "how many of those flights go to airport \"ASY\"?", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "United Airlines"], [11, "eq", "ASY"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   \"United Airlines\" AND T2.DestAirport   =   \"ASY\"", "number_predicates": 2}, "prior_select": [["destination airport"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": ["{\n\"data columns\": [\"flight number\"],\n\"data filters\": [\n{\n\"column\": \"airline\",\n\"operator\": \"=\",\n\"value\": \"United Airlines\"\n},\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"USA\"\n}\n]\n}", "{\n\"data columns\": [\"destination airport\"],\n\"data filters\": [\n{\n\"column\": \"airline\",\n\"operator\": \"=\",\n\"value\": \"United Airlines\"\n},\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"USA\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"flight number\"],\n\"data filters\": [\n{\n\"column\": \"airline\",\n\"operator\": \"=\",\n\"value\": \"United Airlines\"\n},\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"USA\"\n},\n{\n\"column\": \"destination airport\",\n\"operator\": \"=\",\n\"value\": \"ASY\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "How many airports are there?", "select_target": [12, 12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\"", "number_predicates": 0}, "prior_select": [["*"], ["source airport"], ["*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many airports are there?"], "utterance": "How many have departing flights?", "select_target": [12, 12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\"", "number_predicates": 0}, "prior_select": [["*"], ["source airport"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many have departing flights?", "How many airports are there?"], "utterance": "How many will arrive in ASY?", "select_target": [12, 12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\"", "number_predicates": 0}, "prior_select": [["*"], ["source airport"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"ASY\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many will arrive in ASY?", "How many have departing flights?", "How many airports are there?"], "utterance": "Of those flights, how many come from APG and ABR?", "select_target": [12, 12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%APG%\" UNION SELECT count ( * )  from flights where destairport like \"%ASY%\" and sourceairport like \"%ABR%\"", "number_predicates": 0}, "prior_select": [["*"], ["source airport"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"ASY\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"destination airport\",\n            \"operator\": \"=\",\n            \"value\": \"ASY\"\n        },\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"APG\"\n        },\n        {\n            \"column\": \"source airport\",\n            \"operator\": \"=\",\n            \"value\": \"ABR\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Can you show the SourceAirport FlightNo 28?", "select_target": [6], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ", "number_predicates": 0}, "prior_select": [["city"], ["source airport"]], "prior_where_col": [[["eq", "airport code", "APG"]], [["eq", "flight number", "28"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"source airport\", \"flight number\"],\n    \"data filters\": [\n        {\n            \"column\": \"flight number\",\n            \"operator\": \"=\",\n            \"value\": \"28\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you show the SourceAirport FlightNo 28?"], "utterance": "Can you show the City of Airportcode APG?", "select_target": [6], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ", "number_predicates": 0}, "prior_select": [["city"], ["source airport"]], "prior_where_col": [[["eq", "airport code", "APG"]], [["eq", "flight number", "28"]]], "result": ["{\n    \"data columns\": [\"source airport\", \"flight number\"],\n    \"data filters\": [\n        {\n            \"column\": \"flight number\",\n            \"operator\": \"=\",\n            \"value\": \"28\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"airport code\",\n            \"operator\": \"=\",\n            \"value\": \"APG\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you show the City of Airportcode APG?", "Can you show the SourceAirport FlightNo 28?"], "utterance": "Can Show the names of airports which do not have any flight in and out?", "select_target": [6], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ", "number_predicates": 0}, "prior_select": [["city"], ["source airport"]], "prior_where_col": [[["eq", "airport code", "APG"]], [["eq", "flight number", "28"]]], "result": ["{\n    \"data columns\": [\"source airport\", \"flight number\"],\n    \"data filters\": [\n        {\n            \"column\": \"flight number\",\n            \"operator\": \"=\",\n            \"value\": \"28\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"airport code\",\n            \"operator\": \"=\",\n            \"value\": \"APG\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": [\n        {\n            \"column\": \"flight number\",\n            \"operator\": \"=\",\n            \"value\": \"\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "hi, list out all airport name", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT COUNT ( DISTINCT country )  FROM airports", "number_predicates": 0}, "prior_select": [["flight number"], ["airport name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["hi, list out all airport name"], "utterance": "show me the total no of flight number", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT COUNT ( DISTINCT country )  FROM airports", "number_predicates": 0}, "prior_select": [["flight number"], ["airport name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["show me the total no of flight number", "hi, list out all airport name"], "utterance": "how many country name are there", "select_target": [3], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT COUNT ( DISTINCT country )  FROM airports", "number_predicates": 0}, "prior_select": [["flight number"], ["airport name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"airport name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many United Airlines flights go to the city called Aberdeen?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[4, "neq", "Aberdeen"], [1, "eq", "United Airlines"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline where T2.city !=   'Aberdeen' and T3.airline  =  \"United Airlines\"", "number_predicates": 2}, "prior_select": [["*"]], "prior_where_col": [[["eq", "city", "Aberdeen"], ["eq", "airline name", "United Airlines"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [\n    {\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"United Airlines\"\n    },\n    {\n        \"column\": \"city\",\n        \"operator\": \"=\",\n        \"value\": \"Aberdeen\"\n    }]\n}"}, {"previous_utterances": ["How many United Airlines flights go to the city called Aberdeen?"], "utterance": "What other cities does United Airlines go to?", "select_target": [4], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[4, "neq", "Aberdeen"], [1, "eq", "United Airlines"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline where T2.city !=   'Aberdeen' and T3.airline  =  \"United Airlines\"", "number_predicates": 2}, "prior_select": [["*"]], "prior_where_col": [[["eq", "city", "Aberdeen"], ["eq", "airline name", "United Airlines"]]], "result": ["{\n    \"data columns\": [\"flight number\"],\n    \"data filters\": [\n    {\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"United Airlines\"\n    },\n    {\n        \"column\": \"city\",\n        \"operator\": \"=\",\n        \"value\": \"Aberdeen\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n    {\n        \"column\": \"airline\",\n        \"operator\": \"=\",\n        \"value\": \"United Airlines\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what is the source airport for United Airlines?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[9, "eq", 29]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DestAirport FROM flights WHERE FlightNo  =  29", "number_predicates": 1}, "prior_select": [["destination airport"], ["flight number"], ["source airport"]], "prior_where_col": [[["eq", "flight number", 28]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"source airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}"}, {"previous_utterances": ["what is the source airport for United Airlines?"], "utterance": "What are the flight numbers for United Airlines?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[9, "eq", 29]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DestAirport FROM flights WHERE FlightNo  =  29", "number_predicates": 1}, "prior_select": [["destination airport"], ["flight number"], ["source airport"]], "prior_where_col": [[["eq", "flight number", 28]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": ["{\n  \"data columns\": [\"source airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}"}, {"previous_utterances": ["What are the flight numbers for United Airlines?", "what is the source airport for United Airlines?"], "utterance": "Where is flight 28 going to?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[9, "eq", 29]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DestAirport FROM flights WHERE FlightNo  =  29", "number_predicates": 1}, "prior_select": [["destination airport"], ["flight number"], ["source airport"]], "prior_where_col": [[["eq", "flight number", 28]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": ["{\n  \"data columns\": [\"source airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"destination airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"flight number\",\n      \"operator\": \"=\",\n      \"value\": \"28\"\n    }\n  ]\n}"}, {"previous_utterances": ["Where is flight 28 going to?", "What are the flight numbers for United Airlines?", "what is the source airport for United Airlines?"], "utterance": "What about flight 29?", "select_target": [11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[9, "eq", 29]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT DestAirport FROM flights WHERE FlightNo  =  29", "number_predicates": 1}, "prior_select": [["destination airport"], ["flight number"], ["source airport"]], "prior_where_col": [[["eq", "flight number", 28]], [["eq", "airline name", "United Airlines"]], [["eq", "airline name", "United Airlines"]]], "result": ["{\n  \"data columns\": [\"source airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"flight number\"],\n  \"data filters\": [\n    {\n      \"column\": \"airline\",\n      \"operator\": \"=\",\n      \"value\": \"United Airlines\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"destination airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"flight number\",\n      \"operator\": \"=\",\n      \"value\": \"28\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"destination airport\"],\n  \"data filters\": [\n    {\n      \"column\": \"flight number\",\n      \"operator\": \"=\",\n      \"value\": \"29\"\n    }\n  ]\n}"}, {"previous_utterances": [""], "utterance": "how many flights are landing in the city of aberdeen or abilene", "select_target": [12], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  \"%Aberdeen%\" OR T2.city  like  \"%Abilene%\"", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n  \"data columns\": [\"city\"],\n  \"data filters\": [\n    {\n      \"column\": \"city\",\n      \"operator\": \"=\",\n      \"value\": \"aberdeen\"\n    },\n    {\n      \"column\": \"city\",\n      \"operator\": \"=\",\n      \"value\": \"abilene\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "Find all airlines that have fewer than 200 flights.", "select_target": [1, 11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3", "number_predicates": 0}, "prior_select": [["airline name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": [{\n        \"column\": \"flight number\",\n        \"operator\": \"<\",\n        \"value\": \"200\"\n    }]\n}"}, {"previous_utterances": ["Find all airlines that have fewer than 200 flights."], "utterance": "what country is their destination of the first three?", "select_target": [1, 11], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3", "number_predicates": 0}, "prior_select": [["airline name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"airline name\", \"flight number\"],\n    \"data filters\": [{\n        \"column\": \"flight number\",\n        \"operator\": \"<\",\n        \"value\": \"200\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"destination airport\", \"country\"],\n    \"data filters\": [{\n        \"column\": \"airline name\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }],\n    \"limit\": 3,\n    \"order_by\": \"flight number\"\n}"}, {"previous_utterances": [], "utterance": "delta airline is from which country?", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["destination airport"], ["country"]], "prior_where_col": [[["eq", "flight number", 44]], [["eq", "airline name", "Delta Airlines"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"delta airline\"\n        }\n    ]\n}"}, {"previous_utterances": ["delta airline is from which country?"], "utterance": "what is the destination airport of flight no 44?", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["destination airport"], ["country"]], "prior_where_col": [[["eq", "flight number", 44]], [["eq", "airline name", "Delta Airlines"]]], "result": ["{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"delta airline\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"flight number\",\n            \"operator\": \"=\",\n            \"value\": \"44\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the destination airport of flight no 44?", "delta airline is from which country?"], "utterance": "which airline has most number of flights?", "select_target": [1], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["destination airport"], ["country"]], "prior_where_col": [[["eq", "flight number", 44]], [["eq", "airline name", "Delta Airlines"]]], "result": ["{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"delta airline\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"destination airport\"],\n    \"data filters\": [\n        {\n            \"column\": \"flight number\",\n            \"operator\": \"=\",\n            \"value\": \"44\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"airline name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "how many airline's there", "select_target": [2], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "US Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\"", "number_predicates": 1}, "prior_select": [["airline name"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"airline name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many airline's there"], "utterance": "what is the name of the usa airline | What did you mean by \"the name of the USA airline?\" | united sates of america", "select_target": [2], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "US Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\"", "number_predicates": 1}, "prior_select": [["airline name"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], []], "result": ["{\n    \"data columns\": [\"airline name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"airline name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the name of the usa airline | What did you mean by \"the name of the USA airline?\" | united sates of america", "how many airline's there"], "utterance": "what is the abbreviation of us airways", "select_target": [2], "column_names": ["airline id", "airline name", "abbreviation", "country", "city", "airport code", "airport name", "country abbrev", "airline", "flight number", "source airport", "destination airport", "*"], "where_clauses": [[1, "eq", "US Airways"]], "debug_info": {"where_categorization": -1, "db_id": "flight_2", "raw_sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline = \"US Airways\"", "number_predicates": 1}, "prior_select": [["airline name"], ["*"]], "prior_where_col": [[["eq", "airline name", "United Airlines"]], []], "result": ["{\n    \"data columns\": [\"airline name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"airline name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"abbreviation\"],\n    \"data filters\": [\n        {\n            \"column\": \"airline name\",\n            \"operator\": \"=\",\n            \"value\": \"US Airways\"\n        }\n    ]\n}"}]