[{"previous_utterances": [], "utterance": "What are all the area codes?", "select_target": [0, 0], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "number_predicates": 0}, "prior_select": [["area code"], ["area code"], ["area code"]], "prior_where_col": [[["eq", "contestant name", "Kelly Clauss"]], [["eq", "contestant name", "Tabatha Gehling"]], []], "result": [], "pred_intent": "{\n\"data columns\": [\"area code\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["What are all the area codes?"], "utterance": "What area codes voted for the contestant 'Tabatha Gehling'?", "select_target": [0, 0], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "number_predicates": 0}, "prior_select": [["area code"], ["area code"], ["area code"]], "prior_where_col": [[["eq", "contestant name", "Kelly Clauss"]], [["eq", "contestant name", "Tabatha Gehling"]], []], "result": ["{\n\"data columns\": [\"area code\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"area code\"],\n\"data filters\": [\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Tabatha Gehling\"\n    }\n]\n}"}, {"previous_utterances": ["What area codes voted for the contestant 'Tabatha Gehling'?", "What are all the area codes?"], "utterance": "What area codes voted for the contestant 'Kelly Clauss'?", "select_target": [0, 0], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "number_predicates": 0}, "prior_select": [["area code"], ["area code"], ["area code"]], "prior_where_col": [[["eq", "contestant name", "Kelly Clauss"]], [["eq", "contestant name", "Tabatha Gehling"]], []], "result": ["{\n\"data columns\": [\"area code\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"area code\"],\n\"data filters\": [\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Tabatha Gehling\"\n    }\n]\n}"], "pred_intent": "{\n\"data columns\": [\"area code\"],\n\"data filters\": [\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Kelly Clauss\"\n    }\n]\n}"}, {"previous_utterances": ["What area codes voted for the contestant 'Kelly Clauss'?", "What area codes voted for the contestant 'Tabatha Gehling'?", "What are all the area codes?"], "utterance": "What area codes voted for both the contestant 'Kelly Clauss' and 'Tabatha Gehling'?", "select_target": [0, 0], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "number_predicates": 0}, "prior_select": [["area code"], ["area code"], ["area code"]], "prior_where_col": [[["eq", "contestant name", "Kelly Clauss"]], [["eq", "contestant name", "Tabatha Gehling"]], []], "result": ["{\n\"data columns\": [\"area code\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"area code\"],\n\"data filters\": [\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Tabatha Gehling\"\n    }\n]\n}", "{\n\"data columns\": [\"area code\"],\n\"data filters\": [\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Kelly Clauss\"\n    }\n]\n}"], "pred_intent": "{\n\"data columns\": [\"area code\"],\n\"data filters\": [\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Kelly Clauss\"\n    },\n    {\n        \"column\": \"contestant name\",\n        \"operator\": \"=\",\n        \"value\": \"Tabatha Gehling\"\n    }\n]\n}"}, {"previous_utterances": [], "utterance": "Can you tell me what the total number of votes are for the states of \"NY\" and \"CA\"?", "select_target": [7], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", "5"]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT count ( * )  from votes where contestant_number  =  '5'", "number_predicates": 1}, "prior_select": [["contestant number"], ["*"]], "prior_where_col": [[], [["eq", "state", "NY"], ["eq", "state", "CA"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"state\", \"vote id\"],\n    \"data filters\": [\n        {\n            \"column\": \"state\",\n            \"operator\": \"=\",\n            \"value\": \"NY\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"=\",\n            \"value\": \"CA\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you tell me what the total number of votes are for the states of \"NY\" and \"CA\"?"], "utterance": "Thank you!  Can you provide me with a list of all of the different contestant numbers?", "select_target": [7], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", "5"]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT count ( * )  from votes where contestant_number  =  '5'", "number_predicates": 1}, "prior_select": [["contestant number"], ["*"]], "prior_where_col": [[], [["eq", "state", "NY"], ["eq", "state", "CA"]]], "result": ["{\n    \"data columns\": [\"state\", \"vote id\"],\n    \"data filters\": [\n        {\n            \"column\": \"state\",\n            \"operator\": \"=\",\n            \"value\": \"NY\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"=\",\n            \"value\": \"CA\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"contestant number\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Thank you!  Can you provide me with a list of all of the different contestant numbers?", "Can you tell me what the total number of votes are for the states of \"NY\" and \"CA\"?"], "utterance": "Okay.  How many vote IDs correspond to contestant number 5?", "select_target": [7], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", "5"]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT count ( * )  from votes where contestant_number  =  '5'", "number_predicates": 1}, "prior_select": [["contestant number"], ["*"]], "prior_where_col": [[], [["eq", "state", "NY"], ["eq", "state", "CA"]]], "result": ["{\n    \"data columns\": [\"state\", \"vote id\"],\n    \"data filters\": [\n        {\n            \"column\": \"state\",\n            \"operator\": \"=\",\n            \"value\": \"NY\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"=\",\n            \"value\": \"CA\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"contestant number\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"contestant number\", \"vote id\"],\n    \"data filters\": [\n        {\n            \"column\": \"contestant number\",\n            \"operator\": \"=\",\n            \"value\": \"5\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "who all are the contest | Did you mean  to ask for the names of all contestants? | yes.", "select_target": [3], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2", "number_predicates": 1}, "prior_select": [["contestant name"], ["contestant name"], ["contestant name"]], "prior_where_col": [[["eq", "contestant number", 1]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["who all are the contest | Did you mean  to ask for the names of all contestants? | yes."], "utterance": "can you send the total contestant number?", "select_target": [3], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2", "number_predicates": 1}, "prior_select": [["contestant name"], ["contestant name"], ["contestant name"]], "prior_where_col": [[["eq", "contestant number", 1]], [], []], "result": ["{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"contestant number\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["can you send the total contestant number?", "who all are the contest | Did you mean  to ask for the names of all contestants? | yes."], "utterance": "who is the first contestant? | Did you mean to ask for the name of the contestant with contestant number 1? | yes can tell me?", "select_target": [3], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2", "number_predicates": 1}, "prior_select": [["contestant name"], ["contestant name"], ["contestant name"]], "prior_where_col": [[["eq", "contestant number", 1]], [], []], "result": ["{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"contestant number\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": [{\n        \"column\": \"contestant number\",\n        \"operator\": \"=\",\n        \"value\": 1\n    }]\n}"}, {"previous_utterances": ["who is the first contestant? | Did you mean to ask for the name of the contestant with contestant number 1? | yes can tell me?", "can you send the total contestant number?", "who all are the contest | Did you mean  to ask for the names of all contestants? | yes."], "utterance": "who is the 2 contestant?", "select_target": [3], "column_names": ["area code", "state", "contestant number", "contestant name", "vote id", "phone number", "created", "*"], "where_clauses": [[2, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "voter_1", "raw_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2", "number_predicates": 1}, "prior_select": [["contestant name"], ["contestant name"], ["contestant name"]], "prior_where_col": [[["eq", "contestant number", 1]], [], []], "result": ["{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"contestant number\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": [{\n        \"column\": \"contestant number\",\n        \"operator\": \"=\",\n        \"value\": 1\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"contestant name\"],\n    \"data filters\": [{\n        \"column\": \"contestant number\",\n        \"operator\": \"=\",\n        \"value\": 2\n    }]\n}"}, {"previous_utterances": [], "utterance": "what are the official unique official language spoken in the country | In which country? | what are the unique official languages spoken that are found before 1930", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[10, "lt", 1930], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"", "number_predicates": 2}, "prior_select": [["language"]], "prior_where_col": [[["lt", "indepdent year", 1930], ["eq", "is official", "T"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [{\n        \"column\": \"is official\",\n        \"operator\": \"=\",\n        \"value\": \"True\"\n    }]\n}"}, {"previous_utterances": ["what are the official unique official language spoken in the country | In which country? | what are the unique official languages spoken that are found before 1930"], "utterance": "what is the total number of unique official languages spoken in the countries that are founded before 1930", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[10, "lt", 1930], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   \"T\"", "number_predicates": 2}, "prior_select": [["language"]], "prior_where_col": [[["lt", "indepdent year", 1930], ["eq", "is official", "T"]]], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": [{\n        \"column\": \"is official\",\n        \"operator\": \"=\",\n        \"value\": \"True\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n    {\n        \"column\": \"is official\",\n        \"operator\": \"=\",\n        \"value\": \"True\"\n    },\n    {\n        \"column\": \"indepdent year\",\n        \"operator\": \"<\",\n        \"value\": \"1930\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hi, what is the population of the Caribbean?", "select_target": [4, 11, 7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "number_predicates": 0}, "prior_select": [["life expectancy", "continent"], ["population", "continent"], ["continent"], ["population"]], "prior_where_col": [[], [], [], [["eq", "region", "Caribbean"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Caribbean\"\n    }\n  ]\n}"}, {"previous_utterances": ["Hi, what is the population of the Caribbean?"], "utterance": "What continents have an average life expectancy shorter than 72?", "select_target": [4, 11, 7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "number_predicates": 0}, "prior_select": [["life expectancy", "continent"], ["population", "continent"], ["continent"], ["population"]], "prior_where_col": [[], [], [], [["eq", "region", "Caribbean"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Caribbean\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"continent\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"}, {"previous_utterances": ["What continents have an average life expectancy shorter than 72?", "Hi, what is the population of the Caribbean?"], "utterance": "Can you give me the total population for each of those continents?", "select_target": [4, 11, 7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "number_predicates": 0}, "prior_select": [["life expectancy", "continent"], ["population", "continent"], ["continent"], ["population"]], "prior_where_col": [[], [], [], [["eq", "region", "Caribbean"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Caribbean\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"continent\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"continent\", \"SUM(population)\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"}, {"previous_utterances": ["Can you give me the total population for each of those continents?", "What continents have an average life expectancy shorter than 72?", "Hi, what is the population of the Caribbean?"], "utterance": "What is the average life expectancy of those continents?", "select_target": [4, 11, 7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "number_predicates": 0}, "prior_select": [["life expectancy", "continent"], ["population", "continent"], ["continent"], ["population"]], "prior_where_col": [[], [], [], [["eq", "region", "Caribbean"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Caribbean\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"continent\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}", "{\n  \"data columns\": [\"continent\", \"SUM(population)\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"continent\", \"AVG(life expectancy)\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"}, {"previous_utterances": ["What is the average life expectancy of those continents?", "Can you give me the total population for each of those continents?", "What continents have an average life expectancy shorter than 72?", "Hi, what is the population of the Caribbean?"], "utterance": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "select_target": [4, 11, 7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72", "number_predicates": 0}, "prior_select": [["life expectancy", "continent"], ["population", "continent"], ["continent"], ["population"]], "prior_where_col": [[], [], [], [["eq", "region", "Caribbean"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Caribbean\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"continent\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}", "{\n  \"data columns\": [\"continent\", \"SUM(population)\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}", "{\n  \"data columns\": [\"continent\", \"AVG(life expectancy)\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"continent\", \"AVG(life expectancy)\", \"SUM(population)\"],\n  \"data filters\": [\n    {\n      \"column\": \"life expectancy\",\n      \"operator\": \"<\",\n      \"value\": 72\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "how many country there", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[6, "eq", "AFG"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select SurfaceArea from Country where Code  =  'AFG'", "number_predicates": 1}, "prior_select": [["language"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many country there"], "utterance": "how many country languages there", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[6, "eq", "AFG"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select SurfaceArea from Country where Code  =  'AFG'", "number_predicates": 1}, "prior_select": [["language"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many country languages there", "how many country there"], "utterance": "what is the surface area of code AFG", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[6, "eq", "AFG"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select SurfaceArea from Country where Code  =  'AFG'", "number_predicates": 1}, "prior_select": [["language"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"*\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"surface area\"],\n    \"data filters\": [{\n        \"column\": \"code\",\n        \"operator\": \"=\",\n        \"value\": \"AFG\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "how many country code in the city table | Do  you  want  to  know  the distinct country code? | how many language in the countrylanguage table", "select_target": [22], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT max ( Percentage )  from countrylanguage", "number_predicates": 0}, "prior_select": [["language"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n  \"data columns\": [\"country code\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["how many country code in the city table | Do  you  want  to  know  the distinct country code? | how many language in the countrylanguage table"], "utterance": "what the highest percentage in the countrylanguage table", "select_target": [22], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT max ( Percentage )  from countrylanguage", "number_predicates": 0}, "prior_select": [["language"]], "prior_where_col": [[]], "result": ["{\n  \"data columns\": [\"country code\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"percentage\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which unique cities are in Asian countries?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\"", "number_predicates": 1}, "prior_select": [["population"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "China"]], [["gt", "population", 200000]], [["eq", "continent", "Asia"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"country code\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}"}, {"previous_utterances": ["Which unique cities are in Asian countries?"], "utterance": "Which of those cities have a population over 200,000?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\"", "number_predicates": 1}, "prior_select": [["population"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "China"]], [["gt", "population", 200000]], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"name\", \"country code\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"country code\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    },\n    {\n        \"column\": \"population\",\n        \"operator\": \">\",\n        \"value\": \"200000\"\n    }]\n}"}, {"previous_utterances": ["Which of those cities have a population over 200,000?", "Which unique cities are in Asian countries?"], "utterance": "What is the average population of all cities in China?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\"", "number_predicates": 1}, "prior_select": [["population"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "China"]], [["gt", "population", 200000]], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"name\", \"country code\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}", "{\n    \"data columns\": [\"name\", \"country code\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    },\n    {\n        \"column\": \"population\",\n        \"operator\": \">\",\n        \"value\": \"200000\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"population\", \"country code\"],\n    \"data filters\": [{\n        \"column\": \"country code\",\n        \"operator\": \"=\",\n        \"value\": \"CHN\"\n    }]\n}"}, {"previous_utterances": ["What is the average population of all cities in China?", "Which of those cities have a population over 200,000?", "Which unique cities are in Asian countries?"], "utterance": "What is the average population of all cities that speak the Dutch language?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  \"Dutch\"", "number_predicates": 1}, "prior_select": [["population"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "China"]], [["gt", "population", 200000]], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"name\", \"country code\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}", "{\n    \"data columns\": [\"name\", \"country code\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    },\n    {\n        \"column\": \"population\",\n        \"operator\": \">\",\n        \"value\": \"200000\"\n    }]\n}", "{\n    \"data columns\": [\"population\", \"country code\"],\n    \"data filters\": [{\n        \"column\": \"country code\",\n        \"operator\": \"=\",\n        \"value\": \"CHN\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"population\", \"language\"],\n    \"data filters\": [{\n        \"column\": \"language\",\n        \"operator\": \"=\",\n        \"value\": \"Dutch\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What African country has the largest population?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "number_predicates": 2}, "prior_select": [["name"], ["population"], ["name"], ["population"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "name", "China"]], [["eq", "continent", "Asia"]], [["eq", "name", "Nigeria"]], [["eq", "continent", "Africa"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}"}, {"previous_utterances": ["What African country has the largest population?"], "utterance": "And what is the population of Nigeria?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "number_predicates": 2}, "prior_select": [["name"], ["population"], ["name"], ["population"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "name", "China"]], [["eq", "continent", "Asia"]], [["eq", "name", "Nigeria"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}"], "pred_intent": "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Nigeria\"\n}]\n}"}, {"previous_utterances": ["And what is the population of Nigeria?", "What African country has the largest population?"], "utterance": "What Asian country has the largest population?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "number_predicates": 2}, "prior_select": [["name"], ["population"], ["name"], ["population"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "name", "China"]], [["eq", "continent", "Asia"]], [["eq", "name", "Nigeria"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Nigeria\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}"}, {"previous_utterances": ["What Asian country has the largest population?", "And what is the population of Nigeria?", "What African country has the largest population?"], "utterance": "What is China's population?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "number_predicates": 2}, "prior_select": [["name"], ["population"], ["name"], ["population"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "name", "China"]], [["eq", "continent", "Asia"]], [["eq", "name", "Nigeria"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Nigeria\"\n}]\n}", "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}"], "pred_intent": "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"China\"\n}]\n}"}, {"previous_utterances": ["What is China's population?", "What Asian country has the largest population?", "And what is the population of Nigeria?", "What African country has the largest population?"], "utterance": "How many Asian countries have a population greater than that of Nigeria?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "number_predicates": 2}, "prior_select": [["name"], ["population"], ["name"], ["population"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "name", "China"]], [["eq", "continent", "Asia"]], [["eq", "name", "Nigeria"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Nigeria\"\n}]\n}", "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"China\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"Nigeria\"\n}]\n}"}, {"previous_utterances": ["How many Asian countries have a population greater than that of Nigeria?", "What is China's population?", "What Asian country has the largest population?", "And what is the population of Nigeria?", "What African country has the largest population?"], "utterance": "Can you list those countries?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent   =   \"Asia\"  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ", "number_predicates": 2}, "prior_select": [["name"], ["population"], ["name"], ["population"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "name", "China"]], [["eq", "continent", "Asia"]], [["eq", "name", "Nigeria"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Nigeria\"\n}]\n}", "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}],\n\"sort\": {\n\"column\": \"population\",\n\"order\": \"desc\"\n},\n\"limit\": 1\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"China\"\n}]\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"Nigeria\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"Nigeria\"\n}]\n}"}, {"previous_utterances": [], "utterance": "Which African countries have a smaller population than that of any Asian country?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["name"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["lt", "population", "population"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"population\", \"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM dataset WHERE continent = 'Asia')\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which African countries have a smaller population than that of any Asian country?"], "utterance": "Which Asian countries have a smaller population than that of any African country?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["name"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["lt", "population", "population"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": ["{\n    \"data columns\": [\"name\", \"population\", \"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM dataset WHERE continent = 'Asia')\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"population\", \"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM dataset WHERE continent = 'Africa')\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which Asian countries have a smaller population than that of any African country?", "Which African countries have a smaller population than that of any Asian country?"], "utterance": "Which Asian country has the highest life expectancy?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["name"], ["name"]], "prior_where_col": [[["eq", "continent", "Asia"], ["lt", "population", "population"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": ["{\n    \"data columns\": [\"name\", \"population\", \"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM dataset WHERE continent = 'Asia')\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"population\", \"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM dataset WHERE continent = 'Africa')\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"life expectancy\", \"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Can you please list all the names of the countries that are in the continent of Europe?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Europe"], [4, "eq", "80000"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE continent   =   \"Europe\" AND Population   =   \"80000\"", "number_predicates": 2}, "prior_select": [["name"]], "prior_where_col": [[["eq", "continent", "Europe"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you please list all the names of the countries that are in the continent of Europe?"], "utterance": "Can you please only show those countries with a population of 80000 in the table?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Europe"], [4, "eq", "80000"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name FROM country WHERE continent   =   \"Europe\" AND Population   =   \"80000\"", "number_predicates": 2}, "prior_select": [["name"]], "prior_where_col": [[["eq", "continent", "Europe"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"=\",\n            \"value\": 80000\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are all of the countries where English isn't the official language?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "English"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\"", "number_predicates": 2}, "prior_select": [["life expectancy"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"language\",\n\"operator\": \"!=\",\n\"value\": \"English\"\n}]\n}"}, {"previous_utterances": ["What are all of the countries where English isn't the official language?"], "utterance": "What is the average life expectancy in each of those countries?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "English"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\"", "number_predicates": 2}, "prior_select": [["life expectancy"], ["name"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"language\",\n\"operator\": \"!=\",\n\"value\": \"English\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"life expectancy\"],\n\"data filters\": [{\n\"column\": \"language\",\n\"operator\": \"!=\",\n\"value\": \"English\"\n}]\n}"}, {"previous_utterances": ["What is the average life expectancy in each of those countries?", "What are all of the countries where English isn't the official language?"], "utterance": "* I have left the chat *", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "English"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" AND T2.IsOfficial   =   \"T\"", "number_predicates": 2}, "prior_select": [["life expectancy"], ["name"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"language\",\n\"operator\": \"!=\",\n\"value\": \"English\"\n}]\n}", "{\n\"data columns\": [\"name\", \"life expectancy\"],\n\"data filters\": [{\n\"column\": \"language\",\n\"operator\": \"!=\",\n\"value\": \"English\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"life expectancy\"],\n\"data filters\": [{\n\"column\": \"language\",\n\"operator\": \"!=\",\n\"value\": \"English\"\n}]\n}"}, {"previous_utterances": [], "utterance": "How many government forms are in the table?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["life expectancy"], ["population", "government form"], ["government form"], ["government form"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many government forms are in the table?"], "utterance": "How many of those have an average life expectancy that is longer than 72?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["life expectancy"], ["population", "government form"], ["government form"], ["government form"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"}, {"previous_utterances": ["How many of those have an average life expectancy that is longer than 72?", "How many government forms are in the table?"], "utterance": "What is the population of each of those government forms?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["life expectancy"], ["population", "government form"], ["government form"], ["government form"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"}, {"previous_utterances": ["What is the population of each of those government forms?", "How many of those have an average life expectancy that is longer than 72?", "How many government forms are in the table?"], "utterance": "What is the life expectancy for each of these?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["life expectancy"], ["population", "government form"], ["government form"], ["government form"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}", "{\n    \"data columns\": [\"government form\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"}, {"previous_utterances": ["What is the life expectancy for each of these?", "What is the population of each of those government forms?", "How many of those have an average life expectancy that is longer than 72?", "How many government forms are in the table?"], "utterance": "Which government forms and their populations are those for? | Sorry, I cannot understand this question. Can you elaborate? | Which government forms have an average life expectancy over 72, and what are their populations?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["life expectancy"], ["population", "government form"], ["government form"], ["government form"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}", "{\n    \"data columns\": [\"government form\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}", "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"life expectancy\",\n        \"operator\": \">\",\n        \"value\": \"72\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "can you show countries name?", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT SurfaceArea FROM country", "number_predicates": 0}, "prior_select": [["government form"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["can you show countries name?"], "utterance": "what is the countries government form?", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT SurfaceArea FROM country", "number_predicates": 0}, "prior_select": [["government form"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the countries government form?", "can you show countries name?"], "utterance": "can you show me the countries' surface area?", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT SurfaceArea FROM country", "number_predicates": 0}, "prior_select": [["government form"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"government form\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"surface area\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which country has the largest area? | Russian Federation is the name of the country with the largest area. | And what is the population of this country?", "select_target": [7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["head of state"], ["population"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Russian Federation\"\n    }]\n}"}, {"previous_utterances": ["Which country has the largest area? | Russian Federation is the name of the country with the largest area. | And what is the population of this country?"], "utterance": "Who is it's leader?", "select_target": [7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["head of state"], ["population"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Russian Federation\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"head of state\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Russian Federation\"\n    }]\n}"}, {"previous_utterances": ["Who is it's leader?", "Which country has the largest area? | Russian Federation is the name of the country with the largest area. | And what is the population of this country?"], "utterance": "Yes, on which continent is this country located?", "select_target": [7], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["head of state"], ["population"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Russian Federation\"\n    }]\n}", "{\n    \"data columns\": [\"head of state\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Russian Federation\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"continent\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Russian Federation\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What is the population in Asian continent?", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "number_predicates": 1}, "prior_select": [["gnp"], ["life expectancy"], ["language"], ["population"]], "prior_where_col": [[["eq", "local name", "Angola"]], [["eq", "local name", "Angola"]], [["eq", "percentage", 9.5]], [["eq", "continent", "Asia"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"Asia\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the population in Asian continent?"], "utterance": "Which language has 9.5%?", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "number_predicates": 1}, "prior_select": [["gnp"], ["life expectancy"], ["language"], ["population"]], "prior_where_col": [[["eq", "local name", "Angola"]], [["eq", "local name", "Angola"]], [["eq", "percentage", 9.5]], [["eq", "continent", "Asia"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"Asia\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"language\"],\n  \"data filters\": [\n    {\n      \"column\": \"percentage\",\n      \"operator\": \"=\",\n      \"value\": \"9.5\"\n    }\n  ]\n}"}, {"previous_utterances": ["Which language has 9.5%?", "What is the population in Asian continent?"], "utterance": "What is the life expectancy rate in Angola?", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "number_predicates": 1}, "prior_select": [["gnp"], ["life expectancy"], ["language"], ["population"]], "prior_where_col": [[["eq", "local name", "Angola"]], [["eq", "local name", "Angola"]], [["eq", "percentage", 9.5]], [["eq", "continent", "Asia"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"Asia\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"language\"],\n  \"data filters\": [\n    {\n      \"column\": \"percentage\",\n      \"operator\": \"=\",\n      \"value\": \"9.5\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"life expectancy\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Angola\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the life expectancy rate in Angola?", "Which language has 9.5%?", "What is the population in Asian continent?"], "utterance": "What is the GNP rate of Aruba? | did you mean the GNP or GNP old? | GNP", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "number_predicates": 1}, "prior_select": [["gnp"], ["life expectancy"], ["language"], ["population"]], "prior_where_col": [[["eq", "local name", "Angola"]], [["eq", "local name", "Angola"]], [["eq", "percentage", 9.5]], [["eq", "continent", "Asia"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"Asia\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"language\"],\n  \"data filters\": [\n    {\n      \"column\": \"percentage\",\n      \"operator\": \"=\",\n      \"value\": \"9.5\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"life expectancy\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Angola\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"gnp\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Aruba\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the GNP rate of Aruba? | did you mean the GNP or GNP old? | GNP", "What is the life expectancy rate in Angola?", "Which language has 9.5%?", "What is the population in Asian continent?"], "utterance": "What is the GNP old of Afghanistan?", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOld FROM country where Name  =  'Afghanistan'", "number_predicates": 1}, "prior_select": [["gnp"], ["life expectancy"], ["language"], ["population"]], "prior_where_col": [[["eq", "local name", "Angola"]], [["eq", "local name", "Angola"]], [["eq", "percentage", 9.5]], [["eq", "continent", "Asia"]]], "result": ["{\n  \"data columns\": [\"population\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"Asia\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"language\"],\n  \"data filters\": [\n    {\n      \"column\": \"percentage\",\n      \"operator\": \"=\",\n      \"value\": \"9.5\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"life expectancy\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Angola\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"gnp\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Aruba\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"gnp old\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Afghanistan\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "What are the codes of the countries that do not speak English?", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "North America"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "number_predicates": 1}, "prior_select": [["country code", "language"], ["code", "country code"], ["country code"]], "prior_where_col": [[], [], [["neq", "language", "English"]]], "result": [], "pred_intent": "{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"}]}"}, {"previous_utterances": ["What are the codes of the countries that do not speak English?"], "utterance": "What are the codes of the countries that do not speak English whose government forms are not Republic?", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "North America"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "number_predicates": 1}, "prior_select": [["country code", "language"], ["code", "country code"], ["country code"]], "prior_where_col": [[], [], [["neq", "language", "English"]]], "result": ["{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"}]}"], "pred_intent": "{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"},{\"column\": \"government form\", \"operator\": \"!=\", \"value\": \"Republic\"}]}"}, {"previous_utterances": ["What are the codes of the countries that do not speak English whose government forms are not Republic?", "What are the codes of the countries that do not speak English?"], "utterance": "What language do each of those speak, please?", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "North America"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "number_predicates": 1}, "prior_select": [["country code", "language"], ["code", "country code"], ["country code"]], "prior_where_col": [[], [], [["neq", "language", "English"]]], "result": ["{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"}]}", "{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"},{\"column\": \"government form\", \"operator\": \"!=\", \"value\": \"Republic\"}]}"], "pred_intent": "{\"data columns\": [\"code\", \"language\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"},{\"column\": \"government form\", \"operator\": \"!=\", \"value\": \"Republic\"}]}"}, {"previous_utterances": ["What language do each of those speak, please?", "What are the codes of the countries that do not speak English whose government forms are not Republic?", "What are the codes of the countries that do not speak English?"], "utterance": "Which of those countries is on the continent North America?", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "North America"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select code from country where continent  =  \"North America\" and code in  ( SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "number_predicates": 1}, "prior_select": [["country code", "language"], ["code", "country code"], ["country code"]], "prior_where_col": [[], [], [["neq", "language", "English"]]], "result": ["{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"}]}", "{\"data columns\": [\"code\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"},{\"column\": \"government form\", \"operator\": \"!=\", \"value\": \"Republic\"}]}", "{\"data columns\": [\"code\", \"language\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"},{\"column\": \"government form\", \"operator\": \"!=\", \"value\": \"Republic\"}]}"], "pred_intent": "{\"data columns\": [\"code\", \"continent\"], \"data filters\": [{\"column\": \"language\", \"operator\": \"!=\", \"value\": \"English\"},{\"column\": \"government form\", \"operator\": \"!=\", \"value\": \"Republic\"},{\"column\": \"continent\", \"operator\": \"=\", \"value\": \"North America\"}]}"}, {"previous_utterances": [], "utterance": "What is the total number of countries?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[8, "eq", "Southern and Central Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"", "number_predicates": 1}, "prior_select": [["region"], ["*"], ["*"]], "prior_where_col": [[["eq", "name", "Kabul"]], [], []], "result": [], "pred_intent": "{\"data columns\": [], \"data filters\": []}"}, {"previous_utterances": ["What is the total number of countries?"], "utterance": "How many cities are there?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[8, "eq", "Southern and Central Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"", "number_predicates": 1}, "prior_select": [["region"], ["*"], ["*"]], "prior_where_col": [[["eq", "name", "Kabul"]], [], []], "result": ["{\"data columns\": [], \"data filters\": []}"], "pred_intent": "{\"data columns\": [], \"data filters\": []}"}, {"previous_utterances": ["How many cities are there?", "What is the total number of countries?"], "utterance": "Can you tell me the region where the city of Kabul is?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[8, "eq", "Southern and Central Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"", "number_predicates": 1}, "prior_select": [["region"], ["*"], ["*"]], "prior_where_col": [[["eq", "name", "Kabul"]], [], []], "result": ["{\"data columns\": [], \"data filters\": []}", "{\"data columns\": [], \"data filters\": []}"], "pred_intent": "{\"data columns\": [], \"data filters\": [\n    {\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Kabul\"\n    }\n]}"}, {"previous_utterances": ["Can you tell me the region where the city of Kabul is?", "How many cities are there?", "What is the total number of countries?"], "utterance": "Yes. How many cities are the in the region?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[8, "eq", "Southern and Central Asia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  \"Southern and Central Asia\"", "number_predicates": 1}, "prior_select": [["region"], ["*"], ["*"]], "prior_where_col": [[["eq", "name", "Kabul"]], [], []], "result": ["{\"data columns\": [], \"data filters\": []}", "{\"data columns\": [], \"data filters\": []}", "{\"data columns\": [], \"data filters\": [\n    {\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Kabul\"\n    }\n]}"], "pred_intent": "{\"data columns\": [], \"data filters\": [\n    {\n        \"column\": \"region\",\n        \"operator\": \"=\",\n        \"value\": \"<region>\"\n    }\n]}"}, {"previous_utterances": [], "utterance": "What are the regions that use English, please?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "number_predicates": 1}, "prior_select": [["region"], ["region"]], "prior_where_col": [[["eq", "language", "Dutch"]], [["eq", "language", "English"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"English\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the regions that use English, please?"], "utterance": "What are the regions that use Dutch, please?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "number_predicates": 1}, "prior_select": [["region"], ["region"]], "prior_where_col": [[["eq", "language", "Dutch"]], [["eq", "language", "English"]]], "result": ["{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"English\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Dutch\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the regions that use Dutch, please?", "What are the regions that use English, please?"], "utterance": "What are the life expectancies of those regions?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dutch"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"Dutch\"", "number_predicates": 1}, "prior_select": [["region"], ["region"]], "prior_where_col": [[["eq", "language", "Dutch"]], [["eq", "language", "English"]]], "result": ["{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"English\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Dutch\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"region\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the population of Afghanistan?", "select_target": [23], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dari"], [1, "neq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name !=  'Afghanistan'", "number_predicates": 2}, "prior_select": [["language"], ["language"], ["language"], ["population"], ["population"]], "prior_where_col": [[["eq", "name", "Afghanistan"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"]], [["eq", "name", "Aruba"]], [["eq", "name", "Afghanistan"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the population of Afghanistan?"], "utterance": "And for Aruba?", "select_target": [23], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dari"], [1, "neq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name !=  'Afghanistan'", "number_predicates": 2}, "prior_select": [["language"], ["language"], ["language"], ["population"], ["population"]], "prior_where_col": [[["eq", "name", "Afghanistan"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"]], [["eq", "name", "Aruba"]], [["eq", "name", "Afghanistan"]]], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"}, {"previous_utterances": ["And for Aruba?", "What is the population of Afghanistan?"], "utterance": "What languages are spoken in Aruba?", "select_target": [23], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dari"], [1, "neq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name !=  'Afghanistan'", "number_predicates": 2}, "prior_select": [["language"], ["language"], ["language"], ["population"], ["population"]], "prior_where_col": [[["eq", "name", "Afghanistan"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"]], [["eq", "name", "Aruba"]], [["eq", "name", "Afghanistan"]]], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"}, {"previous_utterances": ["What languages are spoken in Aruba?", "And for Aruba?", "What is the population of Afghanistan?"], "utterance": "Is there an official language for the country? | For which country? Aruba? | Yes.", "select_target": [23], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dari"], [1, "neq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name !=  'Afghanistan'", "number_predicates": 2}, "prior_select": [["language"], ["language"], ["language"], ["population"], ["population"]], "prior_where_col": [[["eq", "name", "Afghanistan"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"]], [["eq", "name", "Aruba"]], [["eq", "name", "Afghanistan"]]], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"is official\", \"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        },\n        {\n            \"column\": \"is official\",\n            \"operator\": \"=\",\n            \"value\": \"Yes\"\n        }\n    ]\n}"}, {"previous_utterances": ["Is there an official language for the country? | For which country? Aruba? | Yes.", "What languages are spoken in Aruba?", "And for Aruba?", "What is the population of Afghanistan?"], "utterance": "What about for Afghanistan?", "select_target": [23], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dari"], [1, "neq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name !=  'Afghanistan'", "number_predicates": 2}, "prior_select": [["language"], ["language"], ["language"], ["population"], ["population"]], "prior_where_col": [[["eq", "name", "Afghanistan"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"]], [["eq", "name", "Aruba"]], [["eq", "name", "Afghanistan"]]], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"is official\", \"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        },\n        {\n            \"column\": \"is official\",\n            \"operator\": \"=\",\n            \"value\": \"Yes\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"is official\", \"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        },\n        {\n            \"column\": \"is official\",\n            \"operator\": \"=\",\n            \"value\": \"Yes\"\n        }\n    ]\n}"}, {"previous_utterances": ["What about for Afghanistan?", "Is there an official language for the country? | For which country? Aruba? | Yes.", "What languages are spoken in Aruba?", "And for Aruba?", "What is the population of Afghanistan?"], "utterance": "How many other countries speak Dari?", "select_target": [23], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Dari"], [1, "neq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name !=  'Afghanistan'", "number_predicates": 2}, "prior_select": [["language"], ["language"], ["language"], ["population"], ["population"]], "prior_where_col": [[["eq", "name", "Afghanistan"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"], ["eq", "is official", "T"]], [["eq", "name", "Aruba"]], [["eq", "name", "Aruba"]], [["eq", "name", "Afghanistan"]]], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"is official\", \"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        },\n        {\n            \"column\": \"is official\",\n            \"operator\": \"=\",\n            \"value\": \"Yes\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"is official\", \"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        },\n        {\n            \"column\": \"is official\",\n            \"operator\": \"=\",\n            \"value\": \"Yes\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"COUNT(*)\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Dari\"\n        },\n        {\n            \"column\": \"is official\",\n            \"operator\": \"=\",\n            \"value\": \"Yes\"\n        },\n        {\n            \"column\": \"name\",\n            \"operator\": \"!=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "HOW MANY LANGUAGE ARE THERE?", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOLD from country where name  =  \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["population"], ["language"]], "prior_where_col": [[["eq", "name", "Aruba"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["HOW MANY LANGUAGE ARE THERE?"], "utterance": "WHAT IS THE POPULATION OF Aruba", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOLD from country where name  =  \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["population"], ["language"]], "prior_where_col": [[["eq", "name", "Aruba"]], []], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"}, {"previous_utterances": ["WHAT IS THE POPULATION OF Aruba", "HOW MANY LANGUAGE ARE THERE?"], "utterance": "WHAT IS Afghanistan GNPOld?", "select_target": [13], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT GNPOLD from country where name  =  \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["population"], ["language"]], "prior_where_col": [[["eq", "name", "Aruba"]], []], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"gnp old\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the name of the country with the shortest life expectancy in Asia?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Population FROM country WHERE name = \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["gnp"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "continent", "Africa"]], [["eq", "continent", "Asia"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the name of the country with the shortest life expectancy in Asia?"], "utterance": "And in Africa? | Do you mean among country in Africa, or among the country in Africa and in Asia. | Among country in Africa", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Population FROM country WHERE name = \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["gnp"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "continent", "Africa"]], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        }\n    ]\n}"}, {"previous_utterances": ["And in Africa? | Do you mean among country in Africa, or among the country in Africa and in Asia. | Among country in Africa", "What is the name of the country with the shortest life expectancy in Asia?"], "utterance": "What is the GNP of Afghanistan?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Population FROM country WHERE name = \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["gnp"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "continent", "Africa"]], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"gnp\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the GNP of Afghanistan?", "And in Africa? | Do you mean among country in Africa, or among the country in Africa and in Asia. | Among country in Africa", "What is the name of the country with the shortest life expectancy in Asia?"], "utterance": "What is the population of Afghanistan?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Afghanistan"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Population FROM country WHERE name = \"Afghanistan\"", "number_predicates": 1}, "prior_select": [["gnp"], ["name"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "continent", "Africa"]], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"gnp\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are the populations of every country in Africa?", "select_target": [1, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "number_predicates": 2}, "prior_select": [["name", "population"], ["name"], ["name", "population"], ["name", "population"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"]], [["eq", "continent", "Africa"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}\n]\n}"}, {"previous_utterances": ["What are the populations of every country in Africa?"], "utterance": "What are the names and populations of every country in Asia?", "select_target": [1, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "number_predicates": 2}, "prior_select": [["name", "population"], ["name"], ["name", "population"], ["name", "population"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}\n]\n}"}, {"previous_utterances": ["What are the names and populations of every country in Asia?", "What are the populations of every country in Africa?"], "utterance": "What are the names of the Asian countries that have a larger population than that of any country in Africa?", "select_target": [1, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "number_predicates": 2}, "prior_select": [["name", "population"], ["name"], ["name", "population"], ["name", "population"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}\n]\n}", "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"(SELECT MAX(population) FROM countries WHERE continent = 'Africa')\"\n}\n]\n}"}, {"previous_utterances": ["What are the names of the Asian countries that have a larger population than that of any country in Africa?", "What are the names and populations of every country in Asia?", "What are the populations of every country in Africa?"], "utterance": "What are the populations of those countries?", "select_target": [1, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "number_predicates": 2}, "prior_select": [["name", "population"], ["name"], ["name", "population"], ["name", "population"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}\n]\n}", "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}\n]\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"(SELECT MAX(population) FROM countries WHERE continent = 'Africa')\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"(SELECT MAX(population) FROM countries WHERE continent = 'Africa')\"\n}\n]\n}"}, {"previous_utterances": ["What are the populations of those countries?", "What are the names of the Asian countries that have a larger population than that of any country in Africa?", "What are the names and populations of every country in Asia?", "What are the populations of every country in Africa?"], "utterance": "What are the government forms of those countries?", "select_target": [1, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [4, "gt", "population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,GovernmentForm FROM country WHERE Continent   =   \"Asia\"  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   \"Africa\" ) ", "number_predicates": 2}, "prior_select": [["name", "population"], ["name"], ["name", "population"], ["name", "population"]], "prior_where_col": [[["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"], ["gt", "population", "population"]], [["eq", "continent", "Asia"]], [["eq", "continent", "Africa"]]], "result": ["{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Africa\"\n}\n]\n}", "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n}\n]\n}", "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"(SELECT MAX(population) FROM countries WHERE continent = 'Africa')\"\n}\n]\n}", "{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"(SELECT MAX(population) FROM countries WHERE continent = 'Africa')\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"government form\"],\n\"data filters\": [\n{\n\"column\": \"continent\",\n\"operator\": \"=\",\n\"value\": \"Asia\"\n},\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"(SELECT MAX(population) FROM countries WHERE continent = 'Africa')\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "What are the countries where either English or Dutch is the official language?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Arabic"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "number_predicates": 2}, "prior_select": [["name"], ["language"], ["name"], ["language"], ["*"]], "prior_where_col": [[["eq", "language", "Arabic"], ["eq", "is official", "T"]], [["eq", "name", "Egypt"]], [["eq", "language", "Arabic"]], [["eq", "name", "Belgium"], ["eq", "is official", "T"]], []], "result": [], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"English\"\n},\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Dutch\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"}, {"previous_utterances": ["What are the countries where either English or Dutch is the official language?"], "utterance": "What is the official language in Belgium?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Arabic"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "number_predicates": 2}, "prior_select": [["name"], ["language"], ["name"], ["language"], ["*"]], "prior_where_col": [[["eq", "language", "Arabic"], ["eq", "is official", "T"]], [["eq", "name", "Egypt"]], [["eq", "language", "Arabic"]], [["eq", "name", "Belgium"], ["eq", "is official", "T"]], []], "result": ["{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"English\"\n},\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Dutch\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Belgium\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"}, {"previous_utterances": ["What is the official language in Belgium?", "What are the countries where either English or Dutch is the official language?"], "utterance": "What are the countries where arabic language is spoken", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Arabic"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "number_predicates": 2}, "prior_select": [["name"], ["language"], ["name"], ["language"], ["*"]], "prior_where_col": [[["eq", "language", "Arabic"], ["eq", "is official", "T"]], [["eq", "name", "Egypt"]], [["eq", "language", "Arabic"]], [["eq", "name", "Belgium"], ["eq", "is official", "T"]], []], "result": ["{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"English\"\n},\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Dutch\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Belgium\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n}\n]\n}"}, {"previous_utterances": ["What are the countries where arabic language is spoken", "What is the official language in Belgium?", "What are the countries where either English or Dutch is the official language?"], "utterance": "Please tell me all the languages spoken in Egypt.", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Arabic"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "number_predicates": 2}, "prior_select": [["name"], ["language"], ["name"], ["language"], ["*"]], "prior_where_col": [[["eq", "language", "Arabic"], ["eq", "is official", "T"]], [["eq", "name", "Egypt"]], [["eq", "language", "Arabic"]], [["eq", "name", "Belgium"], ["eq", "is official", "T"]], []], "result": ["{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"English\"\n},\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Dutch\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Belgium\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Egypt\"\n}\n]\n}"}, {"previous_utterances": ["Please tell me all the languages spoken in Egypt.", "What are the countries where arabic language is spoken", "What is the official language in Belgium?", "What are the countries where either English or Dutch is the official language?"], "utterance": "Can you tell me the number of countries where Arabic is the official language.", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Arabic"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "number_predicates": 2}, "prior_select": [["name"], ["language"], ["name"], ["language"], ["*"]], "prior_where_col": [[["eq", "language", "Arabic"], ["eq", "is official", "T"]], [["eq", "name", "Egypt"]], [["eq", "language", "Arabic"]], [["eq", "name", "Belgium"], ["eq", "is official", "T"]], []], "result": ["{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"English\"\n},\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Dutch\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Belgium\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Egypt\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"}, {"previous_utterances": ["Can you tell me the number of countries where Arabic is the official language.", "Please tell me all the languages spoken in Egypt.", "What are the countries where arabic language is spoken", "What is the official language in Belgium?", "What are the countries where either English or Dutch is the official language?"], "utterance": "Can you please give me the names of these countries?", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Arabic"], [21, "eq", "T"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  \"Arabic\" and T2.isOfficial  =  \"T\"", "number_predicates": 2}, "prior_select": [["name"], ["language"], ["name"], ["language"], ["*"]], "prior_where_col": [[["eq", "language", "Arabic"], ["eq", "is official", "T"]], [["eq", "name", "Egypt"]], [["eq", "language", "Arabic"]], [["eq", "name", "Belgium"], ["eq", "is official", "T"]], []], "result": ["{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"English\"\n},\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Dutch\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Belgium\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Egypt\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"language\",\n\"operator\": \"=\",\n\"value\": \"Arabic\"\n},\n{\n\"column\": \"is official\",\n\"operator\": \"=\",\n\"value\": \"true\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["surface area"], ["local name"], ["continent"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "name", "Angola"]], [["eq", "name", "Aruba"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM data WHERE continent = 'Asia')\"\n        }\n    ]\n}"}, {"previous_utterances": ["WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA"], "utterance": "FROM WHICH CONTINENT IS ARUBA", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["surface area"], ["local name"], ["continent"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "name", "Angola"]], [["eq", "name", "Aruba"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": ["{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM data WHERE continent = 'Asia')\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"}, {"previous_utterances": ["FROM WHICH CONTINENT IS ARUBA", "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA"], "utterance": "WHAT IS THE LOCAL NAME OF ANGOLA", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["surface area"], ["local name"], ["continent"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "name", "Angola"]], [["eq", "name", "Aruba"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": ["{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM data WHERE continent = 'Asia')\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"local name\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Angola\"\n        }\n    ]\n}"}, {"previous_utterances": ["WHAT IS THE LOCAL NAME OF ANGOLA", "FROM WHICH CONTINENT IS ARUBA", "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA"], "utterance": "SURFACE AREA  OF AFGHANISTAN", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["surface area"], ["local name"], ["continent"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "name", "Angola"]], [["eq", "name", "Aruba"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": ["{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM data WHERE continent = 'Asia')\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"local name\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Angola\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"surface area\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"}, {"previous_utterances": ["SURFACE AREA  OF AFGHANISTAN", "WHAT IS THE LOCAL NAME OF ANGOLA", "FROM WHICH CONTINENT IS ARUBA", "WHAT ARE THE AFRICAN COUNTRIES THAT HAVE POPULATION LESS THAN ANY COUNTRY IN ASIA"], "utterance": "WHAT IS THE CODE OF ARUBA", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["surface area"], ["local name"], ["continent"], ["name"]], "prior_where_col": [[["eq", "name", "Afghanistan"]], [["eq", "name", "Angola"]], [["eq", "name", "Aruba"]], [["eq", "continent", "Africa"], ["lt", "population", "population"]]], "result": ["{\n    \"data columns\": [\"name\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Africa\"\n        },\n        {\n            \"column\": \"population\",\n            \"operator\": \"<\",\n            \"value\": \"(SELECT MIN(population) FROM data WHERE continent = 'Asia')\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"continent\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"local name\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Angola\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"surface area\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Afghanistan\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"code\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the average life expectancy for each government form?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["government form"], ["government form", "life expectancy"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the average life expectancy for each government form?"], "utterance": "Can you show me only those government forms whose average life expectancy is greater than 72?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["government form"], ["government form", "life expectancy"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"life expectancy\",\n            \"operator\": \">\",\n            \"value\": \"72\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you show me only those government forms whose average life expectancy is greater than 72?", "What is the average life expectancy for each government form?"], "utterance": "What is the population of each of those?", "select_target": [4, 15], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72", "number_predicates": 0}, "prior_select": [["government form"], ["government form", "life expectancy"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"government form\", \"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"life expectancy\",\n            \"operator\": \">\",\n            \"value\": \"72\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"government form\", \"life expectancy\", \"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"life expectancy\",\n            \"operator\": \">\",\n            \"value\": \"72\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "HOw many regions are there in ASia?", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [7, "eq", "Europe"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\"", "number_predicates": 2}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}"}, {"previous_utterances": ["HOw many regions are there in ASia?"], "utterance": "What about in Europe?", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [7, "eq", "Europe"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\"", "number_predicates": 2}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"region\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"}, {"previous_utterances": ["What about in Europe?", "HOw many regions are there in ASia?"], "utterance": "What is the surface area of all 10 of them?", "select_target": [9], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[7, "eq", "Asia"], [7, "eq", "Europe"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   \"Asia\" OR Continent   =   \"Europe\"", "number_predicates": 2}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"region\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Asia\"\n    }]\n}", "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"surface area\"],\n    \"data filters\": [{\n        \"column\": \"region\",\n        \"operator\": \"in\",\n        \"value\": [\"Eastern Asia\", \"Southern Asia\", \"Southeast Asia\", \"Central Asia\", \"Western Asia\", \"Northern Europe\", \"Southern Europe\", \"Eastern Europe\", \"Western Europe\", \"Northern Africa\"]\n    }]\n}"}, {"previous_utterances": [], "utterance": "Which country speaks the largest number of languages?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Which country speaks the largest number of languages?"], "utterance": "How many languages are spoken in Canada?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many languages are spoken in Canada?", "Which country speaks the largest number of languages?"], "utterance": "What are the names of those languages?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the names of those languages?", "How many languages are spoken in Canada?", "Which country speaks the largest number of languages?"], "utterance": "How many countries is Chinese spoken in?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Chinese\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many countries is Chinese spoken in?", "What are the names of those languages?", "How many languages are spoken in Canada?", "Which country speaks the largest number of languages?"], "utterance": "Which countries are in North America?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Chinese\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"North America\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which countries are in North America?", "How many countries is Chinese spoken in?", "What are the names of those languages?", "How many languages are spoken in Canada?", "Which country speaks the largest number of languages?"], "utterance": "What are the official languages of these countries?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Chinese\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"North America\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"language\", \"is official\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"North America\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the official languages of these countries?", "Which countries are in North America?", "How many countries is Chinese spoken in?", "What are the names of those languages?", "How many languages are spoken in Canada?", "Which country speaks the largest number of languages?"], "utterance": "What is the life expectancy in Canada?", "select_target": [11], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Canada"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT LifeExpectancy FROM country WHERE name  =  \"Canada\"", "number_predicates": 1}, "prior_select": [["language"], ["name"], ["country code"], ["language"], ["*"], ["name"]], "prior_where_col": [[["eq", "is official", "T"]], [["eq", "continent", "North America"]], [["eq", "language", "Chinese"]], [["eq", "name", "Canada"]], [["eq", "name", "Canada"]], []], "result": ["{\n    \"data columns\": [\"country code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"Chinese\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"North America\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"language\", \"is official\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"North America\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"life expectancy\"],\n    \"data filters\": [\n        {\n            \"column\": \"country code\",\n            \"operator\": \"=\",\n            \"value\": \"CAN\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the average percent?", "select_target": [22], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Papiamento"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"", "number_predicates": 1}, "prior_select": [["country code"], ["percentage"]], "prior_where_col": [[["eq", "language", "Dutch"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"percentage\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the average percent?"], "utterance": "Which code of country has the highest dutch speaking population?", "select_target": [22], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Papiamento"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"", "number_predicates": 1}, "prior_select": [["country code"], ["percentage"]], "prior_where_col": [[["eq", "language", "Dutch"]], []], "result": ["{\n    \"data columns\": [\"percentage\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"code\"],\n    \"data filters\": [{\n        \"column\": \"language\",\n        \"operator\": \"=\",\n        \"value\": \"Dutch\"\n    }]\n}"}, {"previous_utterances": ["Which code of country has the highest dutch speaking population?", "What is the average percent?"], "utterance": "The difference of the overall percent | Do you mean average percent? | yes", "select_target": [22], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[20, "eq", "Papiamento"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select avg ( percentage )  from countrylanguage where language  =  \"Papiamento\"", "number_predicates": 1}, "prior_select": [["country code"], ["percentage"]], "prior_where_col": [[["eq", "language", "Dutch"]], []], "result": ["{\n    \"data columns\": [\"percentage\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"code\"],\n    \"data filters\": [{\n        \"column\": \"language\",\n        \"operator\": \"=\",\n        \"value\": \"Dutch\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"percentage\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "which region is the city kabul located", "select_target": [8], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Qandahar"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"", "number_predicates": 1}, "prior_select": [["region"], ["region"]], "prior_where_col": [[["eq", "name", "Herat"]], [["eq", "name", "Kabul"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Kabul\"\n        }\n    ]\n}"}, {"previous_utterances": ["which region is the city kabul located"], "utterance": "which region is the city herat located", "select_target": [8], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Qandahar"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"", "number_predicates": 1}, "prior_select": [["region"], ["region"]], "prior_where_col": [[["eq", "name", "Herat"]], [["eq", "name", "Kabul"]]], "result": ["{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Kabul\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Herat\"\n        }\n    ]\n}"}, {"previous_utterances": ["which region is the city herat located", "which region is the city kabul located"], "utterance": "which region is the city quandahar", "select_target": [8], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Qandahar"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   \"Qandahar\"", "number_predicates": 1}, "prior_select": [["region"], ["region"]], "prior_where_col": [[["eq", "name", "Herat"]], [["eq", "name", "Kabul"]]], "result": ["{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Kabul\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Herat\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"region\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Quandahar\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are the names of the nations with the 3 lowest populations?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Antarctica"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT population from country where name  =  \"Antarctica\"", "number_predicates": 1}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n],\n\"order by\": {\n\"column\": \"population\",\n\"order\": \"asc\",\n\"limit\": 3\n}\n}"}, {"previous_utterances": ["What are the names of the nations with the 3 lowest populations?"], "utterance": "Which nation has the largest surface area?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Antarctica"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT population from country where name  =  \"Antarctica\"", "number_predicates": 1}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n],\n\"order by\": {\n\"column\": \"population\",\n\"order\": \"asc\",\n\"limit\": 3\n}\n}"], "pred_intent": "{\n\"data columns\": [\"name\", \"surface area\"],\n\"data filters\": [\n{\n\"column\": \"surface area\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n],\n\"order by\": {\n\"column\": \"surface area\",\n\"order\": \"desc\",\n\"limit\": 1\n}\n}"}, {"previous_utterances": ["Which nation has the largest surface area?", "What are the names of the nations with the 3 lowest populations?"], "utterance": "What is the total population of Antarctica?", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Antarctica"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT population from country where name  =  \"Antarctica\"", "number_predicates": 1}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"name\", \"population\"],\n\"data filters\": [\n{\n\"column\": \"population\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n],\n\"order by\": {\n\"column\": \"population\",\n\"order\": \"asc\",\n\"limit\": 3\n}\n}", "{\n\"data columns\": [\"name\", \"surface area\"],\n\"data filters\": [\n{\n\"column\": \"surface area\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n],\n\"order by\": {\n\"column\": \"surface area\",\n\"order\": \"desc\",\n\"limit\": 1\n}\n}"], "pred_intent": "{\n\"data columns\": [\"population\"],\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Antarctica\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "The given codes of country is not speak in English please tell | Did you mean the codes of countries that do not speak English? | Thanks! Which countries do not speak English please tell country names", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"English\"\n        }\n    ]\n}"}, {"previous_utterances": ["The given codes of country is not speak in English please tell | Did you mean the codes of countries that do not speak English? | Thanks! Which countries do not speak English please tell country names"], "utterance": "Thanks! Whose government forms Republic | Did you want the names of countries that do not speak English and whose government forms are not Republic? | Thanks! yes", "select_target": [1], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm !=  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   \"English\" ) ", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"English\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"English\"\n        },\n        {\n            \"column\": \"government form\",\n            \"operator\": \"!=\",\n            \"value\": \"Republic\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "LIST THE NATIONS WHICH DO NOT USE ENGLISH", "select_target": [1, 4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"English\"\n        }\n    ]\n}"}, {"previous_utterances": ["LIST THE NATIONS WHICH DO NOT USE ENGLISH"], "utterance": "WHAT IS THE POPULATION OF THE PEOPLE LIVING IN THE NATIONS NOT USING ENGLISH | did you mean you want the Population of the country  DO NOT USE ENGLISH | YES, THE TOTAL NUMBER OF PEOPLE LIVING IN THE NATIONS THAT DO NOT USE ENGLISH", "select_target": [1, 4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   \"English\" )  group by Name", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"English\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"English\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many country there", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Qandahar"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT population  from city where name  =  \"Qandahar\"", "number_predicates": 1}, "prior_select": [["country code"], ["*"]], "prior_where_col": [[["eq", "name", "Herat"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many country there"], "utterance": "what is the Country Code of Herat | Do you mean the country code of city Herat? | yes sir", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Qandahar"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT population  from city where name  =  \"Qandahar\"", "number_predicates": 1}, "prior_select": [["country code"], ["*"]], "prior_where_col": [[["eq", "name", "Herat"]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Herat\"\n    }]\n}"}, {"previous_utterances": ["what is the Country Code of Herat | Do you mean the country code of city Herat? | yes sir", "how many country there"], "utterance": "what is the Population of Qandahar", "select_target": [4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Qandahar"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT population  from city where name  =  \"Qandahar\"", "number_predicates": 1}, "prior_select": [["country code"], ["*"]], "prior_where_col": [[["eq", "name", "Herat"]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"country code\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Herat\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"population\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Qandahar\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hi. How many countries are listed in total?", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Latvia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["government form"], ["government form"], ["*"]], "prior_where_col": [[["eq", "government form", "Republic"]], [["eq", "government form", "Republic"]], [], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"*\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Hi. How many countries are listed in total?"], "utterance": "Of the 239 countries, how many different forms of government are there among them?", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Latvia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["government form"], ["government form"], ["*"]], "prior_where_col": [[["eq", "government form", "Republic"]], [["eq", "government form", "Republic"]], [], [], []], "result": ["{\n  \"data columns\": [\"*\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Of the 239 countries, how many different forms of government are there among them?", "Hi. How many countries are listed in total?"], "utterance": "What are the 35 different forms of government from the 239 countries listed?", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Latvia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["government form"], ["government form"], ["*"]], "prior_where_col": [[["eq", "government form", "Republic"]], [["eq", "government form", "Republic"]], [], [], []], "result": ["{\n  \"data columns\": [\"*\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["What are the 35 different forms of government from the 239 countries listed?", "Of the 239 countries, how many different forms of government are there among them?", "Hi. How many countries are listed in total?"], "utterance": "Of the 239 countries, how many of them have a Republic government form?", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Latvia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["government form"], ["government form"], ["*"]], "prior_where_col": [[["eq", "government form", "Republic"]], [["eq", "government form", "Republic"]], [], [], []], "result": ["{\n  \"data columns\": [\"*\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": [\n    {\n      \"column\": \"government form\",\n      \"operator\": \"=\",\n      \"value\": \"Republic\"\n    }\n  ]\n}"}, {"previous_utterances": ["Of the 239 countries, how many of them have a Republic government form?", "What are the 35 different forms of government from the 239 countries listed?", "Of the 239 countries, how many different forms of government are there among them?", "Hi. How many countries are listed in total?"], "utterance": "What are the names of the 122 countries that have a Republic government form?", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Latvia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["government form"], ["government form"], ["*"]], "prior_where_col": [[["eq", "government form", "Republic"]], [["eq", "government form", "Republic"]], [], [], []], "result": ["{\n  \"data columns\": [\"*\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": [\n    {\n      \"column\": \"government form\",\n      \"operator\": \"=\",\n      \"value\": \"Republic\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [\n    {\n      \"column\": \"government form\",\n      \"operator\": \"=\",\n      \"value\": \"Republic\"\n    }\n  ]\n}"}, {"previous_utterances": ["What are the names of the 122 countries that have a Republic government form?", "Of the 239 countries, how many of them have a Republic government form?", "What are the 35 different forms of government from the 239 countries listed?", "Of the 239 countries, how many different forms of government are there among them?", "Hi. How many countries are listed in total?"], "utterance": "Since Latvia is a country with a Republic government form, which languages are spoken there?", "select_target": [20], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Latvia"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  \"Latvia\"", "number_predicates": 1}, "prior_select": [["name"], ["*"], ["government form"], ["government form"], ["*"]], "prior_where_col": [[["eq", "government form", "Republic"]], [["eq", "government form", "Republic"]], [], [], []], "result": ["{\n  \"data columns\": [\"*\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"government form\"],\n  \"data filters\": [\n    {\n      \"column\": \"government form\",\n      \"operator\": \"=\",\n      \"value\": \"Republic\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [\n    {\n      \"column\": \"government form\",\n      \"operator\": \"=\",\n      \"value\": \"Republic\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"language\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Latvia\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "give me the total surface area of the continent\n Asia", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE Name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["local name"], ["surface area"]], "prior_where_col": [[], [["eq", "continent", "Asia"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"continent\", \"surface area\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}"}, {"previous_utterances": ["give me the total surface area of the continent\n Asia"], "utterance": "what is the local name | Did you mean to ask for all local names? | yes", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE Name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["local name"], ["surface area"]], "prior_where_col": [[], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"continent\", \"surface area\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"local name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the local name | Did you mean to ask for all local names? | yes", "give me the total surface area of the continent\n Asia"], "utterance": "What is Aruba's code?", "select_target": [6], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[1, "eq", "Aruba"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT Code FROM country WHERE Name  =  \"Aruba\"", "number_predicates": 1}, "prior_select": [["local name"], ["surface area"]], "prior_where_col": [[], [["eq", "continent", "Asia"]]], "result": ["{\n    \"data columns\": [\"continent\", \"surface area\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Asia\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"local name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"code\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Aruba\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Can you list all nations whose government is US territory?", "select_target": [12, 4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[15, "eq", "US Territory"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\"", "number_predicates": 1}, "prior_select": [["gnp", "population"], ["name"]], "prior_where_col": [[["eq", "government form", "US Territory"]], [["eq", "government form", "US Territory"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"government form\",\n        \"operator\": \"=\",\n        \"value\": \"US territory\"\n    }]\n}"}, {"previous_utterances": ["Can you list all nations whose government is US territory?"], "utterance": "Hmm, I also want to know their GNP and population.", "select_target": [12, 4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[15, "eq", "US Territory"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\"", "number_predicates": 1}, "prior_select": [["gnp", "population"], ["name"]], "prior_where_col": [[["eq", "government form", "US Territory"]], [["eq", "government form", "US Territory"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"government form\",\n        \"operator\": \"=\",\n        \"value\": \"US territory\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"gnp\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"government form\",\n        \"operator\": \"=\",\n        \"value\": \"US territory\"\n    }]\n}"}, {"previous_utterances": ["Hmm, I also want to know their GNP and population.", "Can you list all nations whose government is US territory?"], "utterance": "Please find out the average GNP and total population of those nations.", "select_target": [12, 4], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[15, "eq", "US Territory"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   \"US Territory\"", "number_predicates": 1}, "prior_select": [["gnp", "population"], ["name"]], "prior_where_col": [[["eq", "government form", "US Territory"]], [["eq", "government form", "US Territory"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"government form\",\n        \"operator\": \"=\",\n        \"value\": \"US territory\"\n    }]\n}", "{\n    \"data columns\": [\"name\", \"gnp\", \"population\"],\n    \"data filters\": [{\n        \"column\": \"government form\",\n        \"operator\": \"=\",\n        \"value\": \"US territory\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"government form\",\n        \"operator\": \"=\",\n        \"value\": \"US territory\"\n    }],\n    \"aggregate\": {\n        \"gnp\": \"average\",\n        \"population\": \"sum\"\n    }\n}"}, {"previous_utterances": [], "utterance": "I want to know the average population of all cities please", "select_target": [23, 3], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[4, "gt", "Population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District", "number_predicates": 1}, "prior_select": [["district"], ["population"]], "prior_where_col": [[["gt", "population", "Population"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"population\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["I want to know the average population of all cities please"], "utterance": "And which districts have cities with populations greater than the average?", "select_target": [23, 3], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[4, "gt", "Population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District", "number_predicates": 1}, "prior_select": [["district"], ["population"]], "prior_where_col": [[["gt", "population", "Population"]], []], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"district\"],\n    \"data filters\": [\n        {\n            \"column\": \"population\",\n            \"operator\": \">\",\n            \"value\": \"average\"\n        }\n    ]\n}"}, {"previous_utterances": ["And which districts have cities with populations greater than the average?", "I want to know the average population of all cities please"], "utterance": "Within these districts, how many cities does each have with a population greater than the average?", "select_target": [23, 3], "column_names": ["id", "name", "country code", "district", "population", "seq", "code", "continent", "region", "surface area", "indepdent year", "life expectancy", "gnp", "gnp old", "local name", "government form", "head of state", "capital", "code2", "countrycode", "language", "is official", "percentage", "*"], "where_clauses": [[4, "gt", "Population"]], "debug_info": {"where_categorization": -1, "db_id": "world_1", "raw_sql": "SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District", "number_predicates": 1}, "prior_select": [["district"], ["population"]], "prior_where_col": [[["gt", "population", "Population"]], []], "result": ["{\n    \"data columns\": [\"population\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"district\"],\n    \"data filters\": [\n        {\n            \"column\": \"population\",\n            \"operator\": \">\",\n            \"value\": \"average\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"district\", \"COUNT(name)\"],\n    \"data filters\": [\n        {\n            \"column\": \"population\",\n            \"operator\": \">\",\n            \"value\": \"average\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how old is George Chuter?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[1, "eq", "Lee Mears"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "select city from employee where name  =  \"Lee Mears\"", "number_predicates": 1}, "prior_select": [["age"]], "prior_where_col": [[["eq", "name", "George Chuter"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"age\"],\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"George Chuter\"\n}\n]\n}"}, {"previous_utterances": ["how old is George Chuter?"], "utterance": "how much bonus was Employee with ID 1 awarded? | The employee with employee id 1 got a total amount of 5900.0 bonus. | What city is Lee Mears from?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[1, "eq", "Lee Mears"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "select city from employee where name  =  \"Lee Mears\"", "number_predicates": 1}, "prior_select": [["age"]], "prior_where_col": [[["eq", "name", "George Chuter"]]], "result": ["{\n\"data columns\": [\"age\"],\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"George Chuter\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"bonus\", \"city\"],\n\"data filters\": [\n{\n\"column\": \"employee id\",\n\"operator\": \"=\",\n\"value\": 1\n},\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Lee Mears\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "Hello!  Can you please provide me with a list of all of the cities in this database?", "select_target": [2], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[3, "eq", "Bath"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Age FROM employee WHERE city  =  'Bath'", "number_predicates": 1}, "prior_select": [["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hello!  Can you please provide me with a list of all of the cities in this database?"], "utterance": "Great!  Can you update this list to show only the cities with more than one employee under the age of 30?", "select_target": [2], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[3, "eq", "Bath"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Age FROM employee WHERE city  =  'Bath'", "number_predicates": 1}, "prior_select": [["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], []], "result": ["{\n    \"data columns\": [\"city\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["Great!  Can you update this list to show only the cities with more than one employee under the age of 30?", "Hello!  Can you please provide me with a list of all of the cities in this database?"], "utterance": "Yay!  Thank you!  Can you update this list to include the ages of all residents of Bath?", "select_target": [2], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[3, "eq", "Bath"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Age FROM employee WHERE city  =  'Bath'", "number_predicates": 1}, "prior_select": [["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], []], "result": ["{\n    \"data columns\": [\"city\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"city\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"city\",\n            \"operator\": \"=\",\n            \"value\": \"Bath\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many shop are presented on the table", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[1, "eq", "HJK"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Number_products FROM shop where name  =  \"HJK\"", "number_predicates": 1}, "prior_select": [["location"], ["name"], ["*"]], "prior_where_col": [[["eq", "name", "FC Haka"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many shop are presented on the table"], "utterance": "list out the shop names", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[1, "eq", "HJK"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Number_products FROM shop where name  =  \"HJK\"", "number_predicates": 1}, "prior_select": [["location"], ["name"], ["*"]], "prior_where_col": [[["eq", "name", "FC Haka"]], [], []], "result": ["{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["list out the shop names", "how many shop are presented on the table"], "utterance": "what is the location of FC Haka", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[1, "eq", "HJK"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Number_products FROM shop where name  =  \"HJK\"", "number_predicates": 1}, "prior_select": [["location"], ["name"], ["*"]], "prior_where_col": [[["eq", "name", "FC Haka"]], [], []], "result": ["{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"location\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"FC Haka\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the location of FC Haka", "list out the shop names", "how many shop are presented on the table"], "utterance": "what is the number of products in HJK", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[1, "eq", "HJK"]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT Number_products FROM shop where name  =  \"HJK\"", "number_predicates": 1}, "prior_select": [["location"], ["name"], ["*"]], "prior_where_col": [[["eq", "name", "FC Haka"]], [], []], "result": ["{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"location\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"FC Haka\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"number products\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"HJK\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "what is the age of George Chuter?", "select_target": [1], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["age"]], "prior_where_col": [[["eq", "name", "Lee Mears"]], [["eq", "name", "George Chuter"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"George Chuter\"\n    }]\n}"}, {"previous_utterances": ["what is the age of George Chuter?"], "utterance": "what is the age of lee mears?", "select_target": [1], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["age"]], "prior_where_col": [[["eq", "name", "Lee Mears"]], [["eq", "name", "George Chuter"]]], "result": ["{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"George Chuter\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"Lee Mears\"\n    }]\n}"}, {"previous_utterances": ["what is the age of lee mears?", "what is the age of George Chuter?"], "utterance": "find the name of the employee who got the highest one time bonus?", "select_target": [1], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["age"]], "prior_where_col": [[["eq", "name", "Lee Mears"]], [["eq", "name", "George Chuter"]]], "result": ["{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"George Chuter\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"Lee Mears\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n    \"column\": \"bonus\",\n    \"operator\": \"=\",\n    \"value\": \"highest\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many stores are there? | Did you mean to ask for the number of shops? | Yes", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT MIN ( Number_products )  FROM shop", "number_predicates": 0}, "prior_select": [["number products"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many stores are there? | Did you mean to ask for the number of shops? | Yes"], "utterance": "What is the most products that one shop has?", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT MIN ( Number_products )  FROM shop", "number_predicates": 0}, "prior_select": [["number products"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"number products\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the most products that one shop has?", "How many stores are there? | Did you mean to ask for the number of shops? | Yes"], "utterance": "What about the minimum number or products that one shop has?", "select_target": [7], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT MIN ( Number_products )  FROM shop", "number_predicates": 0}, "prior_select": [["number products"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"shop id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"number products\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"number products\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What is the average number of products of all stores?", "select_target": [13], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "select count ( * )  from shop", "number_predicates": 0}, "prior_select": [["name"], ["number products"]], "prior_where_col": [[["gt", "number products", 6685]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\n        \"number products\"\n    ],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the average number of products of all stores?"], "utterance": "what are the names of stores whose number of products is bigger than 6685?", "select_target": [13], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "select count ( * )  from shop", "number_predicates": 0}, "prior_select": [["name"], ["number products"]], "prior_where_col": [[["gt", "number products", 6685]], []], "result": ["{\n    \"data columns\": [\n        \"number products\"\n    ],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\n        \"name\"\n    ],\n    \"data filters\": [\n        {\n            \"column\": \"number products\",\n            \"operator\": \">\",\n            \"value\": \"6685\"\n        }\n    ]\n}"}, {"previous_utterances": ["what are the names of stores whose number of products is bigger than 6685?", "What is the average number of products of all stores?"], "utterance": "how many stores in total?", "select_target": [13], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "select count ( * )  from shop", "number_predicates": 0}, "prior_select": [["name"], ["number products"]], "prior_where_col": [[["gt", "number products", 6685]], []], "result": ["{\n    \"data columns\": [\n        \"number products\"\n    ],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\n        \"name\"\n    ],\n    \"data filters\": [\n        {\n            \"column\": \"number products\",\n            \"operator\": \">\",\n            \"value\": \"6685\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which cities do more than one employee under age 30 come from?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[2, "lt", 29]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT City FROM employee WHERE age  <  29", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 30]], [["gt", "age", 30]], [["lt", "age", 30]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which cities do more than one employee under age 30 come from?"], "utterance": "Which cities do more than one employee over age 30 come from?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[2, "lt", 29]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT City FROM employee WHERE age  <  29", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 30]], [["gt", "age", 30]], [["lt", "age", 30]]], "result": ["{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which cities do more than one employee over age 30 come from?", "Which cities do more than one employee under age 30 come from?"], "utterance": "What are the names and ages of all employees over age 30?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[2, "lt", 29]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT City FROM employee WHERE age  <  29", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 30]], [["gt", "age", 30]], [["lt", "age", 30]]], "result": ["{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the names and ages of all employees over age 30?", "Which cities do more than one employee over age 30 come from?", "Which cities do more than one employee under age 30 come from?"], "utterance": "What are the names and ages of all employees under age 30?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[2, "lt", 29]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT City FROM employee WHERE age  <  29", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 30]], [["gt", "age", 30]], [["lt", "age", 30]]], "result": ["{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the names and ages of all employees under age 30?", "What are the names and ages of all employees over age 30?", "Which cities do more than one employee over age 30 come from?", "Which cities do more than one employee under age 30 come from?"], "utterance": "What cities are all employees under age 29 from?", "select_target": [3], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [[2, "lt", 29]], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT City FROM employee WHERE age  <  29", "number_predicates": 1}, "prior_select": [["name", "age"], ["name", "age"], ["city"], ["city"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 30]], [["gt", "age", 30]], [["lt", "age", 30]]], "result": ["{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"30\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"city\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"29\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "I'd like to see Shop names.", "select_target": [1], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["I'd like to see Shop names."], "utterance": "Which of these are hiring?", "select_target": [1], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"is full time\",\n            \"operator\": \"=\",\n            \"value\": \"true\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which of these are hiring?", "I'd like to see Shop names."], "utterance": "Which shop is hiring the highest number of employees? | do you want the name of the shop ? | Yes", "select_target": [1], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"is full time\",\n            \"operator\": \"=\",\n            \"value\": \"true\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"is full time\",\n            \"operator\": \"=\",\n            \"value\": \"true\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many shops do we have data for?", "select_target": [13], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many shops do we have data for?"], "utterance": "Can you give me their names?", "select_target": [13], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you give me their names?", "How many shops do we have data for?"], "utterance": "And how many employees were hired by each shop?", "select_target": [13], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"shop id\", \"count(employee id)\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which district has the largest number of products?", "select_target": [4], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["location"], ["number products"], ["manager name"], ["district"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n\"data columns\": [\"district\", \"number products\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Which district has the largest number of products?"], "utterance": "What is the manager's name of that shop?", "select_target": [4], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["location"], ["number products"], ["manager name"], ["district"]], "prior_where_col": [[], [], [], []], "result": ["{\n\"data columns\": [\"district\", \"number products\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"manager name\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"}, {"previous_utterances": ["What is the manager's name of that shop?", "Which district has the largest number of products?"], "utterance": "How many products did he produce at that shop?", "select_target": [4], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["location"], ["number products"], ["manager name"], ["district"]], "prior_where_col": [[], [], [], []], "result": ["{\n\"data columns\": [\"district\", \"number products\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"manager name\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"number products\"],\n\"data filters\": [\n{\n\"column\": \"manager name\",\n\"operator\": \"=\",\n\"value\": \"manager's name\"\n},\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"}, {"previous_utterances": ["How many products did he produce at that shop?", "What is the manager's name of that shop?", "Which district has the largest number of products?"], "utterance": "Where is the location of that district?", "select_target": [4], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["location"], ["number products"], ["manager name"], ["district"]], "prior_where_col": [[], [], [], []], "result": ["{\n\"data columns\": [\"district\", \"number products\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"manager name\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}", "{\n\"data columns\": [\"number products\"],\n\"data filters\": [\n{\n\"column\": \"manager name\",\n\"operator\": \"=\",\n\"value\": \"manager's name\"\n},\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"location\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"}, {"previous_utterances": ["Where is the location of that district?", "How many products did he produce at that shop?", "What is the manager's name of that shop?", "Which district has the largest number of products?"], "utterance": "What is the shop ID number?", "select_target": [4], "column_names": ["employee id", "name", "age", "city", "shop id", "location", "district", "number products", "manager name", "start from", "is full time", "year awarded", "bonus", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "employee_hire_evaluation", "raw_sql": "SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["location"], ["number products"], ["manager name"], ["district"]], "prior_where_col": [[], [], [], []], "result": ["{\n\"data columns\": [\"district\", \"number products\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"manager name\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}", "{\n\"data columns\": [\"number products\"],\n\"data filters\": [\n{\n\"column\": \"manager name\",\n\"operator\": \"=\",\n\"value\": \"manager's name\"\n},\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}", "{\n\"data columns\": [\"location\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"shop id\"],\n\"data filters\": [\n{\n\"column\": \"district\",\n\"operator\": \"=\",\n\"value\": \"district with largest number of products\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "which countries tv channels are not playing any cartoon written todd casey", "select_target": [8], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[2, "eq", "Italy"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Package_Option from tv_channel where country  =  \"Italy\"", "number_predicates": 1}, "prior_select": [["directed by"], ["country"]], "prior_where_col": [[["eq", "title", "The Rise of the Blue Beetle!"], ["eq", "written by", "Michael Jelenic"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"country\", \"channel\"],\n    \"data filters\": [{\n        \"column\": \"content\",\n        \"operator\": \"!=\",\n        \"value\": \"cartoon\"\n    },\n    {\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"todd casey\"\n    }]\n}"}, {"previous_utterances": ["which countries tv channels are not playing any cartoon written todd casey"], "utterance": "who directed the cartoon the rise of blue beetle  written by Michael Jelenic\t?", "select_target": [8], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[2, "eq", "Italy"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Package_Option from tv_channel where country  =  \"Italy\"", "number_predicates": 1}, "prior_select": [["directed by"], ["country"]], "prior_where_col": [[["eq", "title", "The Rise of the Blue Beetle!"], ["eq", "written by", "Michael Jelenic"]], []], "result": ["{\n    \"data columns\": [\"country\", \"channel\"],\n    \"data filters\": [{\n        \"column\": \"content\",\n        \"operator\": \"!=\",\n        \"value\": \"cartoon\"\n    },\n    {\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"todd casey\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"directed by\"],\n    \"data filters\": [{\n        \"column\": \"title\",\n        \"operator\": \"=\",\n        \"value\": \"the rise of blue beetle\"\n    },\n    {\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Michael Jelenic\"\n    }]\n}"}, {"previous_utterances": ["who directed the cartoon the rise of blue beetle  written by Michael Jelenic\t?", "which countries tv channels are not playing any cartoon written todd casey"], "utterance": "whats the package option for TV channels in itally?", "select_target": [8], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[2, "eq", "Italy"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Package_Option from tv_channel where country  =  \"Italy\"", "number_predicates": 1}, "prior_select": [["directed by"], ["country"]], "prior_where_col": [[["eq", "title", "The Rise of the Blue Beetle!"], ["eq", "written by", "Michael Jelenic"]], []], "result": ["{\n    \"data columns\": [\"country\", \"channel\"],\n    \"data filters\": [{\n        \"column\": \"content\",\n        \"operator\": \"!=\",\n        \"value\": \"cartoon\"\n    },\n    {\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"todd casey\"\n    }]\n}", "{\n    \"data columns\": [\"directed by\"],\n    \"data filters\": [{\n        \"column\": \"title\",\n        \"operator\": \"=\",\n        \"value\": \"the rise of blue beetle\"\n    },\n    {\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Michael Jelenic\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"package option\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"italy\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Which cartoon aired first?", "select_target": [21], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"], ["title"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Which cartoon aired first?"], "utterance": "What was the last cartoon to air?", "select_target": [21], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"], ["title"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What was the last cartoon to air?", "Which cartoon aired first?"], "utterance": "What channel was it on?", "select_target": [21], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"], ["title"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"title\", \"original air date\", \"channel\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What channel was it on?", "What was the last cartoon to air?", "Which cartoon aired first?"], "utterance": "What is the production code?", "select_target": [21], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"], ["title"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"title\", \"original air date\", \"channel\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"title\", \"original air date\", \"channel\", \"production code\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Hello!  Can you provide me with a list of all cartoons written by Todd Casey?", "select_target": [0], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[19, "eq", "Todd Casey"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'", "number_predicates": 1}, "prior_select": [["title"], ["*"]], "prior_where_col": [[["eq", "written by", "Todd Casey"]], [["eq", "written by", "Todd Casey"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"title\"],\n    \"data filters\": [{\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Todd Casey\"\n    }]\n}"}, {"previous_utterances": ["Hello!  Can you provide me with a list of all cartoons written by Todd Casey?"], "utterance": "Can you update the list to show only those Titles which are cartoons?", "select_target": [0], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[19, "eq", "Todd Casey"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'", "number_predicates": 1}, "prior_select": [["title"], ["*"]], "prior_where_col": [[["eq", "written by", "Todd Casey"]], [["eq", "written by", "Todd Casey"]]], "result": ["{\n    \"data columns\": [\"title\"],\n    \"data filters\": [{\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Todd Casey\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"title\"],\n    \"data filters\": [{\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Todd Casey\"\n    },\n    {\n        \"column\": \"content\",\n        \"operator\": \"=\",\n        \"value\": \"cartoon\"\n    }]\n}"}, {"previous_utterances": ["Can you update the list to show only those Titles which are cartoons?", "Hello!  Can you provide me with a list of all cartoons written by Todd Casey?"], "utterance": "Can you update this list to include the corresponding television channel?", "select_target": [0], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[19, "eq", "Todd Casey"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey'", "number_predicates": 1}, "prior_select": [["title"], ["*"]], "prior_where_col": [[["eq", "written by", "Todd Casey"]], [["eq", "written by", "Todd Casey"]]], "result": ["{\n    \"data columns\": [\"title\"],\n    \"data filters\": [{\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Todd Casey\"\n    }]\n}", "{\n    \"data columns\": [\"title\"],\n    \"data filters\": [{\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Todd Casey\"\n    },\n    {\n        \"column\": \"content\",\n        \"operator\": \"=\",\n        \"value\": \"cartoon\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"title\", \"channel\"],\n    \"data filters\": [{\n        \"column\": \"written by\",\n        \"operator\": \"=\",\n        \"value\": \"Todd Casey\"\n    },\n    {\n        \"column\": \"content\",\n        \"operator\": \"=\",\n        \"value\": \"cartoon\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "which is the most recently aired cartoon?", "select_target": [21, 16, 20], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\"data columns\": [\"title\"], \"data filters\": [{\"column\": \"category\", \"operator\": \"=\", \"value\": \"cartoon\"}]}"}, {"previous_utterances": ["which is the most recently aired cartoon?"], "utterance": "find the channel of the most recently aired cartoon.", "select_target": [21, 16, 20], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"]], "prior_where_col": [[], []], "result": ["{\"data columns\": [\"title\"], \"data filters\": [{\"column\": \"category\", \"operator\": \"=\", \"value\": \"cartoon\"}]}"], "pred_intent": "{\"data columns\": [\"channel\"], \"data filters\": [{\"column\": \"category\", \"operator\": \"=\", \"value\": \"cartoon\"}, {\"column\": \"air date\", \"operator\": \"=\", \"value\": \"most recent\"}]}"}, {"previous_utterances": ["find the channel of the most recently aired cartoon.", "which is the most recently aired cartoon?"], "utterance": "Find the production code and channel of the most recently aired cartoon.", "select_target": [21, 16, 20], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1", "number_predicates": 0}, "prior_select": [["channel"], ["title"]], "prior_where_col": [[], []], "result": ["{\"data columns\": [\"title\"], \"data filters\": [{\"column\": \"category\", \"operator\": \"=\", \"value\": \"cartoon\"}]}", "{\"data columns\": [\"channel\"], \"data filters\": [{\"column\": \"category\", \"operator\": \"=\", \"value\": \"cartoon\"}, {\"column\": \"air date\", \"operator\": \"=\", \"value\": \"most recent\"}]}"], "pred_intent": "{\"data columns\": [\"production code\", \"channel\"], \"data filters\": [{\"column\": \"category\", \"operator\": \"=\", \"value\": \"cartoon\"}, {\"column\": \"air date\", \"operator\": \"=\", \"value\": \"most recent\"}]}"}, {"previous_utterances": [], "utterance": "What is the TV Channel of TV series \"A love of a lifetime\"?", "select_target": [10], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[9, "eq", "A Love of a Lifetime"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "number_predicates": 1}, "prior_select": [["weekly rank"], ["viewers m"], ["series name"]], "prior_where_col": [[["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"}, {"previous_utterances": ["What is the TV Channel of TV series \"A love of a lifetime\"?"], "utterance": "How may viewers does \"A love of a lifetime\" have?", "select_target": [10], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[9, "eq", "A Love of a Lifetime"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "number_predicates": 1}, "prior_select": [["weekly rank"], ["viewers m"], ["series name"]], "prior_where_col": [[["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]]], "result": ["{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"viewers m\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"}, {"previous_utterances": ["How may viewers does \"A love of a lifetime\" have?", "What is the TV Channel of TV series \"A love of a lifetime\"?"], "utterance": "How about the rating of \"A love of a lifetime?\"", "select_target": [10], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[9, "eq", "A Love of a Lifetime"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "number_predicates": 1}, "prior_select": [["weekly rank"], ["viewers m"], ["series name"]], "prior_where_col": [[["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]]], "result": ["{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}", "{\n    \"data columns\": [\"viewers m\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"rating\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"}, {"previous_utterances": ["How about the rating of \"A love of a lifetime?\"", "How may viewers does \"A love of a lifetime\" have?", "What is the TV Channel of TV series \"A love of a lifetime\"?"], "utterance": "And when was \"A love of a lifetime\" aired?", "select_target": [10], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[9, "eq", "A Love of a Lifetime"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT  Air_Date  FROM  TV_series  where Episode  =  \"A Love of a Lifetime\"", "number_predicates": 1}, "prior_select": [["weekly rank"], ["viewers m"], ["series name"]], "prior_where_col": [[["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]], [["eq", "episode", "A Love of a Lifetime"]]], "result": ["{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}", "{\n    \"data columns\": [\"viewers m\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}", "{\n    \"data columns\": [\"rating\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"air date\"],\n    \"data filters\": [{\n        \"column\": \"series name\",\n        \"operator\": \"=\",\n        \"value\": \"A love of a lifetime\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you please tell me the language used on the least number of TV Channels?", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name from tv_channel", "number_predicates": 0}, "prior_select": [["content"], ["content"], ["language"], ["language"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you please tell me the language used on the least number of TV Channels?"], "utterance": "What language is used on the most number of TV channels?", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name from tv_channel", "number_predicates": 0}, "prior_select": [["content"], ["content"], ["language"], ["language"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What language is used on the most number of TV channels?", "Can you please tell me the language used on the least number of TV Channels?"], "utterance": "What is the most common content of those TV channels?", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name from tv_channel", "number_predicates": 0}, "prior_select": [["content"], ["content"], ["language"], ["language"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"content\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"<language with most TV channels>\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the most common content of those TV channels?", "What language is used on the most number of TV channels?", "Can you please tell me the language used on the least number of TV Channels?"], "utterance": "What is the least common content?", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name from tv_channel", "number_predicates": 0}, "prior_select": [["content"], ["content"], ["language"], ["language"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"content\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"<language with most TV channels>\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"content\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"<language with least TV channels>\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the least common content?", "What is the most common content of those TV channels?", "What language is used on the most number of TV channels?", "Can you please tell me the language used on the least number of TV Channels?"], "utterance": "Can you please tell me the series name of those TV Channels?", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name from tv_channel", "number_predicates": 0}, "prior_select": [["content"], ["content"], ["language"], ["language"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"language\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"content\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"<language with most TV channels>\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"content\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"<language with least TV channels>\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"series name\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"=\",\n            \"value\": \"<language with least TV channels>\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "IN WHAT LANGUAGE SKY MUSIC AVAILABLE?", "select_target": [4], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT distinct  Content FROM TV_Channel", "number_predicates": 0}, "prior_select": [["package option"], ["language"]], "prior_where_col": [[], [["eq", "series name", "Sky Music"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"series name\",\n            \"operator\": \"=\",\n            \"value\": \"Sky Music\"\n        }\n    ]\n}"}, {"previous_utterances": ["IN WHAT LANGUAGE SKY MUSIC AVAILABLE?"], "utterance": "WHAT IS THE PACKAGE OPTION OF ALL CHANNELS?", "select_target": [4], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT distinct  Content FROM TV_Channel", "number_predicates": 0}, "prior_select": [["package option"], ["language"]], "prior_where_col": [[], [["eq", "series name", "Sky Music"]]], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"series name\",\n            \"operator\": \"=\",\n            \"value\": \"Sky Music\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"package option\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["WHAT IS THE PACKAGE OPTION OF ALL CHANNELS?", "IN WHAT LANGUAGE SKY MUSIC AVAILABLE?"], "utterance": "what is the content of all the channels?", "select_target": [4], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT distinct  Content FROM TV_Channel", "number_predicates": 0}, "prior_select": [["package option"], ["language"]], "prior_where_col": [[], [["eq", "series name", "Sky Music"]]], "result": ["{\n    \"data columns\": [\"language\"],\n    \"data filters\": [\n        {\n            \"column\": \"series name\",\n            \"operator\": \"=\",\n            \"value\": \"Sky Music\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"package option\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"content\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which country tv channels some cartoon written by todd casey?", "select_target": [18], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[17, "eq", "Enter the Outsiders!"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"", "number_predicates": 1}, "prior_select": [["title"], ["country"]], "prior_where_col": [[["eq", "written by", "Todd Casey"]], [["eq", "written by", "Todd Casey"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"country\", \"channel\", \"written by\"],\n  \"data filters\": [\n    {\n      \"column\": \"written by\",\n      \"operator\": \"=\",\n      \"value\": \"todd casey\"\n    }\n  ]\n}"}, {"previous_utterances": ["Which country tv channels some cartoon written by todd casey?"], "utterance": "What is the title of cartoon written by todd casey?", "select_target": [18], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[17, "eq", "Enter the Outsiders!"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"", "number_predicates": 1}, "prior_select": [["title"], ["country"]], "prior_where_col": [[["eq", "written by", "Todd Casey"]], [["eq", "written by", "Todd Casey"]]], "result": ["{\n  \"data columns\": [\"country\", \"channel\", \"written by\"],\n  \"data filters\": [\n    {\n      \"column\": \"written by\",\n      \"operator\": \"=\",\n      \"value\": \"todd casey\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"title\"],\n  \"data filters\": [\n    {\n      \"column\": \"written by\",\n      \"operator\": \"=\",\n      \"value\": \"todd casey\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the title of cartoon written by todd casey?", "Which country tv channels some cartoon written by todd casey?"], "utterance": "Who directed the cartoon titled enter the outsiders?", "select_target": [18], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[17, "eq", "Enter the Outsiders!"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT directed_by FROM cartoon WHERE title  =  \"Enter the Outsiders!\"", "number_predicates": 1}, "prior_select": [["title"], ["country"]], "prior_where_col": [[["eq", "written by", "Todd Casey"]], [["eq", "written by", "Todd Casey"]]], "result": ["{\n  \"data columns\": [\"country\", \"channel\", \"written by\"],\n  \"data filters\": [\n    {\n      \"column\": \"written by\",\n      \"operator\": \"=\",\n      \"value\": \"todd casey\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"title\"],\n  \"data filters\": [\n    {\n      \"column\": \"written by\",\n      \"operator\": \"=\",\n      \"value\": \"todd casey\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"directed by\"],\n  \"data filters\": [\n    {\n      \"column\": \"title\",\n      \"operator\": \"=\",\n      \"value\": \"enter the outsiders\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "List the cartoons that are directed by Ben Jones. | Here are the titles of cartoons that are directed by Ben Jones | List all tv channels with their id's.....", "select_target": [0, 16], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "number_predicates": 0}, "prior_select": [["series name"], ["channel", "id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"title\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        }\n    ]\n}"}, {"previous_utterances": ["List the cartoons that are directed by Ben Jones. | Here are the titles of cartoons that are directed by Ben Jones | List all tv channels with their id's....."], "utterance": "Is there any other tv channel other than italian language ?", "select_target": [0, 16], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "number_predicates": 0}, "prior_select": [["series name"], ["channel", "id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"title\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"Italian\"\n        }\n    ]\n}"}, {"previous_utterances": ["Is there any other tv channel other than italian language ?", "List the cartoons that are directed by Ben Jones. | Here are the titles of cartoons that are directed by Ben Jones | List all tv channels with their id's....."], "utterance": "Find the id of tv channels that do not play any cartoon directed by Ben Jones.", "select_target": [0, 16], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "number_predicates": 0}, "prior_select": [["series name"], ["channel", "id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"title\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [\n        {\n            \"column\": \"language\",\n            \"operator\": \"!=\",\n            \"value\": \"Italian\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"!=\",\n            \"value\": \"Ben Jones\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Which TV channels do not play any cartoons by Ben Jones?  List the ids.", "select_target": [17], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[18, "eq", "Ben Jones"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'", "number_predicates": 1}, "prior_select": [["id"], ["id", "channel"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"directed by\",\n        \"operator\": \"!=\",\n        \"value\": \"Ben Jones\"\n    }]\n}"}, {"previous_utterances": ["Which TV channels do not play any cartoons by Ben Jones?  List the ids."], "utterance": "And which channels play Ben Jones's cartoons?", "select_target": [17], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[18, "eq", "Ben Jones"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'", "number_predicates": 1}, "prior_select": [["id"], ["id", "channel"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"directed by\",\n        \"operator\": \"!=\",\n        \"value\": \"Ben Jones\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [{\n        \"column\": \"directed by\",\n        \"operator\": \"=\",\n        \"value\": \"Ben Jones\"\n    }]\n}"}, {"previous_utterances": ["And which channels play Ben Jones's cartoons?", "Which TV channels do not play any cartoons by Ben Jones?  List the ids."], "utterance": "What cartoon titles do channels play?", "select_target": [17], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[18, "eq", "Ben Jones"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Title FROM Cartoon where directed_by   =   'Ben Jones'", "number_predicates": 1}, "prior_select": [["id"], ["id", "channel"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"directed by\",\n        \"operator\": \"!=\",\n        \"value\": \"Ben Jones\"\n    }]\n}", "{\n    \"data columns\": [\"channel\"],\n    \"data filters\": [{\n        \"column\": \"directed by\",\n        \"operator\": \"=\",\n        \"value\": \"Ben Jones\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"channel\", \"title\"],\n    \"data filters\": [{\n        \"column\": \"directed by\",\n        \"operator\": \"=\",\n        \"value\": \"Ben Jones\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "find id of the tv channels that are from countries with more than two tv channels", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name FROM tv_channel order by series_name asc", "number_predicates": 0}, "prior_select": [["package option"], ["id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \">\",\n        \"value\": \"2\"\n    }]\n}"}, {"previous_utterances": ["find id of the tv channels that are from countries with more than two tv channels"], "utterance": "What is the package option for that channel?", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name FROM tv_channel order by series_name asc", "number_predicates": 0}, "prior_select": [["package option"], ["id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \">\",\n        \"value\": \"2\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"package option\"],\n    \"data filters\": [{\n        \"column\": \"channel\",\n        \"operator\": \"=\",\n        \"value\": \"TV Channel ID\"\n    }]\n}"}, {"previous_utterances": ["What is the package option for that channel?", "find id of the tv channels that are from countries with more than two tv channels"], "utterance": "List all series names in alphabetical order", "select_target": [1], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT series_name FROM tv_channel order by series_name asc", "number_predicates": 0}, "prior_select": [["package option"], ["id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \">\",\n        \"value\": \"2\"\n    }]\n}", "{\n    \"data columns\": [\"package option\"],\n    \"data filters\": [{\n        \"column\": \"channel\",\n        \"operator\": \"=\",\n        \"value\": \"TV Channel ID\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"series name\"],\n    \"data filters\": [],\n    \"sort\": {\n        \"column\": \"series name\",\n        \"order\": \"asc\"\n    }\n}"}, {"previous_utterances": [], "utterance": "Which titles were directed by Ben Jones or Brandon Vietti?", "select_target": [17, 19], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[18, "eq", "Ben Jones"], [18, "eq", "Brandon Vietti"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "number_predicates": 2}, "prior_select": [["title", "original air date"], ["title"]], "prior_where_col": [[["eq", "directed by", "Ben Jones"], ["eq", "directed by", "Brandon Vietti"]], [["eq", "directed by", "Ben Jones"], ["eq", "directed by", "Brandon Vietti"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"title\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        },\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Brandon Vietti\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which titles were directed by Ben Jones or Brandon Vietti?"], "utterance": "What are their original air dates?", "select_target": [17, 19], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[18, "eq", "Ben Jones"], [18, "eq", "Brandon Vietti"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "number_predicates": 2}, "prior_select": [["title", "original air date"], ["title"]], "prior_where_col": [[["eq", "directed by", "Ben Jones"], ["eq", "directed by", "Brandon Vietti"]], [["eq", "directed by", "Ben Jones"], ["eq", "directed by", "Brandon Vietti"]]], "result": ["{\n    \"data columns\": [\"title\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        },\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Brandon Vietti\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        },\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Brandon Vietti\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are their original air dates?", "Which titles were directed by Ben Jones or Brandon Vietti?"], "utterance": "Who are the writers of these cartoons?", "select_target": [17, 19], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[18, "eq", "Ben Jones"], [18, "eq", "Brandon Vietti"]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  \"Ben Jones\" OR Directed_by  =  \"Brandon Vietti\"", "number_predicates": 2}, "prior_select": [["title", "original air date"], ["title"]], "prior_where_col": [[["eq", "directed by", "Ben Jones"], ["eq", "directed by", "Brandon Vietti"]], [["eq", "directed by", "Ben Jones"], ["eq", "directed by", "Brandon Vietti"]]], "result": ["{\n    \"data columns\": [\"title\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        },\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Brandon Vietti\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"title\", \"original air date\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        },\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Brandon Vietti\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"title\", \"directed by\", \"written by\"],\n    \"data filters\": [\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Ben Jones\"\n        },\n        {\n            \"column\": \"directed by\",\n            \"operator\": \"=\",\n            \"value\": \"Brandon Vietti\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many TV Channels there", "select_target": [17], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[0, "eq", 2.0]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT title FROM Cartoon where id = 2.0", "number_predicates": 1}, "prior_select": [["language"], ["*"]], "prior_where_col": [[["eq", "series name", "Sky Music"]], []], "result": [], "pred_intent": "{\n\"data columns\": [\"channel\"]\n}"}, {"previous_utterances": ["how many TV Channels there"], "utterance": "what is the language of sky music", "select_target": [17], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[0, "eq", 2.0]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT title FROM Cartoon where id = 2.0", "number_predicates": 1}, "prior_select": [["language"], ["*"]], "prior_where_col": [[["eq", "series name", "Sky Music"]], []], "result": ["{\n\"data columns\": [\"channel\"]\n}"], "pred_intent": "{\n\"data columns\": [\"language\"],\n\"data filters\": [\n{\n\"column\": \"series name\",\n\"operator\": \"=\",\n\"value\": \"sky music\"\n}\n]\n}"}, {"previous_utterances": ["what is the language of sky music", "how many TV Channels there"], "utterance": "what is the title of id 2.0", "select_target": [17], "column_names": ["id", "series name", "country", "language", "content", "pixel aspect ratio par", "hight definition tv", "pay per view ppv", "package option", "episode", "air date", "rating", "share", "18 49 rating share", "viewers m", "weekly rank", "channel", "title", "directed by", "written by", "original air date", "production code", "*"], "where_clauses": [[0, "eq", 2.0]], "debug_info": {"where_categorization": -1, "db_id": "tvshow", "raw_sql": "SELECT title FROM Cartoon where id = 2.0", "number_predicates": 1}, "prior_select": [["language"], ["*"]], "prior_where_col": [[["eq", "series name", "Sky Music"]], []], "result": ["{\n\"data columns\": [\"channel\"]\n}", "{\n\"data columns\": [\"language\"],\n\"data filters\": [\n{\n\"column\": \"series name\",\n\"operator\": \"=\",\n\"value\": \"sky music\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"title\"],\n\"data filters\": [\n{\n\"column\": \"id\",\n\"operator\": \"=\",\n\"value\": \"2.0\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "Show the names of all the battles.", "select_target": [2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[5, "eq", "Bulgarian victory"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "number_predicates": 1}, "prior_select": [["name", "result", "bulgarian commander"], ["name", "result"], ["name"], ["name", "bulgarian commander"], ["name"]], "prior_where_col": [[], [], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Show the names of all the battles."], "utterance": "Show the names of all the battles and their Bulgarian commanders.", "select_target": [2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[5, "eq", "Bulgarian victory"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "number_predicates": 1}, "prior_select": [["name", "result", "bulgarian commander"], ["name", "result"], ["name"], ["name", "bulgarian commander"], ["name"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"bulgarian commander\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Show the names of all the battles and their Bulgarian commanders.", "Show the names of all the battles."], "utterance": "Show the names of all the battles with no ships lost in the English Channel.", "select_target": [2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[5, "eq", "Bulgarian victory"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "number_predicates": 1}, "prior_select": [["name", "result", "bulgarian commander"], ["name", "result"], ["name"], ["name", "bulgarian commander"], ["name"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"bulgarian commander\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": ["Show the names of all the battles with no ships lost in the English Channel.", "Show the names of all the battles and their Bulgarian commanders.", "Show the names of all the battles."], "utterance": "Show the names and results of all battles with no ships lost in the English channel.", "select_target": [2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[5, "eq", "Bulgarian victory"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "number_predicates": 1}, "prior_select": [["name", "result", "bulgarian commander"], ["name", "result"], ["name"], ["name", "bulgarian commander"], ["name"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"bulgarian commander\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"result\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": ["Show the names and results of all battles with no ships lost in the English channel.", "Show the names of all the battles with no ships lost in the English Channel.", "Show the names of all the battles and their Bulgarian commanders.", "Show the names of all the battles."], "utterance": "Show the names,results, and Bulgarian commanders of all battles with no ships lost in the English channel.", "select_target": [2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[5, "eq", "Bulgarian victory"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "number_predicates": 1}, "prior_select": [["name", "result", "bulgarian commander"], ["name", "result"], ["name"], ["name", "bulgarian commander"], ["name"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"bulgarian commander\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"result\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"result\", \"bulgarian commander\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": ["Show the names,results, and Bulgarian commanders of all battles with no ships lost in the English channel.", "Show the names and results of all battles with no ships lost in the English channel.", "Show the names of all the battles with no ships lost in the English Channel.", "Show the names of all the battles and their Bulgarian commanders.", "Show the names of all the battles."], "utterance": "What are the dates of all the battles with the result of Bulgarian victory.", "select_target": [2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[5, "eq", "Bulgarian victory"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT date FROM battle WHERE result  =  \"Bulgarian victory\"", "number_predicates": 1}, "prior_select": [["name", "result", "bulgarian commander"], ["name", "result"], ["name"], ["name", "bulgarian commander"], ["name"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"bulgarian commander\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"result\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"result\", \"bulgarian commander\"],\n    \"data filters\": [\n        {\n            \"column\": \"location\",\n            \"operator\": \"=\",\n            \"value\": \"English Channel\"\n        },\n        {\n            \"column\": \"lost in battle\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"date\"],\n    \"data filters\": [\n        {\n            \"column\": \"result\",\n            \"operator\": \"=\",\n            \"value\": \"Bulgarian victory\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many ships are there?", "select_target": [1], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  name  from ship", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many ships are there?"], "utterance": "what are their names?", "select_target": [1], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  name  from ship", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Hi there!  Can you show me a list of all of the battle ids and the corresponding battle names?", "select_target": [0, 1, 2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10", "number_predicates": 0}, "prior_select": [["id", "name"], ["id", "name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hi there!  Can you show me a list of all of the battle ids and the corresponding battle names?"], "utterance": "Great!  Can you filter this list to show just the battle IDs and battle names of the battles that had more than 10 deaths associated with them?", "select_target": [0, 1, 2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10", "number_predicates": 0}, "prior_select": [["id", "name"], ["id", "name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"killed\",\n            \"operator\": \">\",\n            \"value\": \"10\"\n        }\n    ]\n}"}, {"previous_utterances": ["Great!  Can you filter this list to show just the battle IDs and battle names of the battles that had more than 10 deaths associated with them?", "Hi there!  Can you show me a list of all of the battle ids and the corresponding battle names?"], "utterance": "Wonderful!  Can you update this list to include the date of each of these three battles?", "select_target": [0, 1, 2], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10", "number_predicates": 0}, "prior_select": [["id", "name"], ["id", "name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"id\", \"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"killed\",\n            \"operator\": \">\",\n            \"value\": \"10\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"name\", \"date\"],\n    \"data filters\": [\n        {\n            \"column\": \"killed\",\n            \"operator\": \">\",\n            \"value\": \"10\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are the death situations caused by the ship with tonnage 't' ?", "select_target": [0], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[7, "eq", "t"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "number_predicates": 1}, "prior_select": [["injured"], ["killed"]], "prior_where_col": [[["eq", "tonnage", "t"]], [["eq", "tonnage", "t"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"killed\", \"injured\"],\n    \"data filters\": [\n    {\n        \"column\": \"tonnage\",\n        \"operator\": \"=\",\n        \"value\": \"t\"\n    }\n    ]\n}"}, {"previous_utterances": ["What are the death situations caused by the ship with tonnage 't' ?"], "utterance": "What are the injury situations caused by the ship with tonnage 't' ?", "select_target": [0], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[7, "eq", "t"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "number_predicates": 1}, "prior_select": [["injured"], ["killed"]], "prior_where_col": [[["eq", "tonnage", "t"]], [["eq", "tonnage", "t"]]], "result": ["{\n    \"data columns\": [\"killed\", \"injured\"],\n    \"data filters\": [\n    {\n        \"column\": \"tonnage\",\n        \"operator\": \"=\",\n        \"value\": \"t\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"injured\"],\n    \"data filters\": [\n    {\n        \"column\": \"tonnage\",\n        \"operator\": \"=\",\n        \"value\": \"t\"\n    }\n    ]\n}"}, {"previous_utterances": ["What are the injury situations caused by the ship with tonnage 't' ?", "What are the death situations caused by the ship with tonnage 't' ?"], "utterance": "Tell me the total number of death and injury situations caused by the ship with tonnage 't'..", "select_target": [0], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[7, "eq", "t"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "number_predicates": 1}, "prior_select": [["injured"], ["killed"]], "prior_where_col": [[["eq", "tonnage", "t"]], [["eq", "tonnage", "t"]]], "result": ["{\n    \"data columns\": [\"killed\", \"injured\"],\n    \"data filters\": [\n    {\n        \"column\": \"tonnage\",\n        \"operator\": \"=\",\n        \"value\": \"t\"\n    }\n    ]\n}", "{\n    \"data columns\": [\"injured\"],\n    \"data filters\": [\n    {\n        \"column\": \"tonnage\",\n        \"operator\": \"=\",\n        \"value\": \"t\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"sum(killed) as total_deaths\", \"sum(injured) as total_injuries\"],\n    \"data filters\": [\n        {\n            \"column\": \"tonnage\",\n            \"operator\": \"=\",\n            \"value\": \"t\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many death events are there?", "select_target": [15], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT * FROM death where note like \"%East%\"", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "killed", "killed"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"killed\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many death events are there?"], "utterance": "Which event has the most deaths? | What information do you need? all the information of this event or some specific information, like the note? | Which death event has the highest number killed?", "select_target": [15], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT * FROM death where note like \"%East%\"", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "killed", "killed"]], []], "result": ["{\n    \"data columns\": [\"killed\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"*\"],\n    \"data filters\": [\n    {\n        \"column\": \"killed\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }\n    ]\n}"}, {"previous_utterances": ["Which event has the most deaths? | What information do you need? all the information of this event or some specific information, like the note? | Which death event has the highest number killed?", "How many death events are there?"], "utterance": "Yes, please list them", "select_target": [15], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT * FROM death where note like \"%East%\"", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "killed", "killed"]], []], "result": ["{\n    \"data columns\": [\"killed\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"*\"],\n    \"data filters\": [\n    {\n        \"column\": \"killed\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"name\", \"date\", \"bulgarian commander\", \"latin commander\", \"result\", \"lost in battle\", \"tonnage\", \"ship type\", \"location\", \"disposition of ship\", \"caused by ship id\", \"note\", \"killed\", \"injured\"],\n    \"data filters\": [\n    {\n        \"column\": \"killed\",\n        \"operator\": \">\",\n        \"value\": \"0\"\n    }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Can you please show the names of the battles that had no ships lost in the 'English Channel'?", "select_target": [4], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "number_predicates": 0}, "prior_select": [["date"], ["bulgarian commander"], ["result"], ["name"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"}, {"previous_utterances": ["Can you please show the names of the battles that had no ships lost in the 'English Channel'?"], "utterance": "What are the results of those battles?", "select_target": [4], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "number_predicates": 0}, "prior_select": [["date"], ["bulgarian commander"], ["result"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"], "pred_intent": "{\"data columns\": [\"name\", \"result\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"}, {"previous_utterances": ["What are the results of those battles?", "Can you please show the names of the battles that had no ships lost in the 'English Channel'?"], "utterance": "Who are the Bulgarian commanders of those battles, please?", "select_target": [4], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "number_predicates": 0}, "prior_select": [["date"], ["bulgarian commander"], ["result"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}", "{\"data columns\": [\"name\", \"result\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"], "pred_intent": "{\"data columns\": [\"name\", \"result\", \"bulgarian commander\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"}, {"previous_utterances": ["Who are the Bulgarian commanders of those battles, please?", "What are the results of those battles?", "Can you please show the names of the battles that had no ships lost in the 'English Channel'?"], "utterance": "What were the dates of those battles?", "select_target": [4], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "number_predicates": 0}, "prior_select": [["date"], ["bulgarian commander"], ["result"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}", "{\"data columns\": [\"name\", \"result\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}", "{\"data columns\": [\"name\", \"result\", \"bulgarian commander\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"], "pred_intent": "{\"data columns\": [\"name\", \"result\", \"bulgarian commander\", \"date\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"}, {"previous_utterances": ["What were the dates of those battles?", "Who are the Bulgarian commanders of those battles, please?", "What are the results of those battles?", "Can you please show the names of the battles that had no ships lost in the 'English Channel'?"], "utterance": "Who were the latin commanders of those battles?", "select_target": [4], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ", "number_predicates": 0}, "prior_select": [["date"], ["bulgarian commander"], ["result"], ["name"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}", "{\"data columns\": [\"name\", \"result\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}", "{\"data columns\": [\"name\", \"result\", \"bulgarian commander\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}", "{\"data columns\": [\"name\", \"result\", \"bulgarian commander\", \"date\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"], "pred_intent": "{\"data columns\": [\"name\", \"result\", \"bulgarian commander\", \"date\", \"latin commander\"],\n\"data filters\": [{\n\"column\": \"lost in battle\",\n\"operator\": \"=\",\n\"value\": \"0\"\n},\n{\n\"column\": \"location\",\n\"operator\": \"=\",\n\"value\": \"English Channel\"\n}]\n}"}, {"previous_utterances": [], "utterance": "How many battles did not lose any ship with tonnage 225?", "select_target": [5], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"]], "prior_where_col": [[["eq", "tonnage", "225"]], [], []], "result": [], "pred_intent": "{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \"=\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}"}, {"previous_utterances": ["How many battles did not lose any ship with tonnage 225?"], "utterance": "How many battles did lose a ship with tonnage 225?", "select_target": [5], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"]], "prior_where_col": [[["eq", "tonnage", "225"]], [], []], "result": ["{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \"=\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}"], "pred_intent": "{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \">\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}"}, {"previous_utterances": ["How many battles did lose a ship with tonnage 225?", "How many battles did not lose any ship with tonnage 225?"], "utterance": "How many ships have a tonnage of 225?", "select_target": [5], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"]], "prior_where_col": [[["eq", "tonnage", "225"]], [], []], "result": ["{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \"=\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}", "{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \">\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}"], "pred_intent": "{\"data columns\": [\"count\"], \"data filters\": [{\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}"}, {"previous_utterances": ["How many ships have a tonnage of 225?", "How many battles did lose a ship with tonnage 225?", "How many battles did not lose any ship with tonnage 225?"], "utterance": "Who won in the battle when the ship with a tonnage of 225 was sunk?", "select_target": [5], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"], ["*"]], "prior_where_col": [[["eq", "tonnage", "225"]], [], []], "result": ["{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \"=\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}", "{\"data columns\": [\"id\", \"name\"], \"data filters\": [{\"column\": \"lost in battle\", \"operator\": \">\", \"value\": \"0\"}, {\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}", "{\"data columns\": [\"count\"], \"data filters\": [{\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}]}"], "pred_intent": "{\"data columns\": [\"bulgarian commander\", \"latin commander\", \"result\"], \"data filters\": [{\"column\": \"tonnage\", \"operator\": \"=\", \"value\": \"225\"}, {\"column\": \"result\", \"operator\": \"=\", \"value\": \"defeat\"}]}"}, {"previous_utterances": [], "utterance": "What is the Latin commander of Battle of Serres?", "select_target": [1], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[4, "eq", "Baldwin I"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"", "number_predicates": 1}, "prior_select": [["bulgarian commander"], ["result"], ["latin commander"]], "prior_where_col": [[["eq", "date", "June 1205"]], [["eq", "date", "31 January 1206"]], [["eq", "name", "Battle of Serres"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"latin commander\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Battle of Serres\"\n}]\n}"}, {"previous_utterances": ["What is the Latin commander of Battle of Serres?"], "utterance": "What is the result of 31st January 1206?", "select_target": [1], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[4, "eq", "Baldwin I"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"", "number_predicates": 1}, "prior_select": [["bulgarian commander"], ["result"], ["latin commander"]], "prior_where_col": [[["eq", "date", "June 1205"]], [["eq", "date", "31 January 1206"]], [["eq", "name", "Battle of Serres"]]], "result": ["{\n\"data columns\": [\"latin commander\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Battle of Serres\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"result\"],\n\"data filters\": [{\n\"column\": \"date\",\n\"operator\": \"=\",\n\"value\": \"31st January 1206\"\n}]\n}"}, {"previous_utterances": ["What is the result of 31st January 1206?", "What is the Latin commander of Battle of Serres?"], "utterance": "Who is the Bulgarian commander on June 1205?", "select_target": [1], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[4, "eq", "Baldwin I"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"", "number_predicates": 1}, "prior_select": [["bulgarian commander"], ["result"], ["latin commander"]], "prior_where_col": [[["eq", "date", "June 1205"]], [["eq", "date", "31 January 1206"]], [["eq", "name", "Battle of Serres"]]], "result": ["{\n\"data columns\": [\"latin commander\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Battle of Serres\"\n}]\n}", "{\n\"data columns\": [\"result\"],\n\"data filters\": [{\n\"column\": \"date\",\n\"operator\": \"=\",\n\"value\": \"31st January 1206\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"bulgarian commander\"],\n\"data filters\": [{\n\"column\": \"date\",\n\"operator\": \"=\",\n\"value\": \"June 1205\"\n}]\n}"}, {"previous_utterances": ["Who is the Bulgarian commander on June 1205?", "What is the result of 31st January 1206?", "What is the Latin commander of Battle of Serres?"], "utterance": "What is the name of battle who has Latin commander is Baldwin 1?", "select_target": [1], "column_names": ["id", "name", "date", "bulgarian commander", "latin commander", "result", "lost in battle", "tonnage", "ship type", "location", "disposition of ship", "caused by ship id", "note", "killed", "injured", "*"], "where_clauses": [[4, "eq", "Baldwin I"]], "debug_info": {"where_categorization": -1, "db_id": "battle_death", "raw_sql": "SELECT name FROM battle WHERE latin_commander  =  \"Baldwin I\"", "number_predicates": 1}, "prior_select": [["bulgarian commander"], ["result"], ["latin commander"]], "prior_where_col": [[["eq", "date", "June 1205"]], [["eq", "date", "31 January 1206"]], [["eq", "name", "Battle of Serres"]]], "result": ["{\n\"data columns\": [\"latin commander\"],\n\"data filters\": [{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Battle of Serres\"\n}]\n}", "{\n\"data columns\": [\"result\"],\n\"data filters\": [{\n\"column\": \"date\",\n\"operator\": \"=\",\n\"value\": \"31st January 1206\"\n}]\n}", "{\n\"data columns\": [\"bulgarian commander\"],\n\"data filters\": [{\n\"column\": \"date\",\n\"operator\": \"=\",\n\"value\": \"June 1205\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"latin commander\",\n\"operator\": \"=\",\n\"value\": \"Baldwin 1\"\n}]\n}"}, {"previous_utterances": [], "utterance": "how many course id numbers", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[2, "eq", "Math"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "number_predicates": 1}, "prior_select": [["teacher id"], ["course"], ["course id"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many course id numbers"], "utterance": "what are the courses", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[2, "eq", "Math"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "number_predicates": 1}, "prior_select": [["teacher id"], ["course"], ["course id"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"course\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what are the courses", "how many course id numbers"], "utterance": "great, how many teachers available to conduct the course", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[2, "eq", "Math"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "number_predicates": 1}, "prior_select": [["teacher id"], ["course"], ["course id"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"course\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"teacher id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["great, how many teachers available to conduct the course", "what are the courses", "how many course id numbers"], "utterance": "which teacher takes math class", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[2, "eq", "Math"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   \"Math\"", "number_predicates": 1}, "prior_select": [["teacher id"], ["course"], ["course id"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"course\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"teacher id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"teacher id\", \"course\"],\n    \"data filters\": [{\n        \"column\": \"course\",\n        \"operator\": \"=\",\n        \"value\": \"math\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What're the names of the teachers who teach two or more courses?", "select_target": [7], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1", "number_predicates": 0}, "prior_select": [["age", "hometown"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What're the names of the teachers who teach two or more courses?"], "utterance": "What is her age and hometown?", "select_target": [7], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1", "number_predicates": 0}, "prior_select": [["age", "hometown"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"age\", \"hometown\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"her\"\n    }]\n}"}, {"previous_utterances": ["What is her age and hometown?", "What're the names of the teachers who teach two or more courses?"], "utterance": "What grade does the oldest teacher teach?", "select_target": [7], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1", "number_predicates": 0}, "prior_select": [["age", "hometown"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"age\", \"hometown\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"her\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \">\",\n        \"value\": \"oldest\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Who is the youngest teacher?", "select_target": [5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[4, "eq", "Vicente Carretero"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "select Age from teacher where Name = 'Vicente Carretero'", "number_predicates": 1}, "prior_select": [["hometown"], ["name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Who is the youngest teacher?"], "utterance": "What is his hometown?", "select_target": [5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[4, "eq", "Vicente Carretero"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "select Age from teacher where Name = 'Vicente Carretero'", "number_predicates": 1}, "prior_select": [["hometown"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\", \"hometown\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is his hometown?", "Who is the youngest teacher?"], "utterance": "What is the age of Vicente Carretero?", "select_target": [5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[4, "eq", "Vicente Carretero"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "select Age from teacher where Name = 'Vicente Carretero'", "number_predicates": 1}, "prior_select": [["hometown"], ["name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"age\", \"hometown\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Vicente Carretero\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "list the name of the teachers and the courses assigned for them to teach", "select_target": [4, 2, 3], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name", "number_predicates": 0}, "prior_select": [["name", "course"], ["name", "course"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["list the name of the teachers and the courses assigned for them to teach"], "utterance": "arrange this list with the teachers name in ascending order", "select_target": [4, 2, 3], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name", "number_predicates": 0}, "prior_select": [["name", "course"], ["name", "course"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": [],\n    \"sort order\": {\n        \"column\": \"name\",\n        \"order\": \"ascending\"\n    }\n}"}, {"previous_utterances": ["arrange this list with the teachers name in ascending order", "list the name of the teachers and the courses assigned for them to teach"], "utterance": "include teachers id in tha same list", "select_target": [4, 2, 3], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name", "number_predicates": 0}, "prior_select": [["name", "course"], ["name", "course"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": [],\n    \"sort order\": {\n        \"column\": \"name\",\n        \"order\": \"ascending\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"teacher id\", \"name\", \"course\"],\n    \"data filters\": [],\n    \"sort order\": {\n        \"column\": \"name\",\n        \"order\": \"ascending\"\n    }\n}"}, {"previous_utterances": [], "utterance": "Can you show me the names of teachers with the course id for the courses they teach?", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[5, "lt", 30]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT name from teacher where age < 30", "number_predicates": 1}, "prior_select": [["name", "*"], ["name", "course id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"course id\", \"name\"]\n}"}, {"previous_utterances": ["Can you show me the names of teachers with the course id for the courses they teach?"], "utterance": "Show me the teacher id with the number of courses they teach.", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[5, "lt", 30]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT name from teacher where age < 30", "number_predicates": 1}, "prior_select": [["name", "*"], ["name", "course id"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"course id\", \"name\"]\n}"], "pred_intent": "{\n\"data columns\": [\"teacher id\", \"course\"]\n}"}, {"previous_utterances": ["Show me the teacher id with the number of courses they teach.", "Can you show me the names of teachers with the course id for the courses they teach?"], "utterance": "I want to know the names of the teachers below age 30.", "select_target": [4], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[5, "lt", 30]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT name from teacher where age < 30", "number_predicates": 1}, "prior_select": [["name", "*"], ["name", "course id"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"course id\", \"name\"]\n}", "{\n\"data columns\": [\"teacher id\", \"course\"]\n}"], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [{\n\"column\": \"age\",\n\"operator\": \"<\",\n\"value\": \"30\"\n}]\n}"}, {"previous_utterances": [], "utterance": "Show the name of the teacher for the math course please?", "select_target": [1], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[2, "eq", "Math"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"", "number_predicates": 1}, "prior_select": [["name"]], "prior_where_col": [[["eq", "course", "Math"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"course\",\n        \"operator\": \"=\",\n        \"value\": \"math\"\n    }]\n}"}, {"previous_utterances": ["Show the name of the teacher for the math course please?"], "utterance": "What grades do they teach? | The   grades  of courses that the teachers for the math teach are 1 and 3 | What dates do those courses start?", "select_target": [1], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [[2, "eq", "Math"]], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  \"Math\"", "number_predicates": 1}, "prior_select": [["name"]], "prior_where_col": [[["eq", "course", "Math"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"course\",\n        \"operator\": \"=\",\n        \"value\": \"math\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"grade\", \"staring date\"],\n    \"data filters\": [{\n        \"column\": \"course\",\n        \"operator\": \"=\",\n        \"value\": \"math\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many teachers are there?", "select_target": [4, 5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT Name , age FROM teacher", "number_predicates": 0}, "prior_select": [["name", "*"], ["*"], ["*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"teacher id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many teachers are there?"], "utterance": "How many courses do you have?", "select_target": [4, 5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT Name , age FROM teacher", "number_predicates": 0}, "prior_select": [["name", "*"], ["*"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"teacher id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many courses do you have?", "How many teachers are there?"], "utterance": "Can you tell me the names of teachers and the number of courses they teach?", "select_target": [4, 5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT Name , age FROM teacher", "number_predicates": 0}, "prior_select": [["name", "*"], ["*"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"teacher id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you tell me the names of teachers and the number of courses they teach?", "How many courses do you have?", "How many teachers are there?"], "utterance": "Sure. Can you tell me the age of each teacher?", "select_target": [4, 5], "column_names": ["course id", "staring date", "course", "teacher id", "name", "age", "hometown", "grade", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "course_teach", "raw_sql": "SELECT Name , age FROM teacher", "number_predicates": 0}, "prior_select": [["name", "*"], ["*"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"teacher id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"course id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\", \"course\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Hi there! Can you tell me how many different professional IDs are on this list?", "select_target": [29, 10, 7], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5", "number_predicates": 0}, "prior_select": [["professional id", "first name", "treatment type code"], ["professional id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hi there! Can you tell me how many different professional IDs are on this list?"], "utterance": "Great!  Could you update this list to include both the first names and treatment type codes for each of these professionals IDs? | Do you want the ids, first name for all professionals, along with the type codes of the treatment they have done? | Yes please!", "select_target": [29, 10, 7], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5", "number_predicates": 0}, "prior_select": [["professional id", "first name", "treatment type code"], ["professional id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"professional id\", \"first name\", \"treatment type code\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Great!  Could you update this list to include both the first names and treatment type codes for each of these professionals IDs? | Do you want the ids, first name for all professionals, along with the type codes of the treatment they have done? | Yes please!", "Hi there! Can you tell me how many different professional IDs are on this list?"], "utterance": "Excellent!  Can you filter this list to show me just the entries for the 5 most recent treatments?", "select_target": [29, 10, 7], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5", "number_predicates": 0}, "prior_select": [["professional id", "first name", "treatment type code"], ["professional id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"professional id\", \"first name\", \"treatment type code\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"professional id\", \"first name\", \"treatment type code\"],\n    \"data filters\": [{\n        \"column\": \"date of treatment\",\n        \"operator\": \">\",\n        \"value\": \"5\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "List the first name of professionals", "select_target": [10, 8], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code", "number_predicates": 0}, "prior_select": [["first name", "treatment type description"], ["first name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"first name\"]\n}"}, {"previous_utterances": ["List the first name of professionals"], "utterance": "List the first name of professionals along with the description", "select_target": [10, 8], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code", "number_predicates": 0}, "prior_select": [["first name", "treatment type description"], ["first name"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"first name\"]\n}"], "pred_intent": "{\n  \"data columns\": [\"first name\", \"role code\"]\n}"}, {"previous_utterances": ["List the first name of professionals along with the description", "List the first name of professionals"], "utterance": "List the first name of professionals along with the description of the treatment they have done?", "select_target": [10, 8], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code", "number_predicates": 0}, "prior_select": [["first name", "treatment type description"], ["first name"]], "prior_where_col": [[], []], "result": ["{\n  \"data columns\": [\"first name\"]\n}", "{\n  \"data columns\": [\"first name\", \"role code\"]\n}"], "pred_intent": "{\n  \"data columns\": [\"first name\", \"treatment type description\"]\n}"}, {"previous_utterances": [], "utterance": "Which states have professionals living there?", "select_target": [14, 14], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "number_predicates": 0}, "prior_select": [["state"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"state\"],\n    \"data filters\": [\n    {\n    \"column\": \"role code\",\n    \"operator\": \"=\",\n    \"value\": \"professional\"\n    }]\n}"}, {"previous_utterances": ["Which states have professionals living there?"], "utterance": "May I have a list of states that has both owners and professionals living there?", "select_target": [14, 14], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "number_predicates": 0}, "prior_select": [["state"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"state\"],\n    \"data filters\": [\n    {\n    \"column\": \"role code\",\n    \"operator\": \"=\",\n    \"value\": \"professional\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"state\"],\n    \"data filters\": [\n    {\n    \"column\": \"role code\",\n    \"operator\": \"IN\",\n    \"value\": [\"owner\", \"professional\"]\n    }]\n}"}, {"previous_utterances": [], "utterance": "can you tell me the email id of the owner id ? | Do you mean all owner id and all email address? | owner id 1", "select_target": [9, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["weight"], ["email address"]], "prior_where_col": [[["eq", "dog id", 1]], [["eq", "dog id", 1]], [["eq", "owner id", 1]]], "result": [], "pred_intent": "{\n\"data columns\": [\"owner id\", \"email address\"],\n\"data filters\": [\n{\n\"column\": \"owner id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"}, {"previous_utterances": ["can you tell me the email id of the owner id ? | Do you mean all owner id and all email address? | owner id 1"], "utterance": "what is the weight of dog id 1 ?", "select_target": [9, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["weight"], ["email address"]], "prior_where_col": [[["eq", "dog id", 1]], [["eq", "dog id", 1]], [["eq", "owner id", 1]]], "result": ["{\n\"data columns\": [\"owner id\", \"email address\"],\n\"data filters\": [\n{\n\"column\": \"owner id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"dog id\", \"weight\"],\n\"data filters\": [\n{\n\"column\": \"dog id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"}, {"previous_utterances": ["what is the weight of dog id 1 ?", "can you tell me the email id of the owner id ? | Do you mean all owner id and all email address? | owner id 1"], "utterance": "Can you tell me age of dog id 1 ?", "select_target": [9, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["weight"], ["email address"]], "prior_where_col": [[["eq", "dog id", 1]], [["eq", "dog id", 1]], [["eq", "owner id", 1]]], "result": ["{\n\"data columns\": [\"owner id\", \"email address\"],\n\"data filters\": [\n{\n\"column\": \"owner id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}", "{\n\"data columns\": [\"dog id\", \"weight\"],\n\"data filters\": [\n{\n\"column\": \"dog id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"dog id\", \"age\"],\n\"data filters\": [\n{\n\"column\": \"dog id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"}, {"previous_utterances": ["Can you tell me age of dog id 1 ?", "what is the weight of dog id 1 ?", "can you tell me the email id of the owner id ? | Do you mean all owner id and all email address? | owner id 1"], "utterance": "Which owner has paid for the most treatments on his or her dogs ? List the owner id and last name.", "select_target": [9, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["age"], ["weight"], ["email address"]], "prior_where_col": [[["eq", "dog id", 1]], [["eq", "dog id", 1]], [["eq", "owner id", 1]]], "result": ["{\n\"data columns\": [\"owner id\", \"email address\"],\n\"data filters\": [\n{\n\"column\": \"owner id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}", "{\n\"data columns\": [\"dog id\", \"weight\"],\n\"data filters\": [\n{\n\"column\": \"dog id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}", "{\n\"data columns\": [\"dog id\", \"age\"],\n\"data filters\": [\n{\n\"column\": \"dog id\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"owner id\", \"last name\"],\n\"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which street does  Nora Haley live?", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[11, "eq", "DuBuque"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\"", "number_predicates": 1}, "prior_select": [["email address"], ["home phone"], ["street"]], "prior_where_col": [[["eq", "first name", "Jaclyn"], ["eq", "last name", "Stoltenberg"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]]], "result": [], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}"}, {"previous_utterances": ["Which street does  Nora Haley live?"], "utterance": "What is her home phone number?", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[11, "eq", "DuBuque"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\"", "number_predicates": 1}, "prior_select": [["email address"], ["home phone"], ["street"]], "prior_where_col": [[["eq", "first name", "Jaclyn"], ["eq", "last name", "Stoltenberg"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]]], "result": ["{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}"}, {"previous_utterances": ["What is her home phone number?", "Which street does  Nora Haley live?"], "utterance": "What is the email address of Jaclyn? | Do you mean the owner with first name Jaclyn? | Yes Jaclyn Stoltenberg", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[11, "eq", "DuBuque"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\"", "number_predicates": 1}, "prior_select": [["email address"], ["home phone"], ["street"]], "prior_where_col": [[["eq", "first name", "Jaclyn"], ["eq", "last name", "Stoltenberg"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]]], "result": ["{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Jaclyn\"\n},\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Stoltenberg\"\n}\n]\n}"}, {"previous_utterances": ["What is the email address of Jaclyn? | Do you mean the owner with first name Jaclyn? | Yes Jaclyn Stoltenberg", "What is her home phone number?", "Which street does  Nora Haley live?"], "utterance": "What is the first name of DuBuque?", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[11, "eq", "DuBuque"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Owners WHERE last_name  =  \"DuBuque\"", "number_predicates": 1}, "prior_select": [["email address"], ["home phone"], ["street"]], "prior_where_col": [[["eq", "first name", "Jaclyn"], ["eq", "last name", "Stoltenberg"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]], [["eq", "first name", "Nora"], ["eq", "last name", "Haley"]]], "result": ["{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Haley\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Nora\"\n}\n]\n}", "{\n\"data filters\": [\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Jaclyn\"\n},\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"Stoltenberg\"\n}\n]\n}"], "pred_intent": "{\n\"data filters\": [\n{\n\"column\": \"last name\",\n\"operator\": \"=\",\n\"value\": \"DuBuque\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "Hi! How many owners temporarily do not have dogs?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n  \"data columns\": [\"owner id\"],\n  \"data filters\": [{\n    \"column\": \"dog id\",\n    \"operator\": \"=\",\n    \"value\": \"null\"\n  }]\n}"}, {"previous_utterances": ["Hi! How many owners temporarily do not have dogs?"], "utterance": "What are their full names?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": ["{\n  \"data columns\": [\"owner id\"],\n  \"data filters\": [{\n    \"column\": \"dog id\",\n    \"operator\": \"=\",\n    \"value\": \"null\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"first name\", \"last name\"],\n  \"data filters\": [{\n    \"column\": \"dog id\",\n    \"operator\": \"=\",\n    \"value\": \"null\"\n  }]\n}"}, {"previous_utterances": [], "utterance": "Show  me the first and last name whose id number 1 | Do you mean the owner id is 1 or dog id is 1? | owner id please.", "select_target": [21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Virginia"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["first name", "last name"]], "prior_where_col": [[["gt", "age", 5]], [["eq", "age", 6]], [["eq", "owner id", 1]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"owner id\",\n        \"operator\": \"=\",\n        \"value\": 1\n    }]\n}"}, {"previous_utterances": ["Show  me the first and last name whose id number 1 | Do you mean the owner id is 1 or dog id is 1? | owner id please."], "utterance": "name the dog which  aged 6?", "select_target": [21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Virginia"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["first name", "last name"]], "prior_where_col": [[["gt", "age", 5]], [["eq", "age", 6]], [["eq", "owner id", 1]]], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"owner id\",\n        \"operator\": \"=\",\n        \"value\": 1\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"=\",\n        \"value\": 6\n    }]\n}"}, {"previous_utterances": ["name the dog which  aged 6?", "Show  me the first and last name whose id number 1 | Do you mean the owner id is 1 or dog id is 1? | owner id please."], "utterance": "name the dog having age more than 5", "select_target": [21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Virginia"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["first name", "last name"]], "prior_where_col": [[["gt", "age", 5]], [["eq", "age", 6]], [["eq", "owner id", 1]]], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"owner id\",\n        \"operator\": \"=\",\n        \"value\": 1\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"=\",\n        \"value\": 6\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \">\",\n        \"value\": 5\n    }]\n}"}, {"previous_utterances": ["name the dog having age more than 5", "name the dog which  aged 6?", "Show  me the first and last name whose id number 1 | Do you mean the owner id is 1 or dog id is 1? | owner id please."], "utterance": "which dogs are owned by someone who lives in virginia? List the name.", "select_target": [21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Virginia"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = \"Virginia\"", "number_predicates": 1}, "prior_select": [["name"], ["name"], ["first name", "last name"]], "prior_where_col": [[["gt", "age", 5]], [["eq", "age", 6]], [["eq", "owner id", 1]]], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"owner id\",\n        \"operator\": \"=\",\n        \"value\": 1\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"=\",\n        \"value\": 6\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \">\",\n        \"value\": 5\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"virginia\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "whats is total cost of treatment?", "select_target": [19], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select dog_id from treatments order by cost_of_treatment asc limit 1", "number_predicates": 0}, "prior_select": [["first name", "last name"], ["cost of treatment"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"cost of treatment\"]\n}"}, {"previous_utterances": ["whats is total cost of treatment?"], "utterance": "could you please find who's provide lowest cost of treatment? | you want first name or last name or both? | both", "select_target": [19], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select dog_id from treatments order by cost_of_treatment asc limit 1", "number_predicates": 0}, "prior_select": [["first name", "last name"], ["cost of treatment"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"cost of treatment\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"cost of treatment\"],\n    \"data filters\": [{\n        \"column\": \"cost of treatment\",\n        \"operator\": \"=\",\n        \"value\": \"lowest\"\n    }]\n}"}, {"previous_utterances": ["could you please find who's provide lowest cost of treatment? | you want first name or last name or both? | both", "whats is total cost of treatment?"], "utterance": "ok, can you show lowest cost treatment's dog id?", "select_target": [19], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select dog_id from treatments order by cost_of_treatment asc limit 1", "number_predicates": 0}, "prior_select": [["first name", "last name"], ["cost of treatment"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"cost of treatment\"]\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"cost of treatment\"],\n    \"data filters\": [{\n        \"column\": \"cost of treatment\",\n        \"operator\": \"=\",\n        \"value\": \"lowest\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"dog id\"],\n    \"data filters\": [{\n        \"column\": \"cost of treatment\",\n        \"operator\": \"=\",\n        \"value\": \"lowest\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hello!  Can you tell me how many dogs have not gone through any treatment?", "select_target": [19, 7], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[20, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "abandoned yes or no", 1]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"breed code\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"is null\"\n    }]\n}"}, {"previous_utterances": ["Hello!  Can you tell me how many dogs have not gone through any treatment?"], "utterance": "Thank you for that!  Can you tell me how many of these dogs were abandoned?", "select_target": [19, 7], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[20, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "abandoned yes or no", 1]], []], "result": ["{\n    \"data columns\": [\"breed code\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"is null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"abandoned yes or no\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"is null\"\n    }]\n}"}, {"previous_utterances": ["Thank you for that!  Can you tell me how many of these dogs were abandoned?", "Hello!  Can you tell me how many dogs have not gone through any treatment?"], "utterance": "Can you provide me with a list of all dog Ids for all of the abandoned dogs, as well as their associated treatment type code?", "select_target": [19, 7], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[20, "eq", 1]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[["eq", "abandoned yes or no", 1]], []], "result": ["{\n    \"data columns\": [\"breed code\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"is null\"\n    }]\n}", "{\n    \"data columns\": [\"abandoned yes or no\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"is null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"dog id\", \"treatment type code\"],\n    \"data filters\": [{\n        \"column\": \"abandoned yes or no\",\n        \"operator\": \"=\",\n        \"value\": \"yes\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Please list the emails of all the professionals who live in the state of Hawaii?", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[30, "eq", "Employee"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'", "number_predicates": 1}, "prior_select": [["email address"], ["email address"]], "prior_where_col": [[["eq", "state", "Wisconsin"]], [["eq", "state", "Hawaii"]]], "result": [], "pred_intent": "{\"data filters\": [\n    {\"column\": \"state\", \"operator\": \"=\", \"value\": \"Hawaii\"}\n], \"data columns\": [\"email address\"]}"}, {"previous_utterances": ["Please list the emails of all the professionals who live in the state of Hawaii?"], "utterance": "Please list the emails of all the professionals who live in the state of Wisconsin?", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[30, "eq", "Employee"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'", "number_predicates": 1}, "prior_select": [["email address"], ["email address"]], "prior_where_col": [[["eq", "state", "Wisconsin"]], [["eq", "state", "Hawaii"]]], "result": ["{\"data filters\": [\n    {\"column\": \"state\", \"operator\": \"=\", \"value\": \"Hawaii\"}\n], \"data columns\": [\"email address\"]}"], "pred_intent": "{\"data filters\": [\n    {\"column\": \"state\", \"operator\": \"=\", \"value\": \"Wisconsin\"}\n], \"data columns\": [\"email address\"]}"}, {"previous_utterances": ["Please list the emails of all the professionals who live in the state of Wisconsin?", "Please list the emails of all the professionals who live in the state of Hawaii?"], "utterance": "Could you tell me the first names of all employees with the role code \" Employee\"?", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[30, "eq", "Employee"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Professionals WHERE role_code   =   'Employee'", "number_predicates": 1}, "prior_select": [["email address"], ["email address"]], "prior_where_col": [[["eq", "state", "Wisconsin"]], [["eq", "state", "Hawaii"]]], "result": ["{\"data filters\": [\n    {\"column\": \"state\", \"operator\": \"=\", \"value\": \"Hawaii\"}\n], \"data columns\": [\"email address\"]}", "{\"data filters\": [\n    {\"column\": \"state\", \"operator\": \"=\", \"value\": \"Wisconsin\"}\n], \"data columns\": [\"email address\"]}"], "pred_intent": "{\"data filters\": [\n    {\"column\": \"role code\", \"operator\": \"=\", \"value\": \"Employee\"}\n], \"data columns\": [\"first name\"]}"}, {"previous_utterances": [], "utterance": "What is the phone number of the professional who has done the most treatment.", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 ) ", "number_predicates": 0}, "prior_select": [["professional id"], ["cell number"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"cell number\"],\n    \"data filters\": [{\n        \"column\": \"role code\",\n        \"operator\": \"=\",\n        \"value\": \"professional\"\n    }]\n}"}, {"previous_utterances": ["What is the phone number of the professional who has done the most treatment."], "utterance": "What are the professional id of the professionals who have done at least two types of treatments?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 ) ", "number_predicates": 0}, "prior_select": [["professional id"], ["cell number"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"cell number\"],\n    \"data filters\": [{\n        \"column\": \"role code\",\n        \"operator\": \"=\",\n        \"value\": \"professional\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": [{\n        \"column\": \"treatment type code\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["What are the professional id of the professionals who have done at least two types of treatments?", "What is the phone number of the professional who has done the most treatment."], "utterance": "How many professionals have done only one treatment?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 ) ", "number_predicates": 0}, "prior_select": [["professional id"], ["cell number"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"cell number\"],\n    \"data filters\": [{\n        \"column\": \"role code\",\n        \"operator\": \"=\",\n        \"value\": \"professional\"\n    }]\n}", "{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": [{\n        \"column\": \"treatment type code\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": [{\n        \"column\": \"treatment type code\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Which first names are used for professionals or owners?", "select_target": [10, 10, 21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs", "number_predicates": 0}, "prior_select": [["first name", "name"], ["first name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"professional\"\n},\n{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"owner\"\n}]\n}"}, {"previous_utterances": ["Which first names are used for professionals or owners?"], "utterance": "Which first names are used for professionals or owners, but are not used as dog names?", "select_target": [10, 10, 21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs", "number_predicates": 0}, "prior_select": [["first name", "name"], ["first name"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"professional\"\n},\n{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"owner\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"professional\"\n},\n{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"owner\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"!=\",\n\"value\": \"name\"\n}]\n}"}, {"previous_utterances": ["Which first names are used for professionals or owners, but are not used as dog names?", "Which first names are used for professionals or owners?"], "utterance": "Which first names are used for professionals or owners, and are used as dog names?", "select_target": [10, 10, 21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs", "number_predicates": 0}, "prior_select": [["first name", "name"], ["first name"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"professional\"\n},\n{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"owner\"\n}]\n}", "{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"professional\"\n},\n{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"owner\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"!=\",\n\"value\": \"name\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"first name\"],\n\"data filters\": [{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"professional\"\n},\n{\n\"column\": \"role code\",\n\"operator\": \"=\",\n\"value\": \"owner\"\n},\n{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"name\"\n}]\n}"}, {"previous_utterances": [], "utterance": "What are the ids of the professionals?", "select_target": [29, 30, 16, 29, 30, 16], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "number_predicates": 0}, "prior_select": [["professional id", "role code"], ["professional id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are the ids of the professionals?"], "utterance": "What is the role of each of the professionals?", "select_target": [29, 30, 16, 29, 30, 16], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "number_predicates": 0}, "prior_select": [["professional id", "role code"], ["professional id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"professional id\", \"role code\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the role of each of the professionals?", "What are the ids of the professionals?"], "utterance": "Could I please have their email address and which of them did not perform any operate any treatment on dogs.", "select_target": [29, 30, 16, 29, 30, 16], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "number_predicates": 0}, "prior_select": [["professional id", "role code"], ["professional id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"professional id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"professional id\", \"role code\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"email address\"],\n    \"data filters\": [{\n        \"column\": \"treatment type code\",\n        \"operator\": \"=\",\n        \"value\": \"None\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "which professionals live in state of indiana? | What information do you want to know about these professionals? | I would like to know all the information about professionals?", "select_target": [18], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[10, "eq", "Taryn"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"", "number_predicates": 1}, "prior_select": [["*"]], "prior_where_col": [[["eq", "state", "Indiana"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"professional id\", \"first name\", \"last name\", \"state\"],\n    \"data filters\": [\n        {\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"indiana\"\n        }\n    ]\n}"}, {"previous_utterances": ["which professionals live in state of indiana? | What information do you want to know about these professionals? | I would like to know all the information about professionals?"], "utterance": "ok, I need to know the cell number of taryn", "select_target": [18], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[10, "eq", "Taryn"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT cell_number FROM Professionals WHERE first_name  =  \"Taryn\"", "number_predicates": 1}, "prior_select": [["*"]], "prior_where_col": [[["eq", "state", "Indiana"]]], "result": ["{\n    \"data columns\": [\"professional id\", \"first name\", \"last name\", \"state\"],\n    \"data filters\": [\n        {\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"indiana\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"cell number\"],\n    \"data filters\": [\n        {\n        \"column\": \"last name\",\n        \"operator\": \"=\",\n        \"value\": \"taryn\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "List the names of all the professionals.", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Indiana"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "number_predicates": 1}, "prior_select": [["first name", "state"], ["role code", "street", "city", "state"], ["first name", "last name"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "first name", "Taryn"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["List the names of all the professionals."], "utterance": "List the names of all professionals that live in a city containing the substring West.", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Indiana"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "number_predicates": 1}, "prior_select": [["first name", "state"], ["role code", "street", "city", "state"], ["first name", "last name"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "first name", "Taryn"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"city\",\n        \"operator\": \"contains\",\n        \"value\": \"West\"\n    }]\n}"}, {"previous_utterances": ["List the names of all professionals that live in a city containing the substring West.", "List the names of all the professionals."], "utterance": "List the role of the professional named Taryn. | The role code of the professional with first name Taryn is Employee | List the role, street, city, and state of the professional with first name Taryn.", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Indiana"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "number_predicates": 1}, "prior_select": [["first name", "state"], ["role code", "street", "city", "state"], ["first name", "last name"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "first name", "Taryn"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"city\",\n        \"operator\": \"contains\",\n        \"value\": \"West\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"role code\", \"street\", \"city\", \"state\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Taryn\"\n    }]\n}"}, {"previous_utterances": ["List the role of the professional named Taryn. | The role code of the professional with first name Taryn is Employee | List the role, street, city, and state of the professional with first name Taryn.", "List the names of all professionals that live in a city containing the substring West.", "List the names of all the professionals."], "utterance": "List the names of all the professionals and their state.", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Indiana"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "number_predicates": 1}, "prior_select": [["first name", "state"], ["role code", "street", "city", "state"], ["first name", "last name"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "first name", "Taryn"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"city\",\n        \"operator\": \"contains\",\n        \"value\": \"West\"\n    }]\n}", "{\n    \"data columns\": [\"role code\", \"street\", \"city\", \"state\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Taryn\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"state\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["List the names of all the professionals and their state.", "List the role of the professional named Taryn. | The role code of the professional with first name Taryn is Employee | List the role, street, city, and state of the professional with first name Taryn.", "List the names of all professionals that live in a city containing the substring West.", "List the names of all the professionals."], "utterance": "List the names of all professionals with the state Indiana.", "select_target": [10], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[14, "eq", "Indiana"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name FROM professionals WHERE state  =  \"Indiana\"", "number_predicates": 1}, "prior_select": [["first name", "state"], ["role code", "street", "city", "state"], ["first name", "last name"], ["first name", "last name"]], "prior_where_col": [[], [["eq", "first name", "Taryn"]], [], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"city\",\n        \"operator\": \"contains\",\n        \"value\": \"West\"\n    }]\n}", "{\n    \"data columns\": [\"role code\", \"street\", \"city\", \"state\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Taryn\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"state\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Indiana\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "LIST THE DOG NAMES WITH TREATMENT COST", "select_target": [21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ", "number_predicates": 0}, "prior_select": [["name", "cost of treatment"]], "prior_where_col": [[]], "result": [], "pred_intent": {"data columns": [], "data filters": []}}, {"previous_utterances": ["LIST THE DOG NAMES WITH TREATMENT COST"], "utterance": "ARRANGE THE COST OF TREATMENT IN DESCENDING ORDER | The result table of the treatment cost is listed in descending order of the cost of treatment. | FIND THE DOG NAMES WHICH COST LESS THAN 1000 FOR TREATMENT", "select_target": [21], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ", "number_predicates": 0}, "prior_select": [["name", "cost of treatment"]], "prior_where_col": [[]], "result": [{"data columns": [], "data filters": []}], "pred_intent": {"data columns": [], "data filters": []}}, {"previous_utterances": [], "utterance": "How many dog owners live in Virginia?", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Bessie"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "number_predicates": 1}, "prior_select": [["breed code"], ["name"], ["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "name", "Bessie"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"state\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}"}, {"previous_utterances": ["How many dog owners live in Virginia?"], "utterance": "What is their name?", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Bessie"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "number_predicates": 1}, "prior_select": [["breed code"], ["name"], ["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "name", "Bessie"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]]], "result": ["{\n    \"data columns\": [\"state\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}"}, {"previous_utterances": ["What is their name?", "How many dog owners live in Virginia?"], "utterance": "And the name of their dog?", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Bessie"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "number_predicates": 1}, "prior_select": [["breed code"], ["name"], ["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "name", "Bessie"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]]], "result": ["{\n    \"data columns\": [\"state\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}"}, {"previous_utterances": ["And the name of their dog?", "What is their name?", "How many dog owners live in Virginia?"], "utterance": "What breed of dog is bessie?", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Bessie"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "number_predicates": 1}, "prior_select": [["breed code"], ["name"], ["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "name", "Bessie"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]]], "result": ["{\n    \"data columns\": [\"state\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Bessie\"\n    }]\n}"}, {"previous_utterances": ["What breed of dog is bessie?", "And the name of their dog?", "What is their name?", "How many dog owners live in Virginia?"], "utterance": "And what size dog is she?", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Bessie"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Bessie\"", "number_predicates": 1}, "prior_select": [["breed code"], ["name"], ["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "name", "Bessie"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]], [["eq", "state", "Virginia"]]], "result": ["{\n    \"data columns\": [\"state\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"name\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"=\",\n        \"value\": \"Virginia\"\n    }]\n}", "{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Bessie\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"size description\"],\n    \"data filters\": [{\n        \"column\": \"name\",\n        \"operator\": \"=\",\n        \"value\": \"Bessie\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "which breed is the top ranked?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[1, "eq", "Bulldog"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\"", "number_predicates": 1}, "prior_select": [["breed name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": [{\n        \"column\": \"rank\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["which breed is the top ranked?"], "utterance": "what is the total count for bulldog?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[1, "eq", "Bulldog"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  \"Bulldog\"", "number_predicates": 1}, "prior_select": [["breed name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": [{\n        \"column\": \"rank\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"breed name\", \"count\"],\n    \"data filters\": [{\n        \"column\": \"breed name\",\n        \"operator\": \"=\",\n        \"value\": \"bulldog\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Tell me how many dogs have gone through any treatments.", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"dog id\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"}, {"previous_utterances": ["Tell me how many dogs have gone through any treatments."], "utterance": "Tell me how old the youngest is. | Do you mean the youngest among those that have gone through any treatment? | yes", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"dog id\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"}, {"previous_utterances": ["Tell me how old the youngest is. | Do you mean the youngest among those that have gone through any treatment? | yes", "Tell me how many dogs have gone through any treatments."], "utterance": "And how old is the oldest that has gone through any treatment?", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"dog id\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"}, {"previous_utterances": ["And how old is the oldest that has gone through any treatment?", "Tell me how old the youngest is. | Do you mean the youngest among those that have gone through any treatment? | yes", "Tell me how many dogs have gone through any treatments."], "utterance": "How about the average age? | Do you mean the average age of those that have gone through any treatment? | yes", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"dog id\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"treatment id\",\n        \"operator\": \"!=\",\n        \"value\": \"null\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "kindly give me the names that might be used for professionals or owners but cannot be use for dog names", "select_target": [14], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[10, "eq", "Jayson"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\"", "number_predicates": 1}, "prior_select": [["email address"], ["first name", "name"]], "prior_where_col": [[["eq", "first name", "Taryn"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"!=\",\n        \"value\": \"name\"\n    }]\n}"}, {"previous_utterances": ["kindly give me the names that might be used for professionals or owners but cannot be use for dog names"], "utterance": "What email can i use to contact Taryn | Would you like the email address of professionals with name Taryn? | Yes", "select_target": [14], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[10, "eq", "Jayson"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\"", "number_predicates": 1}, "prior_select": [["email address"], ["first name", "name"]], "prior_where_col": [[["eq", "first name", "Taryn"]], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"!=\",\n        \"value\": \"name\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"email address\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Taryn\"\n    }, {\n        \"column\": \"role code\",\n        \"operator\": \"=\",\n        \"value\": \"professional\"\n    }]\n}"}, {"previous_utterances": ["What email can i use to contact Taryn | Would you like the email address of professionals with name Taryn? | Yes", "kindly give me the names that might be used for professionals or owners but cannot be use for dog names"], "utterance": "In what state can i find Jayson", "select_target": [14], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[10, "eq", "Jayson"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT state FROM Professionals WHERE First_Name  =  \"Jayson\"", "number_predicates": 1}, "prior_select": [["email address"], ["first name", "name"]], "prior_where_col": [[["eq", "first name", "Taryn"]], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"!=\",\n        \"value\": \"name\"\n    }]\n}", "{\n    \"data columns\": [\"email address\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Taryn\"\n    }, {\n        \"column\": \"role code\",\n        \"operator\": \"=\",\n        \"value\": \"professional\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"state\"],\n    \"data filters\": [{\n        \"column\": \"first name\",\n        \"operator\": \"=\",\n        \"value\": \"Jayson\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you show me a list of owner ids and zip codes? | can  you  give more infor  about  this question? | I want you to extract just the owner ids and zip codes from the table. Does it make sense?", "select_target": [9, 15], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["last name"], ["first name", "owner id"], ["owner id", "dog id", "cost of treatment"], ["owner id", "zip code"]], "prior_where_col": [[["eq", "first name", "Jaclyn"]], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"owner id\", \"zip code\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you show me a list of owner ids and zip codes? | can  you  give more infor  about  this question? | I want you to extract just the owner ids and zip codes from the table. Does it make sense?"], "utterance": "Hmm, can you put the owner ids, dog ids and the cost of treatment in a table?", "select_target": [9, 15], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["last name"], ["first name", "owner id"], ["owner id", "dog id", "cost of treatment"], ["owner id", "zip code"]], "prior_where_col": [[["eq", "first name", "Jaclyn"]], [], [], []], "result": ["{\n    \"data columns\": [\"owner id\", \"zip code\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"owner id\", \"dog id\", \"cost of treatment\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hmm, can you put the owner ids, dog ids and the cost of treatment in a table?", "Can you show me a list of owner ids and zip codes? | can  you  give more infor  about  this question? | I want you to extract just the owner ids and zip codes from the table. Does it make sense?"], "utterance": "Which owner name and id has paid the largest amount of money in total for their dogs? | Did  you mean  the  full name? | Just the first name will be fine.", "select_target": [9, 15], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["last name"], ["first name", "owner id"], ["owner id", "dog id", "cost of treatment"], ["owner id", "zip code"]], "prior_where_col": [[["eq", "first name", "Jaclyn"]], [], [], []], "result": ["{\n    \"data columns\": [\"owner id\", \"zip code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"owner id\", \"dog id\", \"cost of treatment\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"owner id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Which owner name and id has paid the largest amount of money in total for their dogs? | Did  you mean  the  full name? | Just the first name will be fine.", "Hmm, can you put the owner ids, dog ids and the cost of treatment in a table?", "Can you show me a list of owner ids and zip codes? | can  you  give more infor  about  this question? | I want you to extract just the owner ids and zip codes from the table. Does it make sense?"], "utterance": "To make sure, can you also show me the last name of Jaclyn?", "select_target": [9, 15], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["last name"], ["first name", "owner id"], ["owner id", "dog id", "cost of treatment"], ["owner id", "zip code"]], "prior_where_col": [[["eq", "first name", "Jaclyn"]], [], [], []], "result": ["{\n    \"data columns\": [\"owner id\", \"zip code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"owner id\", \"dog id\", \"cost of treatment\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"owner id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"owner id\"],\n    \"data filters\": [\n        {\n            \"column\": \"first name\",\n            \"operator\": \"=\",\n            \"value\": \"Jaclyn\"\n        }\n    ]\n}"}, {"previous_utterances": ["To make sure, can you also show me the last name of Jaclyn?", "Which owner name and id has paid the largest amount of money in total for their dogs? | Did  you mean  the  full name? | Just the first name will be fine.", "Hmm, can you put the owner ids, dog ids and the cost of treatment in a table?", "Can you show me a list of owner ids and zip codes? | can  you  give more infor  about  this question? | I want you to extract just the owner ids and zip codes from the table. Does it make sense?"], "utterance": "As a last thing, can you also tell me the owner id and zip code of Jaclyn Stoltenberg, who has paid the largest amount of money in total for their dogs?", "select_target": [9, 15], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["last name"], ["first name", "owner id"], ["owner id", "dog id", "cost of treatment"], ["owner id", "zip code"]], "prior_where_col": [[["eq", "first name", "Jaclyn"]], [], [], []], "result": ["{\n    \"data columns\": [\"owner id\", \"zip code\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"owner id\", \"dog id\", \"cost of treatment\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"owner id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"owner id\"],\n    \"data filters\": [\n        {\n            \"column\": \"first name\",\n            \"operator\": \"=\",\n            \"value\": \"Jaclyn\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"owner id\", \"zip code\"],\n    \"data filters\": [\n        {\n            \"column\": \"first name\",\n            \"operator\": \"=\",\n            \"value\": \"Jaclyn\"\n        },\n        {\n            \"column\": \"last name\",\n            \"operator\": \"=\",\n            \"value\": \"Stoltenberg\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many dog owner's are there?", "select_target": [10, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Evangeline"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"owner id\"]\n}"}, {"previous_utterances": ["How many dog owner's are there?"], "utterance": "What is the age of the youngest dog?", "select_target": [10, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Evangeline"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"owner id\"]\n}"], "pred_intent": "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \"<\",\n    \"value\": \"1\"\n  }]\n}"}, {"previous_utterances": ["What is the age of the youngest dog?", "How many dog owner's are there?"], "utterance": "What is the name of the dog who is 1 year old?", "select_target": [10, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Evangeline"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"owner id\"]\n}", "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \"<\",\n    \"value\": \"1\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"}, {"previous_utterances": ["What is the name of the dog who is 1 year old?", "What is the age of the youngest dog?", "How many dog owner's are there?"], "utterance": "Of the 15 owners, what is the name of the owner who owns Evangeline?", "select_target": [10, 11], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[21, "eq", "Evangeline"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  \"Evangeline\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"owner id\"]\n}", "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \"<\",\n    \"value\": \"1\"\n  }]\n}", "{\n  \"data columns\": [\"name\"],\n  \"data filters\": [{\n    \"column\": \"age\",\n    \"operator\": \"=\",\n    \"value\": \"1\"\n  }]\n}"], "pred_intent": "{\n  \"data columns\": [\"first name\", \"last name\"],\n  \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"Evangeline\"\n  }]\n}"}, {"previous_utterances": [], "utterance": "Can you show the names of owners and the states they live in? | Do you want the first and last names of owners and the states they live in? | Yes please.", "select_target": [10, 11, 16], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "number_predicates": 0}, "prior_select": [["first name", "last name", "email address"], ["first name", "last name", "state"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"state\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you show the names of owners and the states they live in? | Do you want the first and last names of owners and the states they live in? | Yes please."], "utterance": "Hmm, I want to know the first and last names of owners and also their emails.", "select_target": [10, 11, 16], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "number_predicates": 0}, "prior_select": [["first name", "last name", "email address"], ["first name", "last name", "state"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\", \"state\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"email address\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hmm, I want to know the first and last names of owners and also their emails.", "Can you show the names of owners and the states they live in? | Do you want the first and last names of owners and the states they live in? | Yes please."], "utterance": "Can you list the first and last name with emails of owners living in the state whose name contains the substring \"North\"?", "select_target": [10, 11, 16], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "number_predicates": 0}, "prior_select": [["first name", "last name", "email address"], ["first name", "last name", "state"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"first name\", \"last name\", \"state\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"first name\", \"last name\", \"email address\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"last name\", \"email address\"],\n    \"data filters\": [{\n        \"column\": \"state\",\n        \"operator\": \"like\",\n        \"value\": \"%North%\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "how many dogs on the table", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "BUL"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [["eq", "name", "Kacey"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"breed code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge type\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge amount\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"owner id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"first name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"last name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"street\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"city\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"zip code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"email address\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"home phone\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cell number\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"dog id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"abandoned yes or no\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"age\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of birth\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"gender\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date arrived\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date adopted\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date departed\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"professional id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"role code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cost of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"*\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"}, {"previous_utterances": ["how many dogs on the table"], "utterance": "what is the age of Kacey", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "BUL"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [["eq", "name", "Kacey"]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"breed code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge type\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge amount\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"owner id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"first name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"last name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"street\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"city\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"zip code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"email address\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"home phone\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cell number\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"dog id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"abandoned yes or no\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"age\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of birth\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"gender\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date arrived\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date adopted\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date departed\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"professional id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"role code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cost of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"*\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Kacey\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the age of Kacey", "how many dogs on the table"], "utterance": "which dog is highest weight on table | Do you want the name of the dog with the highest weight? | exactly", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "BUL"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [["eq", "name", "Kacey"]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"breed code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge type\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge amount\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"owner id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"first name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"last name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"street\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"city\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"zip code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"email address\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"home phone\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cell number\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"dog id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"abandoned yes or no\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"age\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of birth\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"gender\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date arrived\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date adopted\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date departed\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"professional id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"role code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cost of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"*\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Kacey\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\"column\": \"weight\", \"operator\": \">\", \"value\": \"\"},\n        {\"column\": \"name\", \"operator\": \"!=\", \"value\": \"\"}\n    ]\n}"}, {"previous_utterances": ["which dog is highest weight on table | Do you want the name of the dog with the highest weight? | exactly", "what is the age of Kacey", "how many dogs on the table"], "utterance": "what is the size code of BUL | Did you mean the  size codes of dogs with a breed code BUL? | exactly", "select_target": [5], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "BUL"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT size_code FROM Dogs where breed_code  =  \"BUL\"", "number_predicates": 1}, "prior_select": [["name"], ["age"], ["*"]], "prior_where_col": [[], [["eq", "name", "Kacey"]], []], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"breed code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge type\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"charge amount\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"size description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment type description\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"owner id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"first name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"last name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"street\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"city\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"state\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"zip code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"email address\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"home phone\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cell number\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"dog id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"abandoned yes or no\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"name\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"age\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of birth\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"gender\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date arrived\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date adopted\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date departed\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"professional id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"role code\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"treatment id\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"date of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"cost of treatment\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        },\n        {\n            \"column\": \"*\",\n            \"operator\": \"!=\",\n            \"value\": \"\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Kacey\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\"column\": \"weight\", \"operator\": \">\", \"value\": \"\"},\n        {\"column\": \"name\", \"operator\": \"!=\", \"value\": \"\"}\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"size code\"],\n    \"data filters\": [\n        {\"column\": \"breed code\", \"operator\": \"=\", \"value\": \"BUL\"}\n    ]\n}"}, {"previous_utterances": [], "utterance": "which professional has done  the most treatments?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  <=  3 ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"professional id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["which professional has done  the most treatments?"], "utterance": "what about the least treatments?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  <=  3 ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"professional id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"professional id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["what about the least treatments?", "which professional has done  the most treatments?"], "utterance": "How many professionals have at most 3 treatments?", "select_target": [34], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  <=  3 ) ", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"professional id\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"professional id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"professional id\"],\n\"data filters\": [{\n\"column\": \"treatment id\",\n\"operator\": \"<=\",\n\"value\": \"3\"\n}]\n}"}, {"previous_utterances": [], "utterance": "How many dog breeds are there?", "select_target": [1], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["size code"], ["breed name"], ["*"]], "prior_where_col": [[["eq", "breed name", "Bulldog"]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many dog breeds are there?"], "utterance": "What is the biggest of those dog breeds?", "select_target": [1], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["size code"], ["breed name"], ["*"]], "prior_where_col": [[["eq", "breed name", "Bulldog"]], [], []], "result": ["{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"breed name\", \"size description\"],\n    \"data filters\": [\n        {\n            \"column\": \"size description\",\n            \"operator\": \"=\",\n            \"value\": \"biggest\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the biggest of those dog breeds?", "How many dog breeds are there?"], "utterance": "How big is the bulldog?", "select_target": [1], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["size code"], ["breed name"], ["*"]], "prior_where_col": [[["eq", "breed name", "Bulldog"]], [], []], "result": ["{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"breed name\", \"size description\"],\n    \"data filters\": [\n        {\n            \"column\": \"size description\",\n            \"operator\": \"=\",\n            \"value\": \"biggest\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"breed name\", \"size description\"],\n    \"data filters\": [\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"=\",\n            \"value\": \"bulldog\"\n        }\n    ]\n}"}, {"previous_utterances": ["How big is the bulldog?", "What is the biggest of those dog breeds?", "How many dog breeds are there?"], "utterance": "What is the name of the breed with the most dogs?", "select_target": [1], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["size code"], ["breed name"], ["*"]], "prior_where_col": [[["eq", "breed name", "Bulldog"]], [], []], "result": ["{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"breed name\", \"size description\"],\n    \"data filters\": [\n        {\n            \"column\": \"size description\",\n            \"operator\": \"=\",\n            \"value\": \"biggest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"breed name\", \"size description\"],\n    \"data filters\": [\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"=\",\n            \"value\": \"bulldog\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"breed name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Hello, how many dogs have gone through treatments?", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"dog id\", \"treatment id\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"}, {"previous_utterances": ["Hello, how many dogs have gone through treatments?"], "utterance": "What is the age of the youngest dog to go through treatment?", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"dog id\", \"treatment id\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the age of the youngest dog to go through treatment?", "Hello, how many dogs have gone through treatments?"], "utterance": "What about the oldest?", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"dog id\", \"treatment id\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"}, {"previous_utterances": ["What about the oldest?", "What is the age of the youngest dog to go through treatment?", "Hello, how many dogs have gone through treatments?"], "utterance": "How about the average age?", "select_target": [22], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ", "number_predicates": 0}, "prior_select": [["age"], ["age"], ["*"]], "prior_where_col": [[], [], []], "result": ["{\n  \"data columns\": [\"dog id\", \"treatment id\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"age\"],\n  \"data filters\": [\n    {\n      \"column\": \"treatment id\",\n      \"operator\": \"!=\",\n      \"value\": \"\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "Show me all the dogs | do you want to show all the attributes of the dogs? | just show me the names of the dogs", "select_target": [21, 32], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "breed_code"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "number_predicates": 1}, "prior_select": [["name", "gender"], ["name"], ["name"]], "prior_where_col": [[["eq", "breed code", "breed_code"]], [["eq", "breed code", "breed_code"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Show me all the dogs | do you want to show all the attributes of the dogs? | just show me the names of the dogs"], "utterance": "Nice! Tell me which of these dogs are the rarest breed", "select_target": [21, 32], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "breed_code"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "number_predicates": 1}, "prior_select": [["name", "gender"], ["name"], ["name"]], "prior_where_col": [[["eq", "breed code", "breed_code"]], [["eq", "breed code", "breed_code"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"=\",\n            \"value\": \"rarest breed\"\n        }\n    ]\n}"}, {"previous_utterances": ["Nice! Tell me which of these dogs are the rarest breed", "Show me all the dogs | do you want to show all the attributes of the dogs? | just show me the names of the dogs"], "utterance": "What are the genders of these dogs?", "select_target": [21, 32], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "breed_code"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "number_predicates": 1}, "prior_select": [["name", "gender"], ["name"], ["name"]], "prior_where_col": [[["eq", "breed code", "breed_code"]], [["eq", "breed code", "breed_code"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"=\",\n            \"value\": \"rarest breed\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"gender\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are the genders of these dogs?", "Nice! Tell me which of these dogs are the rarest breed", "Show me all the dogs | do you want to show all the attributes of the dogs? | just show me the names of the dogs"], "utterance": "Ok sure. Tell me who treated these dogs | Sorry, could you specify your question, There are all attributes of the dog treatments, which one do you want to show? | Alright! just show me the treatment dates of these dogs", "select_target": [21, 32], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[0, "eq", "breed_code"]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ", "number_predicates": 1}, "prior_select": [["name", "gender"], ["name"], ["name"]], "prior_where_col": [[["eq", "breed code", "breed_code"]], [["eq", "breed code", "breed_code"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"breed name\",\n            \"operator\": \"=\",\n            \"value\": \"rarest breed\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"gender\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"date of treatment\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many different treatments are there?", "select_target": [33], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"treatment type description\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many different treatments are there?"], "utterance": "which one is the most expensive?", "select_target": [33], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"treatment type description\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"treatment type description\", \"cost of treatment\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["which one is the most expensive?", "How many different treatments are there?"], "utterance": "And how about the price of the most recent treatment?", "select_target": [33], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"treatment type description\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"treatment type description\", \"cost of treatment\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"cost of treatment\"],\n    \"data filters\": [{\"column\": \"date of treatment\", \"operator\": \"max\"}]\n}"}, {"previous_utterances": [], "utterance": "how many female dogs have gone through treatment", "select_target": [25], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[22, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["age"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"gender\", \"dog id\", \"treatment id\"],\n    \"data filters\": [{\n        \"column\": \"gender\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}"}, {"previous_utterances": ["how many female dogs have gone through treatment"], "utterance": "what are their ages", "select_target": [25], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[22, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["age"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"gender\", \"dog id\", \"treatment id\"],\n    \"data filters\": [{\n        \"column\": \"gender\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"gender\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}"}, {"previous_utterances": ["what are their ages", "how many female dogs have gone through treatment"], "utterance": "what is the highest weight of age 2", "select_target": [25], "column_names": ["breed code", "breed name", "charge id", "charge type", "charge amount", "size code", "size description", "treatment type code", "treatment type description", "owner id", "first name", "last name", "street", "city", "state", "zip code", "email address", "home phone", "cell number", "dog id", "abandoned yes or no", "name", "age", "date of birth", "gender", "weight", "date arrived", "date adopted", "date departed", "professional id", "role code", "treatment id", "date of treatment", "cost of treatment", "*"], "where_clauses": [[22, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "dog_kennels", "raw_sql": "SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["age"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"gender\", \"dog id\", \"treatment id\"],\n    \"data filters\": [{\n        \"column\": \"gender\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}", "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n        \"column\": \"gender\",\n        \"operator\": \"=\",\n        \"value\": \"female\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"age\", \"weight\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Which cause has the least enrollment? | Do you want the course id or course name? | the course name", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14", "number_predicates": 0}, "prior_select": [["course id"], ["course name"]], "prior_where_col": [[["eq", "course name", "math"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"course name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Which cause has the least enrollment? | Do you want the course id or course name? | the course name"], "utterance": "What is the course ID of Math?", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14", "number_predicates": 0}, "prior_select": [["course id"], ["course name"]], "prior_where_col": [[["eq", "course name", "math"]], []], "result": ["{\n    \"data columns\": [\"course name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"course id\"],\n    \"data filters\": [{\n        \"column\": \"course name\",\n        \"operator\": \"=\",\n        \"value\": \"Math\"\n    }]\n}"}, {"previous_utterances": ["What is the course ID of Math?", "Which cause has the least enrollment? | Do you want the course id or course name? | the course name"], "utterance": "How many students enrolled a course with the id of 14", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14", "number_predicates": 0}, "prior_select": [["course id"], ["course name"]], "prior_where_col": [[["eq", "course name", "math"]], []], "result": ["{\n    \"data columns\": [\"course name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"course id\"],\n    \"data filters\": [{\n        \"column\": \"course name\",\n        \"operator\": \"=\",\n        \"value\": \"Math\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"course id\",\n        \"operator\": \"=\",\n        \"value\": \"14\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Could you tell me the last names of all the students who live in the state of North Carolina?", "select_target": [28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["last name"], ["first name"], ["last name"]], "prior_where_col": [[], [["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": [], "pred_intent": "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"last name\"] }"}, {"previous_utterances": ["Could you tell me the last names of all the students who live in the state of North Carolina?"], "utterance": "What about their first names?", "select_target": [28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["last name"], ["first name"], ["last name"]], "prior_where_col": [[], [["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": ["{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"last name\"] }"], "pred_intent": "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"first name\", \"last name\"] }"}, {"previous_utterances": ["What about their first names?", "Could you tell me the last names of all the students who live in the state of North Carolina?"], "utterance": "What are the last names of the students who live in North Carolina but have not registered in any degree program?", "select_target": [28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["last name"], ["first name"], ["last name"]], "prior_where_col": [[], [["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": ["{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"last name\"] }", "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"first name\", \"last name\"] }"], "pred_intent": "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }, { \"column\": \"degree program id\", \"operator\": \"=\", \"value\": \"\" }], \"data columns\": [\"last name\"] }"}, {"previous_utterances": ["What are the last names of the students who live in North Carolina but have not registered in any degree program?", "What about their first names?", "Could you tell me the last names of all the students who live in the state of North Carolina?"], "utterance": "What are their first names?", "select_target": [28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["last name"], ["first name"], ["last name"]], "prior_where_col": [[], [["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": ["{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"last name\"] }", "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }], \"data columns\": [\"first name\", \"last name\"] }", "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }, { \"column\": \"degree program id\", \"operator\": \"=\", \"value\": \"\" }], \"data columns\": [\"last name\"] }"], "pred_intent": "{ \"data filters\": [{ \"column\": \"state province county\", \"operator\": \"=\", \"value\": \"North Carolina\" }, { \"column\": \"degree program id\", \"operator\": \"=\", \"value\": \"\" }], \"data columns\": [\"first name\", \"last name\"] }"}, {"previous_utterances": [], "utterance": "Which programs has the student by the first name Timmothy enrolled?", "select_target": [29], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[32, "eq", "johns..unique@example..net"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\"", "number_predicates": 1}, "prior_select": [["date first registered", "date left"], ["degree program id"]], "prior_where_col": [[["eq", "first name", "Timmothy"]], [["eq", "first name", "Timmothy"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"course name\"],\n\"data filters\": [{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Timmothy\"\n}]\n}"}, {"previous_utterances": ["Which programs has the student by the first name Timmothy enrolled?"], "utterance": "Which date did he register and also which date did he leave?", "select_target": [29], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[32, "eq", "johns..unique@example..net"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\"", "number_predicates": 1}, "prior_select": [["date first registered", "date left"], ["degree program id"]], "prior_where_col": [[["eq", "first name", "Timmothy"]], [["eq", "first name", "Timmothy"]]], "result": ["{\n\"data columns\": [\"course name\"],\n\"data filters\": [{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Timmothy\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"date first registered\", \"date left\"],\n\"data filters\": [{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Timmothy\"\n}]\n}"}, {"previous_utterances": ["Which date did he register and also which date did he leave?", "Which programs has the student by the first name Timmothy enrolled?"], "utterance": "What is the middle name of the student with email address johns.unique@example.net?", "select_target": [29], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[32, "eq", "johns..unique@example..net"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT middle_name FROM Students WHERE email_address  =  \"johns.unique@example.net\"", "number_predicates": 1}, "prior_select": [["date first registered", "date left"], ["degree program id"]], "prior_where_col": [[["eq", "first name", "Timmothy"]], [["eq", "first name", "Timmothy"]]], "result": ["{\n\"data columns\": [\"course name\"],\n\"data filters\": [{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Timmothy\"\n}]\n}", "{\n\"data columns\": [\"date first registered\", \"date left\"],\n\"data filters\": [{\n\"column\": \"first name\",\n\"operator\": \"=\",\n\"value\": \"Timmothy\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"middle name\"],\n\"data filters\": [{\n\"column\": \"email address\",\n\"operator\": \"=\",\n\"value\": \"johns.unique@example.net\"\n}]\n}"}, {"previous_utterances": [], "utterance": "Which program had the least number of students enrolled?", "select_target": [16], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[18, "eq", "architecto"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto'", "number_predicates": 1}, "prior_select": [["degree summary name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"degree program id\", \"degree summary name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Which program had the least number of students enrolled?"], "utterance": "What is the degree ID for architecto?", "select_target": [16], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[18, "eq", "architecto"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto'", "number_predicates": 1}, "prior_select": [["degree summary name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"degree program id\", \"degree summary name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [{\n        \"column\": \"degree summary name\",\n        \"operator\": \"=\",\n        \"value\": \"architecto\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Find the program which most number of students are enrolled in. List both the id and the summary.", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[16, "eq", "3"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "number_predicates": 1}, "prior_select": [["degree program id", "degree summary name"], ["*"], ["*"], ["degree program id"], ["degree program id", "degree summary name"]], "prior_where_col": [[], [["eq", "degree summary name", "Master"], ["eq", "degree program id", "9"]], [["eq", "degree program id", "9"]], [], []], "result": [], "pred_intent": "{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Find the program which most number of students are enrolled in. List both the id and the summary."], "utterance": "for id program 9, which degree summary is the most common | Could you please clarify your question? Since one program has only one degree summary. | which program has the most students", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[16, "eq", "3"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "number_predicates": 1}, "prior_select": [["degree program id", "degree summary name"], ["*"], ["*"], ["degree program id"], ["degree program id", "degree summary name"]], "prior_where_col": [[], [["eq", "degree summary name", "Master"], ["eq", "degree program id", "9"]], [["eq", "degree program id", "9"]], [], []], "result": ["{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"degree summary name\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["for id program 9, which degree summary is the most common | Could you please clarify your question? Since one program has only one degree summary. | which program has the most students", "Find the program which most number of students are enrolled in. List both the id and the summary."], "utterance": "How many students are in program 9", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[16, "eq", "3"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "number_predicates": 1}, "prior_select": [["degree program id", "degree summary name"], ["*"], ["*"], ["degree program id"], ["degree program id", "degree summary name"]], "prior_where_col": [[], [["eq", "degree summary name", "Master"], ["eq", "degree program id", "9"]], [["eq", "degree program id", "9"]], [], []], "result": ["{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"degree summary name\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n}]\n}"}, {"previous_utterances": ["How many students are in program 9", "for id program 9, which degree summary is the most common | Could you please clarify your question? Since one program has only one degree summary. | which program has the most students", "Find the program which most number of students are enrolled in. List both the id and the summary."], "utterance": "how many master are in program 9", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[16, "eq", "3"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "number_predicates": 1}, "prior_select": [["degree program id", "degree summary name"], ["*"], ["*"], ["degree program id"], ["degree program id", "degree summary name"]], "prior_where_col": [[], [["eq", "degree summary name", "Master"], ["eq", "degree program id", "9"]], [["eq", "degree program id", "9"]], [], []], "result": ["{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n},\n{\n\"column\": \"degree summary name\",\n\"operator\": \"=\",\n\"value\": \"Master\"\n}]\n}"}, {"previous_utterances": ["how many master are in program 9", "How many students are in program 9", "for id program 9, which degree summary is the most common | Could you please clarify your question? Since one program has only one degree summary. | which program has the most students", "Find the program which most number of students are enrolled in. List both the id and the summary."], "utterance": "which program has the least students", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[16, "eq", "3"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "number_predicates": 1}, "prior_select": [["degree program id", "degree summary name"], ["*"], ["*"], ["degree program id"], ["degree program id", "degree summary name"]], "prior_where_col": [[], [["eq", "degree summary name", "Master"], ["eq", "degree program id", "9"]], [["eq", "degree program id", "9"]], [], []], "result": ["{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n}]\n}", "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n},\n{\n\"column\": \"degree summary name\",\n\"operator\": \"=\",\n\"value\": \"Master\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": [],\n\"order by\": \"count(student id)\",\n\"limit\": 1\n}"}, {"previous_utterances": ["which program has the least students", "how many master are in program 9", "How many students are in program 9", "for id program 9, which degree summary is the most common | Could you please clarify your question? Since one program has only one degree summary. | which program has the most students", "Find the program which most number of students are enrolled in. List both the id and the summary."], "utterance": "how many students does id 3 have", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[16, "eq", "3"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  \"3\"", "number_predicates": 1}, "prior_select": [["degree program id", "degree summary name"], ["*"], ["*"], ["degree program id"], ["degree program id", "degree summary name"]], "prior_where_col": [[], [["eq", "degree summary name", "Master"], ["eq", "degree program id", "9"]], [["eq", "degree program id", "9"]], [], []], "result": ["{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"degree summary name\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n}]\n}", "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"9\"\n},\n{\n\"column\": \"degree summary name\",\n\"operator\": \"=\",\n\"value\": \"Master\"\n}]\n}", "{\n\"data columns\": [\"degree program id\", \"degree summary name\"],\n\"data filters\": [],\n\"order by\": \"count(student id)\",\n\"limit\": 1\n}"], "pred_intent": "{\n\"data columns\": [\"count(student id)\"],\n\"data filters\": [{\n\"column\": \"degree program id\",\n\"operator\": \"=\",\n\"value\": \"3\"\n}]\n}"}, {"previous_utterances": [], "utterance": "What are the release dates for transcripts?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["transcript date"], ["transcript date"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are the release dates for transcripts?"], "utterance": "What is the most recent date for release of transcripts?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["transcript date"], ["transcript date"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": [{\n        \"column\": \"transcript date\",\n        \"operator\": \">\",\n        \"value\": \"2022-01-01\"\n    }]\n}"}, {"previous_utterances": ["What is the most recent date for release of transcripts?", "What are the release dates for transcripts?"], "utterance": "What is the last transcript release date?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["transcript date"], ["transcript date"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": [{\n        \"column\": \"transcript date\",\n        \"operator\": \">\",\n        \"value\": \"2022-01-01\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Can you list the transcript date that appears least often?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["transcript date"]], "prior_where_col": [[["eq", "transcript date", "1975-05-06 12:04:47"]], []], "result": [], "pred_intent": "{\n\"data columns\": [\"transcript date\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Can you list the transcript date that appears least often?"], "utterance": "How many times does the transcript date 1975-05-06 12:04:47\tshow up in the table?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["transcript date"]], "prior_where_col": [[["eq", "transcript date", "1975-05-06 12:04:47"]], []], "result": ["{\n\"data columns\": [\"transcript date\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [],\n\"data filters\": [{\n\"column\": \"transcript date\",\n\"operator\": \"=\",\n\"value\": \"1975-05-06 12:04:47\"\n}]\n}"}, {"previous_utterances": ["How many times does the transcript date 1975-05-06 12:04:47\tshow up in the table?", "Can you list the transcript date that appears least often?"], "utterance": "Which transcript date shows up the most number of times?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1", "number_predicates": 0}, "prior_select": [["*"], ["transcript date"]], "prior_where_col": [[["eq", "transcript date", "1975-05-06 12:04:47"]], []], "result": ["{\n\"data columns\": [\"transcript date\"],\n\"data filters\": []\n}", "{\n\"data columns\": [],\n\"data filters\": [{\n\"column\": \"transcript date\",\n\"operator\": \"=\",\n\"value\": \"1975-05-06 12:04:47\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"transcript date\"],\n\"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What is the full name of the department that has the substring computer in its name?", "select_target": [12], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[14, "eq", "history"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"", "number_predicates": 1}, "prior_select": [["department id"], ["department description"], ["department name"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"department name\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}"}, {"previous_utterances": ["What is the full name of the department that has the substring computer in its name?"], "utterance": "What's the description of that department?", "select_target": [12], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[14, "eq", "history"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"", "number_predicates": 1}, "prior_select": [["department id"], ["department description"], ["department name"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"department name\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"department description\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}"}, {"previous_utterances": ["What's the description of that department?", "What is the full name of the department that has the substring computer in its name?"], "utterance": "What is that department's id?", "select_target": [12], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[14, "eq", "history"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"", "number_predicates": 1}, "prior_select": [["department id"], ["department description"], ["department name"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"department name\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}", "{\n    \"data columns\": [\"department description\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"department id\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}"}, {"previous_utterances": ["What is that department's id?", "What's the description of that department?", "What is the full name of the department that has the substring computer in its name?"], "utterance": "What about for history? | What do you mean exactly? | What are the other details for the department named history?", "select_target": [12], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[14, "eq", "history"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT other_details FROM Departments WHERE department_name  =  \"history\"", "number_predicates": 1}, "prior_select": [["department id"], ["department description"], ["department name"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"department name\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}", "{\n    \"data columns\": [\"department description\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}", "{\n    \"data columns\": [\"department id\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%computer%\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"department id\"],\n    \"data filters\": [{\n        \"column\": \"department name\",\n        \"operator\": \"like\",\n        \"value\": \"%history%\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you list the semester names and their enrollments?", "select_target": [23], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["student enrolment id", "degree program id"], ["semester name"], ["semester name", "*"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"semester name\", \"enrollments\"]\n}"}, {"previous_utterances": ["Can you list the semester names and their enrollments?"], "utterance": "Which semester has the most enrollments?", "select_target": [23], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["student enrolment id", "degree program id"], ["semester name"], ["semester name", "*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"semester name\", \"enrollments\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": [{\n        \"column\": \"enrollments\",\n        \"operator\": \"=\",\n        \"value\": \"max\"\n    }]\n}"}, {"previous_utterances": ["Which semester has the most enrollments?", "Can you list the semester names and their enrollments?"], "utterance": "Can you list the student enrollment ids and the degree program ids?", "select_target": [23], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["student enrolment id", "degree program id"], ["semester name"], ["semester name", "*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"semester name\", \"enrollments\"]\n}", "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": [{\n        \"column\": \"enrollments\",\n        \"operator\": \"=\",\n        \"value\": \"max\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"student enrollment id\", \"degree program id\"]\n}"}, {"previous_utterances": ["Can you list the student enrollment ids and the degree program ids?", "Which semester has the most enrollments?", "Can you list the semester names and their enrollments?"], "utterance": "Hmm, which semesters do not have any student enrolled? I want the semester names.", "select_target": [23], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["student enrolment id", "degree program id"], ["semester name"], ["semester name", "*"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"semester name\", \"enrollments\"]\n}", "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": [{\n        \"column\": \"enrollments\",\n        \"operator\": \"=\",\n        \"value\": \"max\"\n    }]\n}", "{\n    \"data columns\": [\"student enrollment id\", \"degree program id\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": [{\n        \"column\": \"enrollments\",\n        \"operator\": \"=\",\n        \"value\": \"0\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Show me the date and id of the transcript with at least 2 course results.", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    >=    2", "number_predicates": 0}, "prior_select": [["other details"], ["transcript date", "transcript id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"transcript date\", \"transcript id\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    },\n    {\n        \"column\": \"student course id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["Show me the date and id of the transcript with at least 2 course results."], "utterance": "Show me other details of those transcripts | Do you mean other details of those transcripts with at least 2 course results? | Yes!", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    >=    2", "number_predicates": 0}, "prior_select": [["other details"], ["transcript date", "transcript id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"transcript date\", \"transcript id\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    },\n    {\n        \"column\": \"student course id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"other details\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    },\n    {\n        \"column\": \"student course id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["Show me other details of those transcripts | Do you mean other details of those transcripts with at least 2 course results? | Yes!", "Show me the date and id of the transcript with at least 2 course results."], "utterance": "Show me transcript dates of those transcripts", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    >=    2", "number_predicates": 0}, "prior_select": [["other details"], ["transcript date", "transcript id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"transcript date\", \"transcript id\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    },\n    {\n        \"column\": \"student course id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"other details\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    },\n    {\n        \"column\": \"student course id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    },\n    {\n        \"column\": \"student course id\",\n        \"operator\": \">\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hi what is the latest transcript?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[39, "eq", 5]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5", "number_predicates": 1}, "prior_select": [["transcript id"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"transcript id\", \"transcript date\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hi what is the latest transcript?"], "utterance": "what is the date of transcript number 5?", "select_target": [40], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[39, "eq", 5]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5", "number_predicates": 1}, "prior_select": [["transcript id"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"transcript id\", \"transcript date\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"transcript date\"],\n    \"data filters\": [{\n        \"column\": \"transcript id\",\n        \"operator\": \"=\",\n        \"value\": \"5\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hello!  Can you list all of the deparatment names and department IDs?", "select_target": [17], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[14, "eq", "statistics"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'", "number_predicates": 1}, "prior_select": [["department id", "department name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{ \"data columns\": [\"department name\", \"department id\"], \"data filters\": [] }"}, {"previous_utterances": ["Hello!  Can you list all of the deparatment names and department IDs?"], "utterance": "Cool!  Can you show me all of the degree summary names associated with this department?", "select_target": [17], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[14, "eq", "statistics"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics'", "number_predicates": 1}, "prior_select": [["department id", "department name"]], "prior_where_col": [[]], "result": ["{ \"data columns\": [\"department name\", \"department id\"], \"data filters\": [] }"], "pred_intent": "{ \"data columns\": [\"degree summary name\"], \"data filters\": [{\"column\": \"department name\", \"operator\": \"=\", \"value\": \"Value\"}] }"}, {"previous_utterances": [], "utterance": "how many students live in North Carolina?", "select_target": [28, 30, 28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"student id\", \"state province county\"],\n\"data filters\": [\n{\n\"column\": \"state province county\",\n\"operator\": \"=\",\n\"value\": \"North Carolina\"\n}\n]\n}"}, {"previous_utterances": ["how many students live in North Carolina?"], "utterance": "What are their first and last names?", "select_target": [28, 30, 28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": ["{\n\"data columns\": [\"student id\", \"state province county\"],\n\"data filters\": [\n{\n\"column\": \"state province county\",\n\"operator\": \"=\",\n\"value\": \"North Carolina\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"first name\", \"last name\"],\n\"data filters\": [\n{\n\"column\": \"state province county\",\n\"operator\": \"=\",\n\"value\": \"North Carolina\"\n}\n]\n}"}, {"previous_utterances": ["What are their first and last names?", "how many students live in North Carolina?"], "utterance": "Which of those do not have degree program id?", "select_target": [28, 30, 28, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id", "number_predicates": 0}, "prior_select": [["first name", "last name"], ["*"]], "prior_where_col": [[["eq", "state province county", "NorthCarolina"]], [["eq", "state province county", "NorthCarolina"]]], "result": ["{\n\"data columns\": [\"student id\", \"state province county\"],\n\"data filters\": [\n{\n\"column\": \"state province county\",\n\"operator\": \"=\",\n\"value\": \"North Carolina\"\n}\n]\n}", "{\n\"data columns\": [\"first name\", \"last name\"],\n\"data filters\": [\n{\n\"column\": \"state province county\",\n\"operator\": \"=\",\n\"value\": \"North Carolina\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"first name\", \"last name\"],\n\"data filters\": [\n{\n\"column\": \"state province county\",\n\"operator\": \"=\",\n\"value\": \"North Carolina\"\n},\n{\n\"column\": \"degree program id\",\n\"operator\": \"!=\",\n\"value\": \"\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "how many students there", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT count ( * )  FROM Student_Enrolment", "number_predicates": 0}, "prior_select": [["email address"], ["first name"], ["*"]], "prior_where_col": [[["eq", "student id", 2]], [["eq", "student id", 3]], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"student id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["how many students there"], "utterance": "what is the first name of student id 3", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT count ( * )  FROM Student_Enrolment", "number_predicates": 0}, "prior_select": [["email address"], ["first name"], ["*"]], "prior_where_col": [[["eq", "student id", 2]], [["eq", "student id", 3]], []], "result": ["{\n  \"data columns\": [\"student id\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"student id\", \"first name\"],\n  \"data filters\": [\n    {\n      \"column\": \"student id\",\n      \"operator\": \"=\",\n      \"value\": \"3\"\n    }\n  ]\n}"}, {"previous_utterances": ["what is the first name of student id 3", "how many students there"], "utterance": "what is email address of student id 2", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT count ( * )  FROM Student_Enrolment", "number_predicates": 0}, "prior_select": [["email address"], ["first name"], ["*"]], "prior_where_col": [[["eq", "student id", 2]], [["eq", "student id", 3]], []], "result": ["{\n  \"data columns\": [\"student id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"student id\", \"first name\"],\n  \"data filters\": [\n    {\n      \"column\": \"student id\",\n      \"operator\": \"=\",\n      \"value\": \"3\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"student id\", \"email address\"],\n  \"data filters\": [\n    {\n      \"column\": \"student id\",\n      \"operator\": \"=\",\n      \"value\": \"2\"\n    }\n  ]\n}"}, {"previous_utterances": ["what is email address of student id 2", "what is the first name of student id 3", "how many students there"], "utterance": "how many student enrolment there", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT count ( * )  FROM Student_Enrolment", "number_predicates": 0}, "prior_select": [["email address"], ["first name"], ["*"]], "prior_where_col": [[["eq", "student id", 2]], [["eq", "student id", 3]], []], "result": ["{\n  \"data columns\": [\"student id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"student id\", \"first name\"],\n  \"data filters\": [\n    {\n      \"column\": \"student id\",\n      \"operator\": \"=\",\n      \"value\": \"3\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"student id\", \"email address\"],\n  \"data filters\": [\n    {\n      \"column\": \"student id\",\n      \"operator\": \"=\",\n      \"value\": \"2\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Which semester did bachelor students enroll? List the id.", "select_target": [18], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[25, "eq", 14]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14", "number_predicates": 1}, "prior_select": [["semester id"]], "prior_where_col": [[["eq", "degree summary name", "Master"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"semester id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which semester did bachelor students enroll? List the id."], "utterance": "What is the degree summary description of student with id 14?", "select_target": [18], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[25, "eq", 14]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14", "number_predicates": 1}, "prior_select": [["semester id"]], "prior_where_col": [[["eq", "degree summary name", "Master"]]], "result": ["{\n    \"data columns\": [\"semester id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"degree summary description\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"14\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "who are the students enrolled in 2 degree programs in one semester? | did you want to return their first, middle and last names? | yes", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[28, "eq", "Timmothy"], [29, "eq", "Anna"], [30, "eq", "Ward"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'", "number_predicates": 3}, "prior_select": [["email address"], ["student id"], ["first name", "middle name", "last name", "student id"]], "prior_where_col": [[["eq", "student id", 4]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"First Name\", \"Middle Name\", \"Last Name\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["who are the students enrolled in 2 degree programs in one semester? | did you want to return their first, middle and last names? | yes"], "utterance": "what are their student_id?", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[28, "eq", "Timmothy"], [29, "eq", "Anna"], [30, "eq", "Ward"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'", "number_predicates": 3}, "prior_select": [["email address"], ["student id"], ["first name", "middle name", "last name", "student id"]], "prior_where_col": [[["eq", "student id", 4]], [], []], "result": ["{\n    \"data columns\": [\"First Name\", \"Middle Name\", \"Last Name\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"Student ID\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"}, {"previous_utterances": ["what are their student_id?", "who are the students enrolled in 2 degree programs in one semester? | did you want to return their first, middle and last names? | yes"], "utterance": "what is student_id 4 email address", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[28, "eq", "Timmothy"], [29, "eq", "Anna"], [30, "eq", "Ward"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'", "number_predicates": 3}, "prior_select": [["email address"], ["student id"], ["first name", "middle name", "last name", "student id"]], "prior_where_col": [[["eq", "student id", 4]], [], []], "result": ["{\n    \"data columns\": [\"First Name\", \"Middle Name\", \"Last Name\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"Student ID\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"Email Address\"],\n    \"data filters\": [{\n        \"column\": \"Student ID\",\n        \"operator\": \"=\",\n        \"value\": \"4\"\n    }]\n}"}, {"previous_utterances": ["what is student_id 4 email address", "what are their student_id?", "who are the students enrolled in 2 degree programs in one semester? | did you want to return their first, middle and last names? | yes"], "utterance": "what is Timothy Anna Ward's date first registered?", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[28, "eq", "Timmothy"], [29, "eq", "Anna"], [30, "eq", "Ward"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward'", "number_predicates": 3}, "prior_select": [["email address"], ["student id"], ["first name", "middle name", "last name", "student id"]], "prior_where_col": [[["eq", "student id", 4]], [], []], "result": ["{\n    \"data columns\": [\"First Name\", \"Middle Name\", \"Last Name\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"Student ID\"],\n    \"data filters\": [{\n        \"column\": \"Degree Program ID\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    },\n    {\n        \"column\": \"Semester ID\",\n        \"operator\": \"=\",\n        \"value\": \"1\"\n    }]\n}", "{\n    \"data columns\": [\"Email Address\"],\n    \"data filters\": [{\n        \"column\": \"Student ID\",\n        \"operator\": \"=\",\n        \"value\": \"4\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"Date First Registered\"],\n    \"data filters\": [{\n        \"column\": \"First Name\",\n        \"operator\": \"=\",\n        \"value\": \"Timothy\"\n    },\n    {\n        \"column\": \"Last Name\",\n        \"operator\": \"=\",\n        \"value\": \"Ward\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hi there! How many different semesters does this list have? | Do  you  mean  the type of  semester name\uff1f | Yes!  My apologies for being unclear.  How many different semester name types are on this list?", "select_target": [22, 23, 24], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["semester name"], ["semester name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"semester name\"]\n}"}, {"previous_utterances": ["Hi there! How many different semesters does this list have? | Do  you  mean  the type of  semester name\uff1f | Yes!  My apologies for being unclear.  How many different semester name types are on this list?"], "utterance": "Awesome!  Much appreciated!  Can you filter this list to show just the semester names which do not have any \nstudent enrolment ids associated, or in other words semesters which do not have any students enrolled?", "select_target": [22, 23, 24], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["semester name"], ["semester name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"semester name\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": [{\n        \"column\": \"student enrolment id\",\n        \"operator\": \"!=\",\n        \"value\": \"*\"\n    }]\n}"}, {"previous_utterances": ["Awesome!  Much appreciated!  Can you filter this list to show just the semester names which do not have any \nstudent enrolment ids associated, or in other words semesters which do not have any students enrolled?", "Hi there! How many different semesters does this list have? | Do  you  mean  the type of  semester name\uff1f | Yes!  My apologies for being unclear.  How many different semester name types are on this list?"], "utterance": "Thank you!  Can you update this list to show the associated semester IDs and semester descriptions?", "select_target": [22, 23, 24], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ", "number_predicates": 0}, "prior_select": [["semester name"], ["semester name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"semester name\"]\n}", "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": [{\n        \"column\": \"student enrolment id\",\n        \"operator\": \"!=\",\n        \"value\": \"*\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"semester id\", \"semester name\", \"semester description\"],\n    \"data filters\": [{\n        \"column\": \"student enrolment id\",\n        \"operator\": \"!=\",\n        \"value\": \"*\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what are the degree_program_id in the Table Name: Student_Enrolment?", "select_target": [23, 22], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["semester name"], ["semester id"], ["degree program id"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what are the degree_program_id in the Table Name: Student_Enrolment?"], "utterance": "what are the semester_id in the Table Name: Student_Enrolment?", "select_target": [23, 22], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["semester name"], ["semester id"], ["degree program id"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"semester id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what are the semester_id in the Table Name: Student_Enrolment?", "what are the degree_program_id in the Table Name: Student_Enrolment?"], "utterance": "what are the semester_name in the Table Name: Semesters?", "select_target": [23, 22], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["semester name"], ["semester id"], ["degree program id"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"semester id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what are the semester_name in the Table Name: Semesters?", "what are the semester_id in the Table Name: Student_Enrolment?", "what are the degree_program_id in the Table Name: Student_Enrolment?"], "utterance": "what is the semester which most student registered in? show both the name and the id.", "select_target": [23, 22], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["semester name"], ["semester id"], ["degree program id"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"semester id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"semester name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"semester id\", \"semester name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many times at most can a course enrollment result show in different transcripts?", "select_target": [38], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "number_predicates": 0}, "prior_select": [["student course id"], ["*"], ["student course id"], ["*"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"student enrolment id\", \"transcript id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["How many times at most can a course enrollment result show in different transcripts?"], "utterance": "What are the course enrollment ids for those, please?", "select_target": [38], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "number_predicates": 0}, "prior_select": [["student course id"], ["*"], ["student course id"], ["*"]], "prior_where_col": [[], [], [], []], "result": ["{\n  \"data columns\": [\"student enrolment id\", \"transcript id\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["What are the course enrollment ids for those, please?", "How many times at most can a course enrollment result show in different transcripts?"], "utterance": "What is the least number of times of a course enrollment result shows in different transcripts?", "select_target": [38], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "number_predicates": 0}, "prior_select": [["student course id"], ["*"], ["student course id"], ["*"]], "prior_where_col": [[], [], [], []], "result": ["{\n  \"data columns\": [\"student enrolment id\", \"transcript id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"count\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["What is the least number of times of a course enrollment result shows in different transcripts?", "What are the course enrollment ids for those, please?", "How many times at most can a course enrollment result show in different transcripts?"], "utterance": "What are the course enrollment ids for those, please?", "select_target": [38], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "number_predicates": 0}, "prior_select": [["student course id"], ["*"], ["student course id"], ["*"]], "prior_where_col": [[], [], [], []], "result": ["{\n  \"data columns\": [\"student enrolment id\", \"transcript id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"count\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["What are the course enrollment ids for those, please?", "What is the least number of times of a course enrollment result shows in different transcripts?", "What are the course enrollment ids for those, please?", "How many times at most can a course enrollment result show in different transcripts?"], "utterance": "What is the average student course id?", "select_target": [38], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT avg ( student_course_id )  FROM Transcript_Contents", "number_predicates": 0}, "prior_select": [["student course id"], ["*"], ["student course id"], ["*"]], "prior_where_col": [[], [], [], []], "result": ["{\n  \"data columns\": [\"student enrolment id\", \"transcript id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"count\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"student enrolment id\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"student course id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "how many students are enrolled in a bachelor degree program?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"}, {"previous_utterances": ["how many students are enrolled in a bachelor degree program?"], "utterance": "what are their student IDs?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"}, {"previous_utterances": ["what are their student IDs?", "how many students are enrolled in a bachelor degree program?"], "utterance": "Who are the students with student id 9?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"9\"\n        }\n    ]\n}"}, {"previous_utterances": ["Who are the students with student id 9?", "what are their student IDs?", "how many students are enrolled in a bachelor degree program?"], "utterance": "what about id 7?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"9\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"7\"\n        }\n    ]\n}"}, {"previous_utterances": ["what about id 7?", "Who are the students with student id 9?", "what are their student IDs?", "how many students are enrolled in a bachelor degree program?"], "utterance": "what are the degrees of the students in the bachelor program?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"9\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"7\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"degree summary name\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"}, {"previous_utterances": ["what are the degrees of the students in the bachelor program?", "what about id 7?", "Who are the students with student id 9?", "what are their student IDs?", "how many students are enrolled in a bachelor degree program?"], "utterance": "what are the different degree descriptions available?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"9\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"7\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"degree summary name\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"degree summary description\"]\n}"}, {"previous_utterances": ["what are the different degree descriptions available?", "what are the degrees of the students in the bachelor program?", "what about id 7?", "Who are the students with student id 9?", "what are their student IDs?", "how many students are enrolled in a bachelor degree program?"], "utterance": "what were the student ids in the bachelor program again?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"9\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"7\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"degree summary name\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"degree summary description\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"}, {"previous_utterances": ["what were the student ids in the bachelor program again?", "what are the different degree descriptions available?", "what are the degrees of the students in the bachelor program?", "what about id 7?", "Who are the students with student id 9?", "what are their student IDs?", "how many students are enrolled in a bachelor degree program?"], "utterance": "what are those students first name, middle name, and last names?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[17, "eq", "Bachelor"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'", "number_predicates": 1}, "prior_select": [["student id"], ["degree summary description"], ["first name", "middle name", "last name", "degree summary name"], ["first name", "middle name", "last name"], ["first name", "middle name", "last name"], ["student id"], ["*"]], "prior_where_col": [[["eq", "degree summary name", "Bachelor"]], [], [["eq", "degree summary name", "Bachelor"]], [["eq", "student id", 7]], [["eq", "student id", 9]], [["eq", "degree summary name", "Bachelor"]], [["eq", "degree summary name", "Bachelor"]]], "result": ["{\n    \"data columns\": [\"degree program id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"9\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"student id\",\n            \"operator\": \"=\",\n            \"value\": \"7\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"degree summary name\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"degree summary description\"]\n}", "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [\n        {\n            \"column\": \"degree summary name\",\n            \"operator\": \"=\",\n            \"value\": \"bachelor\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Hello!  Can you tell me how many students in total there are on this list?", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered  FROM Students", "number_predicates": 0}, "prior_select": [["first name", "middle name", "last name"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"student id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Hello!  Can you tell me how many students in total there are on this list?"], "utterance": "Excellent!  Can you show me a list of all 15 students and list their first names, middle names, and last names?", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered  FROM Students", "number_predicates": 0}, "prior_select": [["first name", "middle name", "last name"], ["*"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"student id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"first name\", \"middle name\", \"last name\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Excellent!  Can you show me a list of all 15 students and list their first names, middle names, and last names?", "Hello!  Can you tell me how many students in total there are on this list?"], "utterance": "Thanks!  Can you update this list to include the \"date first registered\" information associated with each student?", "select_target": [34], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT date_first_registered  FROM Students", "number_predicates": 0}, "prior_select": [["first name", "middle name", "last name"], ["*"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"student id\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"first name\", \"middle name\", \"last name\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"first name\", \"middle name\", \"last name\", \"date first registered\"],\n\"data filters\": []\n}"}, {"previous_utterances": [""], "utterance": "when is the first transcript released?", "select_target": [41], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "number_predicates": 0}, "prior_select": [[]], "prior_where_col": [[]], "pred_intent": "{\n  \"data columns\": [\"transcript date\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many graduates of the school are there?", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [{\n        \"column\": \"degree program id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"}, {"previous_utterances": ["How many graduates of the school are there?"], "utterance": "Ok. Who graduated the earliest? | What attributes of this student who graduated the earliest would you like to know? | Please tell me the first name, middle name, and last name.", "select_target": [28, 29, 30], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "number_predicates": 0}, "prior_select": [["*"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"student id\"],\n    \"data filters\": [{\n        \"column\": \"degree program id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\", \"middle name\", \"last name\"],\n    \"data filters\": [{\n        \"column\": \"date left\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }],\n    \"limit\": 1,\n    \"order by\": {\n        \"column\": \"date left\",\n        \"desc\": false\n    }\n}"}, {"previous_utterances": [], "utterance": "How many courses in this table? | Do you mean the number of the courses with different course ids? | Yes.", "select_target": [10], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1", "number_predicates": 0}, "prior_select": [["course id"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n\"data columns\": [\"course id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["How many courses in this table? | Do you mean the number of the courses with different course ids? | Yes."], "utterance": "What's the name of the course with least number of students of enrollments?", "select_target": [10], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1", "number_predicates": 0}, "prior_select": [["course id"]], "prior_where_col": [[]], "result": ["{\n\"data columns\": [\"course id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"course name\"],\n\"data filters\": [],\n\"sort by\": {\n\"column\": \"student enrolment id\",\n\"order\": \"asc\"\n},\n\"limit\": 1\n}"}, {"previous_utterances": [], "utterance": "Find the first name of the students who permanently live in the country Haiti.", "select_target": [32], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[31, "eq", "09700166582"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'", "number_predicates": 1}, "prior_select": [["last name", "*"], ["first name"], ["first name"]], "prior_where_col": [[["eq", "cell mobile number", "09700166582"]], [["eq", "cell mobile number", "09700166582"]], [["eq", "country", "Haiti"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    }]\n}"}, {"previous_utterances": ["Find the first name of the students who permanently live in the country Haiti."], "utterance": "Please also find the first name of the students who have the cell phone number 09700166582", "select_target": [32], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[31, "eq", "09700166582"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'", "number_predicates": 1}, "prior_select": [["last name", "*"], ["first name"], ["first name"]], "prior_where_col": [[["eq", "cell mobile number", "09700166582"]], [["eq", "cell mobile number", "09700166582"]], [["eq", "country", "Haiti"]]], "result": ["{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    },\n    {\n        \"column\": \"cell mobile number\",\n        \"operator\": \"=\",\n        \"value\": \"09700166582\"\n    }]\n}"}, {"previous_utterances": ["Please also find the first name of the students who have the cell phone number 09700166582", "Find the first name of the students who permanently live in the country Haiti."], "utterance": "Can you show me the last name and address for him? | Do you want his current address or the permanent address? | current address please", "select_target": [32], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[31, "eq", "09700166582"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'", "number_predicates": 1}, "prior_select": [["last name", "*"], ["first name"], ["first name"]], "prior_where_col": [[["eq", "cell mobile number", "09700166582"]], [["eq", "cell mobile number", "09700166582"]], [["eq", "country", "Haiti"]]], "result": ["{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    }]\n}", "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    },\n    {\n        \"column\": \"cell mobile number\",\n        \"operator\": \"=\",\n        \"value\": \"09700166582\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\", \"address\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    },\n    {\n        \"column\": \"cell mobile number\",\n        \"operator\": \"=\",\n        \"value\": \"09700166582\"\n    },\n    {\n        \"column\": \"address id\",\n        \"operator\": \"=\",\n        \"value\": \"current address id\"\n    }]\n}"}, {"previous_utterances": ["Can you show me the last name and address for him? | Do you want his current address or the permanent address? | current address please", "Please also find the first name of the students who have the cell phone number 09700166582", "Find the first name of the students who permanently live in the country Haiti."], "utterance": "Ok. Can you also give me his email address?", "select_target": [32], "column_names": ["address id", "line 1", "line 2", "line 3", "city", "zip postcode", "state province county", "country", "other address details", "course id", "course name", "course description", "other details", "department id", "department name", "department description", "degree program id", "degree summary name", "degree summary description", "section id", "section name", "section description", "semester id", "semester name", "semester description", "student id", "current address id", "permanent address id", "first name", "middle name", "last name", "cell mobile number", "email address", "ssn", "date first registered", "date left", "other student details", "student enrolment id", "student course id", "transcript id", "transcript date", "*"], "where_clauses": [[31, "eq", "09700166582"]], "debug_info": {"where_categorization": -1, "db_id": "student_transcripts_tracking", "raw_sql": "SELECT email_address FROM Students where cell_mobile_number  =  '09700166582'", "number_predicates": 1}, "prior_select": [["last name", "*"], ["first name"], ["first name"]], "prior_where_col": [[["eq", "cell mobile number", "09700166582"]], [["eq", "cell mobile number", "09700166582"]], [["eq", "country", "Haiti"]]], "result": ["{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    }]\n}", "{\n    \"data columns\": [\"first name\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    },\n    {\n        \"column\": \"cell mobile number\",\n        \"operator\": \"=\",\n        \"value\": \"09700166582\"\n    }]\n}", "{\n    \"data columns\": [\"last name\", \"address\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    },\n    {\n        \"column\": \"cell mobile number\",\n        \"operator\": \"=\",\n        \"value\": \"09700166582\"\n    },\n    {\n        \"column\": \"address id\",\n        \"operator\": \"=\",\n        \"value\": \"current address id\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"last name\", \"address\", \"email address\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Haiti\"\n    },\n    {\n        \"column\": \"cell mobile number\",\n        \"operator\": \"=\",\n        \"value\": \"09700166582\"\n    },\n    {\n        \"column\": \"address id\",\n        \"operator\": \"=\",\n        \"value\": \"permanent address id\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Show me the documents", "select_target": [13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[0, "eq", "PPT"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT'", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{ \"data columns\": [\"document id\", \"document name\", \"document description\"], \"data filters\": [] }"}, {"previous_utterances": ["Show me the documents"], "utterance": "Show me the documents using template", "select_target": [13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[0, "eq", "PPT"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT'", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{ \"data columns\": [\"document id\", \"document name\", \"document description\"], \"data filters\": [] }"], "pred_intent": "{ \"data columns\": [\"document id\", \"document name\", \"document description\"], \"data filters\": [{\"column\": \"template type description\", \"operator\": \"=\", \"value\": \"template\"}] }"}, {"previous_utterances": ["Show me the documents using template", "Show me the documents"], "utterance": "How many of them are using the template with code 'PPT'?", "select_target": [13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[0, "eq", "PPT"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT'", "number_predicates": 1}, "prior_select": [["*"], ["*"]], "prior_where_col": [[], []], "result": ["{ \"data columns\": [\"document id\", \"document name\", \"document description\"], \"data filters\": [] }", "{ \"data columns\": [\"document id\", \"document name\", \"document description\"], \"data filters\": [{\"column\": \"template type description\", \"operator\": \"=\", \"value\": \"template\"}] }"], "pred_intent": "{ \"data columns\": [], \"data filters\": [{\"column\": \"template type code\", \"operator\": \"=\", \"value\": \"PPT\"}] }"}, {"previous_utterances": [], "utterance": "What is the document id with least number of paragraphs?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[7, "eq", 2394]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "select Paragraph_Text from Paragraphs where Document_ID  =  2394", "number_predicates": 1}, "prior_select": [["paragraph id"], ["document id"], ["document id"]], "prior_where_col": [[["eq", "document id", 2394]], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the document id with least number of paragraphs?"], "utterance": "and the document with the most number of paragraphs?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[7, "eq", 2394]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "select Paragraph_Text from Paragraphs where Document_ID  =  2394", "number_predicates": 1}, "prior_select": [["paragraph id"], ["document id"], ["document id"]], "prior_where_col": [[["eq", "document id", 2394]], [], []], "result": ["{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": ["and the document with the most number of paragraphs?", "What is the document id with least number of paragraphs?"], "utterance": "how many paragraphs are in that document with id of 2394?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[7, "eq", 2394]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "select Paragraph_Text from Paragraphs where Document_ID  =  2394", "number_predicates": 1}, "prior_select": [["paragraph id"], ["document id"], ["document id"]], "prior_where_col": [[["eq", "document id", 2394]], [], []], "result": ["{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">\",\n            \"value\": \"0\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"paragraph id\"],\n    \"data filters\": [\n        {\n            \"column\": \"document id\",\n            \"operator\": \"=\",\n            \"value\": \"2394\"\n        }\n    ]\n}"}, {"previous_utterances": ["how many paragraphs are in that document with id of 2394?", "and the document with the most number of paragraphs?", "What is the document id with least number of paragraphs?"], "utterance": "What are the paragraph texts of those three paragraphs?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[7, "eq", 2394]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "select Paragraph_Text from Paragraphs where Document_ID  =  2394", "number_predicates": 1}, "prior_select": [["paragraph id"], ["document id"], ["document id"]], "prior_where_col": [[["eq", "document id", 2394]], [], []], "result": ["{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">\",\n            \"value\": \"0\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"paragraph id\"],\n    \"data filters\": [\n        {\n            \"column\": \"document id\",\n            \"operator\": \"=\",\n            \"value\": \"2394\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"paragraph text\"],\n    \"data filters\": [\n        {\n            \"column\": \"document id\",\n            \"operator\": \"=\",\n            \"value\": \"2394\"\n        },\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many ids are in document 'Welcome to NY'? | Do you mean how many paragraphs are associated with document 'Welcome to NY'? | yes", "select_target": [11], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[8, "eq", "Welcome to NY"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'", "number_predicates": 1}, "prior_select": [["paragraph text"], ["*"]], "prior_where_col": [[["eq", "document name", "Welcome to NY"]], [["eq", "document name", "Welcome to NY"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"document id\"],\n\"data filters\": [\n{\n\"column\": \"document name\",\n\"operator\": \"=\",\n\"value\": \"Welcome to NY\"\n}\n]\n}"}, {"previous_utterances": ["How many ids are in document 'Welcome to NY'? | Do you mean how many paragraphs are associated with document 'Welcome to NY'? | yes"], "utterance": "What are their texts?", "select_target": [11], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[8, "eq", "Welcome to NY"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'", "number_predicates": 1}, "prior_select": [["paragraph text"], ["*"]], "prior_where_col": [[["eq", "document name", "Welcome to NY"]], [["eq", "document name", "Welcome to NY"]]], "result": ["{\n\"data columns\": [\"document id\"],\n\"data filters\": [\n{\n\"column\": \"document name\",\n\"operator\": \"=\",\n\"value\": \"Welcome to NY\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"paragraph text\"],\n\"data filters\": [\n{\n\"column\": \"document name\",\n\"operator\": \"=\",\n\"value\": \"Welcome to NY\"\n}\n]\n}"}, {"previous_utterances": ["What are their texts?", "How many ids are in document 'Welcome to NY'? | Do you mean how many paragraphs are associated with document 'Welcome to NY'? | yes"], "utterance": "What are their id numbers?", "select_target": [11], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[8, "eq", "Welcome to NY"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY'", "number_predicates": 1}, "prior_select": [["paragraph text"], ["*"]], "prior_where_col": [[["eq", "document name", "Welcome to NY"]], [["eq", "document name", "Welcome to NY"]]], "result": ["{\n\"data columns\": [\"document id\"],\n\"data filters\": [\n{\n\"column\": \"document name\",\n\"operator\": \"=\",\n\"value\": \"Welcome to NY\"\n}\n]\n}", "{\n\"data columns\": [\"paragraph text\"],\n\"data filters\": [\n{\n\"column\": \"document name\",\n\"operator\": \"=\",\n\"value\": \"Welcome to NY\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"paragraph id\"],\n\"data filters\": [\n{\n\"column\": \"document name\",\n\"operator\": \"=\",\n\"value\": \"Welcome to NY\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "Hello!  How are you?  First, I'll start with a straightforward request...  Can you show me all document IDs and their corresponding document names and number of paragraphs?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[10, "neq", "NULL"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details !=  \"NULL\"", "number_predicates": 1}, "prior_select": [["paragraph text"], ["document id", "document name", "*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"document id\", \"document name\", \"number of paragraphs\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hello!  How are you?  First, I'll start with a straightforward request...  Can you show me all document IDs and their corresponding document names and number of paragraphs?"], "utterance": "Okay...  I'll ask something different.  Can you show me a list of all of the paragraph text values?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[10, "neq", "NULL"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details !=  \"NULL\"", "number_predicates": 1}, "prior_select": [["paragraph text"], ["document id", "document name", "*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"document id\", \"document name\", \"number of paragraphs\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"paragraph text\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Okay...  I'll ask something different.  Can you show me a list of all of the paragraph text values?", "Hello!  How are you?  First, I'll start with a straightforward request...  Can you show me all document IDs and their corresponding document names and number of paragraphs?"], "utterance": "Thanks!  Can you filter this list to show the Paragraph_Texts which have something other than \"NULL\" as the Other Details?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[10, "neq", "NULL"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details !=  \"NULL\"", "number_predicates": 1}, "prior_select": [["paragraph text"], ["document id", "document name", "*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"document id\", \"document name\", \"number of paragraphs\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"paragraph text\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"paragraph text\"],\n    \"data filters\": [{\n        \"column\": \"other details\",\n        \"operator\": \"!=\",\n        \"value\": \"NULL\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What is the version number of template id 3?", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number from Templates where Template_ID  =  4", "number_predicates": 1}, "prior_select": [["template type code"], ["document name"], ["version number"]], "prior_where_col": [[], [["eq", "template id", 25]], [["eq", "template id", 3]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"version number\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"3\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the version number of template id 3?"], "utterance": "What is the document name of template id 25?", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number from Templates where Template_ID  =  4", "number_predicates": 1}, "prior_select": [["template type code"], ["document name"], ["version number"]], "prior_where_col": [[], [["eq", "template id", 25]], [["eq", "template id", 3]]], "result": ["{\n    \"data columns\": [\"version number\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"3\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"document name\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"25\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the document name of template id 25?", "What is the version number of template id 3?"], "utterance": "Show all template types codes that are not used by any document?", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number from Templates where Template_ID  =  4", "number_predicates": 1}, "prior_select": [["template type code"], ["document name"], ["version number"]], "prior_where_col": [[], [["eq", "template id", 25]], [["eq", "template id", 3]]], "result": ["{\n    \"data columns\": [\"version number\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"document name\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"25\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"template type code\"],\n    \"data filters\": [\n        {\n            \"column\": \"document id\",\n            \"operator\": \"!=\",\n            \"value\": \"null\"\n        }\n    ]\n}"}, {"previous_utterances": ["Show all template types codes that are not used by any document?", "What is the document name of template id 25?", "What is the version number of template id 3?"], "utterance": "What is the version number of template id 4?", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number from Templates where Template_ID  =  4", "number_predicates": 1}, "prior_select": [["template type code"], ["document name"], ["version number"]], "prior_where_col": [[], [["eq", "template id", 25]], [["eq", "template id", 3]]], "result": ["{\n    \"data columns\": [\"version number\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"document name\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"25\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"template type code\"],\n    \"data filters\": [\n        {\n            \"column\": \"document id\",\n            \"operator\": \"!=\",\n            \"value\": \"null\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"version number\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"4\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "WHAT IS THE DOCUMENT ID WITH 1 TO 2 PARAGRAPH?", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2", "number_predicates": 0}, "prior_select": [["document id"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">=\",\n            \"value\": \"1\"\n        },\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"<=\",\n            \"value\": \"2\"\n        }\n    ]\n}"}, {"previous_utterances": ["WHAT IS THE DOCUMENT ID WITH 1 TO 2 PARAGRAPH?"], "utterance": "WHAT IS THE DOCUMENT TEXT | Did you mean the \tParagraph Text? | YES", "select_target": [12], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2", "number_predicates": 0}, "prior_select": [["document id"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">=\",\n            \"value\": \"1\"\n        },\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"<=\",\n            \"value\": \"2\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"paragraph text\"],\n    \"data filters\": [\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \">=\",\n            \"value\": \"1\"\n        },\n        {\n            \"column\": \"paragraph id\",\n            \"operator\": \"<=\",\n            \"value\": \"2\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are the templates ever used by any document?", "select_target": [1], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "number_predicates": 0}, "prior_select": [["template type description"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What are the templates ever used by any document?"], "utterance": "What are the template type descriptions for these templates?", "select_target": [1], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "number_predicates": 0}, "prior_select": [["template type description"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"template type description\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"}, {"previous_utterances": ["What are the template type descriptions for these templates?", "What are the templates ever used by any document?"], "utterance": "Can I get the distinct template type descriptions for these templates?", "select_target": [1], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "number_predicates": 0}, "prior_select": [["template type description"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"template type description\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"template type description\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what are all of the template ids?", "select_target": [2, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "number_predicates": 0}, "prior_select": [["*"], ["date effective to"], ["template id"], ["template id"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what are all of the template ids?"], "utterance": "which of those is not used in a document", "select_target": [2, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "number_predicates": 0}, "prior_select": [["*"], ["date effective to"], ["template id"], ["template id"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}"}, {"previous_utterances": ["which of those is not used in a document", "what are all of the template ids?"], "utterance": "are those still effective? | Do you mean the effective-to date of those templates? | yes", "select_target": [2, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "number_predicates": 0}, "prior_select": [["*"], ["date effective to"], ["template id"], ["template id"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"template id\", \"date effective to\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["are those still effective? | Do you mean the effective-to date of those templates? | yes", "which of those is not used in a document", "what are all of the template ids?"], "utterance": "how many are used in documents? | 12 templates are used in a document. | and how many templates are not used?", "select_target": [2, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "number_predicates": 0}, "prior_select": [["*"], ["date effective to"], ["template id"], ["template id"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}", "{\n    \"data columns\": [\"template id\", \"date effective to\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}"}, {"previous_utterances": ["how many are used in documents? | 12 templates are used in a document. | and how many templates are not used?", "are those still effective? | Do you mean the effective-to date of those templates? | yes", "which of those is not used in a document", "what are all of the template ids?"], "utterance": "what were those IDs again?", "select_target": [2, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "number_predicates": 0}, "prior_select": [["*"], ["date effective to"], ["template id"], ["template id"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}", "{\n    \"data columns\": [\"template id\", \"date effective to\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [{\n        \"column\": \"template id\",\n        \"operator\": \"not in\",\n        \"value\": \"document template id\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "how many templates there", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 0]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number  FROM Templates where Template_ID = 0", "number_predicates": 1}, "prior_select": [["template type code"], ["date effective from", "date effective to"], ["*"]], "prior_where_col": [[["eq", "template id", 4]], [["eq", "template id", 1]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many templates there"], "utterance": "what is the date effective of template id 1", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 0]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number  FROM Templates where Template_ID = 0", "number_predicates": 1}, "prior_select": [["template type code"], ["date effective from", "date effective to"], ["*"]], "prior_where_col": [[["eq", "template id", 4]], [["eq", "template id", 1]], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"date effective from\", \"date effective to\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the date effective of template id 1", "how many templates there"], "utterance": "what is the template type code of template id 4", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 0]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number  FROM Templates where Template_ID = 0", "number_predicates": 1}, "prior_select": [["template type code"], ["date effective from", "date effective to"], ["*"]], "prior_where_col": [[["eq", "template id", 4]], [["eq", "template id", 1]], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"date effective from\", \"date effective to\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"template type code\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"4\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the template type code of template id 4", "what is the date effective of template id 1", "how many templates there"], "utterance": "what is the version number of template id 0", "select_target": [3], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[2, "eq", 0]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT Version_Number  FROM Templates where Template_ID = 0", "number_predicates": 1}, "prior_select": [["template type code"], ["date effective from", "date effective to"], ["*"]], "prior_where_col": [[["eq", "template id", 4]], [["eq", "template id", 1]], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"date effective from\", \"date effective to\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"1\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"template type code\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"4\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"version number\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "How many documents have template type code BK?", "select_target": [13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" ) ", "number_predicates": 0}, "prior_select": [["document name"], ["*"]], "prior_where_col": [[["eq", "template type code", "BK"]], [["eq", "template type code", "BK"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [{\n        \"column\": \"template type code\",\n        \"operator\": \"=\",\n        \"value\": \"BK\"\n    }]\n}"}, {"previous_utterances": ["How many documents have template type code BK?"], "utterance": "And their names?", "select_target": [13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" ) ", "number_predicates": 0}, "prior_select": [["document name"], ["*"]], "prior_where_col": [[["eq", "template type code", "BK"]], [["eq", "template type code", "BK"]]], "result": ["{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [{\n        \"column\": \"template type code\",\n        \"operator\": \"=\",\n        \"value\": \"BK\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"document id\", \"document name\"],\n    \"data filters\": [{\n        \"column\": \"template type code\",\n        \"operator\": \"=\",\n        \"value\": \"BK\"\n    }]\n}"}, {"previous_utterances": ["And their names?", "How many documents have template type code BK?"], "utterance": "How many documents do not have template type code BK?", "select_target": [13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "Select count ( * )  from documents where document_name not in \n ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   \"BK\" ) ", "number_predicates": 0}, "prior_select": [["document name"], ["*"]], "prior_where_col": [[["eq", "template type code", "BK"]], [["eq", "template type code", "BK"]]], "result": ["{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [{\n        \"column\": \"template type code\",\n        \"operator\": \"=\",\n        \"value\": \"BK\"\n    }]\n}", "{\n    \"data columns\": [\"document id\", \"document name\"],\n    \"data filters\": [{\n        \"column\": \"template type code\",\n        \"operator\": \"=\",\n        \"value\": \"BK\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"document id\"],\n    \"data filters\": [{\n        \"column\": \"template type code\",\n        \"operator\": \"!=\",\n        \"value\": \"BK\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hello there!  Can you please list all the template IDs and which document IDs they are associated with?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID", "number_predicates": 0}, "prior_select": [["template id"], ["template id", "document id"], ["template id"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Hello there!  Can you please list all the template IDs and which document IDs they are associated with?"], "utterance": "Thanks!  Unfortunately, I am seeing only the Template_IDs.  Can you update the list to show the document IDs as well?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID", "number_predicates": 0}, "prior_select": [["template id"], ["template id", "document id"], ["template id"]], "prior_where_col": [[], [], []], "result": ["{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["Thanks!  Unfortunately, I am seeing only the Template_IDs.  Can you update the list to show the document IDs as well?", "Hello there!  Can you please list all the template IDs and which document IDs they are associated with?"], "utterance": "Alright!  Can you show me a list of the Template_IDs for each template that is not associated with a Document_ID?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID", "number_predicates": 0}, "prior_select": [["template id"], ["template id", "document id"], ["template id"]], "prior_where_col": [[], [], []], "result": ["{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"template id\"],\n\"data filters\": [{\n\"column\": \"document id\",\n\"operator\": \"=\",\n\"value\": \"\"\n}]\n}"}, {"previous_utterances": ["Alright!  Can you show me a list of the Template_IDs for each template that is not associated with a Document_ID?", "Thanks!  Unfortunately, I am seeing only the Template_IDs.  Can you update the list to show the document IDs as well?", "Hello there!  Can you please list all the template IDs and which document IDs they are associated with?"], "utterance": "Nice!  Finally, can you update that list to show the associated template type code for each of these?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID", "number_predicates": 0}, "prior_select": [["template id"], ["template id", "document id"], ["template id"]], "prior_where_col": [[], [], []], "result": ["{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"template id\", \"document id\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"template id\"],\n\"data filters\": [{\n\"column\": \"document id\",\n\"operator\": \"=\",\n\"value\": \"\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"template id\", \"template type code\"],\n\"data filters\": [{\n\"column\": \"document id\",\n\"operator\": \"=\",\n\"value\": \"\"\n}]\n}"}, {"previous_utterances": [], "utterance": "Can you show me document ids?", "select_target": [7, 13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id", "number_predicates": 0}, "prior_select": [["document id", "*"], ["document id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"document id\"]\n}"}, {"previous_utterances": ["Can you show me document ids?"], "utterance": "Can you show the number of paragraphs in each document?", "select_target": [7, 13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id", "number_predicates": 0}, "prior_select": [["document id", "*"], ["document id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"document id\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"document id\", \"Number of Paragraphs\"]\n}"}, {"previous_utterances": ["Can you show the number of paragraphs in each document?", "Can you show me document ids?"], "utterance": "Can you order it by document id?", "select_target": [7, 13], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id", "number_predicates": 0}, "prior_select": [["document id", "*"], ["document id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"document id\"]\n}", "{\n    \"data columns\": [\"document id\", \"Number of Paragraphs\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"document id\", \"Number of Paragraphs\"],\n    \"data filters\": [],\n    \"sort column\": \"document id\",\n    \"sort order\": \"asc\"\n}"}, {"previous_utterances": [], "utterance": "Hello!  How many template IDs have the description of \"Presentation\"?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[1, "eq", "Presentation"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "number_predicates": 1}, "prior_select": [["template id"], ["*"]], "prior_where_col": [[["eq", "template type description", "Presentation"]], [["eq", "template type description", "Presentation"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [\n        {\n            \"column\": \"template type description\",\n            \"operator\": \"=\",\n            \"value\": \"Presentation\"\n        }\n    ]\n}"}, {"previous_utterances": ["Hello!  How many template IDs have the description of \"Presentation\"?"], "utterance": "Thank you!  Can you please provide me with the list of the template ids with the template type description of \"Presentation\"?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[1, "eq", "Presentation"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "number_predicates": 1}, "prior_select": [["template id"], ["*"]], "prior_where_col": [[["eq", "template type description", "Presentation"]], [["eq", "template type description", "Presentation"]]], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [\n        {\n            \"column\": \"template type description\",\n            \"operator\": \"=\",\n            \"value\": \"Presentation\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [\n        {\n            \"column\": \"template type description\",\n            \"operator\": \"=\",\n            \"value\": \"Presentation\"\n        }\n    ]\n}"}, {"previous_utterances": ["Thank you!  Can you please provide me with the list of the template ids with the template type description of \"Presentation\"?", "Hello!  How many template IDs have the description of \"Presentation\"?"], "utterance": "Can you provide me with the template type code for these three Temple ids?", "select_target": [2, 0], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [[1, "eq", "Presentation"]], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   \"Presentation\"", "number_predicates": 1}, "prior_select": [["template id"], ["*"]], "prior_where_col": [[["eq", "template type description", "Presentation"]], [["eq", "template type description", "Presentation"]]], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [\n        {\n            \"column\": \"template type description\",\n            \"operator\": \"=\",\n            \"value\": \"Presentation\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": [\n        {\n            \"column\": \"template type description\",\n            \"operator\": \"=\",\n            \"value\": \"Presentation\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"template type code\"],\n    \"data filters\": [\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"TemplateID1\"\n        },\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"TemplateID2\"\n        },\n        {\n            \"column\": \"template id\",\n            \"operator\": \"=\",\n            \"value\": \"TemplateID3\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Can I get all the documents with 'w' in them | Do you want documents with 'w' in the name or description? | Description pls", "select_target": [8, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "number_predicates": 0}, "prior_select": [["document name"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"document name\", \"document description\"],\n    \"data filters\": [{\n        \"column\": \"document name\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    },\n    {\n        \"column\": \"document description\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    }]\n}"}, {"previous_utterances": ["Can I get all the documents with 'w' in them | Do you want documents with 'w' in the name or description? | Description pls"], "utterance": "Ok can I get just their names", "select_target": [8, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "number_predicates": 0}, "prior_select": [["document name"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"document name\", \"document description\"],\n    \"data filters\": [{\n        \"column\": \"document name\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    },\n    {\n        \"column\": \"document description\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"document name\"],\n    \"data filters\": [{\n        \"column\": \"document name\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    }]\n}"}, {"previous_utterances": ["Ok can I get just their names", "Can I get all the documents with 'w' in them | Do you want documents with 'w' in the name or description? | Description pls"], "utterance": "I need the template ids too oops", "select_target": [8, 2], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "number_predicates": 0}, "prior_select": [["document name"], ["*"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"document name\", \"document description\"],\n    \"data filters\": [{\n        \"column\": \"document name\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    },\n    {\n        \"column\": \"document description\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    }]\n}", "{\n    \"data columns\": [\"document name\"],\n    \"data filters\": [{\n        \"column\": \"document name\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"template id\", \"document name\"],\n    \"data filters\": [{\n        \"column\": \"document name\",\n        \"operator\": \"like\",\n        \"value\": \"%w%\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Hi!  Can you tell me how many unique template IDs there are?", "select_target": [7], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1", "number_predicates": 0}, "prior_select": [["template id"], ["template id"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Hi!  Can you tell me how many unique template IDs there are?"], "utterance": "How many of those 12 template IDs are used by more than one document?", "select_target": [7], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1", "number_predicates": 0}, "prior_select": [["template id"], ["template id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many of those 12 template IDs are used by more than one document?", "Hi!  Can you tell me how many unique template IDs there are?"], "utterance": "Great!  Can you show me the corresponding document that used each of those template IDs on the list you just provided me?", "select_target": [7], "column_names": ["template type code", "template type description", "template id", "version number", "date effective from", "date effective to", "template details", "document id", "document name", "document description", "other details", "paragraph id", "paragraph text", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "cre_Doc_Template_Mgt", "raw_sql": "SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1", "number_predicates": 0}, "prior_select": [["template id"], ["template id"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"template id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"document name\", \"template id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Show the name and the release year of the song by the youngest singer", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[8, "eq", "United States"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Name FROM singer where country  =  'United States'", "number_predicates": 1}, "prior_select": [["country"], ["name", "age"], ["name"], ["song name", "song release year"], ["song name", "song release year"]], "prior_where_col": [[], [], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}"}, {"previous_utterances": ["Show the name and the release year of the song by the youngest singer"], "utterance": "Ok. Can you show me the name and the release year of the song by the oldest singer", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[8, "eq", "United States"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Name FROM singer where country  =  'United States'", "number_predicates": 1}, "prior_select": [["country"], ["name", "age"], ["name"], ["song name", "song release year"], ["song name", "song release year"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}"}, {"previous_utterances": ["Ok. Can you show me the name and the release year of the song by the oldest singer", "Show the name and the release year of the song by the youngest singer"], "utterance": "Can you also show me the name of the youngest singer", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[8, "eq", "United States"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Name FROM singer where country  =  'United States'", "number_predicates": 1}, "prior_select": [["country"], ["name", "age"], ["name"], ["song name", "song release year"], ["song name", "song release year"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you also show me the name of the youngest singer", "Ok. Can you show me the name and the release year of the song by the oldest singer", "Show the name and the release year of the song by the youngest singer"], "utterance": "And what is the name of the oldest singer and his age", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[8, "eq", "United States"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Name FROM singer where country  =  'United States'", "number_predicates": 1}, "prior_select": [["country"], ["name", "age"], ["name"], ["song name", "song release year"], ["song name", "song release year"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}"}, {"previous_utterances": ["And what is the name of the oldest singer and his age", "Can you also show me the name of the youngest singer", "Ok. Can you show me the name and the release year of the song by the oldest singer", "Show the name and the release year of the song by the youngest singer"], "utterance": "and what country was he from?", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[8, "eq", "United States"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Name FROM singer where country  =  'United States'", "number_predicates": 1}, "prior_select": [["country"], ["name", "age"], ["name"], ["song name", "song release year"], ["song name", "song release year"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"age\", \"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}"}, {"previous_utterances": ["and what country was he from?", "And what is the name of the oldest singer and his age", "Can you also show me the name of the youngest singer", "Ok. Can you show me the name and the release year of the song by the oldest singer", "Show the name and the release year of the song by the youngest singer"], "utterance": "give me the names of the singers from United States", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[8, "eq", "United States"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Name FROM singer where country  =  'United States'", "number_predicates": 1}, "prior_select": [["country"], ["name", "age"], ["name"], ["song name", "song release year"], ["song name", "song release year"]], "prior_where_col": [[], [], [], [], []], "result": ["{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"song release year\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"youngest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"age\", \"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"=\",\n            \"value\": \"oldest\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"country\",\n            \"operator\": \"=\",\n            \"value\": \"United States\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "show the stadium names without any concern", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["show the stadium names without any concern"], "utterance": "football stadium | If you meant which football stadium has held the highest number of audience, that would be this one. | yes", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"capacity\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many stadiums can accommodate more than 1000 people in average.?", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["*"]], "prior_where_col": [[], [["gt", "average", 1000]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"capacity\", \"highest\", \"lowest\", \"average\"],\n    \"data filters\": [\n        {\n            \"column\": \"average\",\n            \"operator\": \">\",\n            \"value\": \"1000\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many stadiums can accommodate more than 1000 people in average.?"], "utterance": "sorry , What is the name of the stadium with the lowest attendance in average.?", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["*"]], "prior_where_col": [[], [["gt", "average", 1000]]], "result": ["{\n    \"data columns\": [\"capacity\", \"highest\", \"lowest\", \"average\"],\n    \"data filters\": [\n        {\n            \"column\": \"average\",\n            \"operator\": \">\",\n            \"value\": \"1000\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"average\"],\n    \"data filters\": [\n        {\n            \"column\": \"average\",\n            \"operator\": \"<\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": ["sorry , What is the name of the stadium with the lowest attendance in average.?", "How many stadiums can accommodate more than 1000 people in average.?"], "utterance": "What about the one with highest average attendance?", "select_target": [2], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT name FROM stadium ORDER BY average DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["name"], ["*"]], "prior_where_col": [[], [["gt", "average", 1000]]], "result": ["{\n    \"data columns\": [\"capacity\", \"highest\", \"lowest\", \"average\"],\n    \"data filters\": [\n        {\n            \"column\": \"average\",\n            \"operator\": \">\",\n            \"value\": \"1000\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"name\", \"average\"],\n    \"data filters\": [\n        {\n            \"column\": \"average\",\n            \"operator\": \"<\",\n            \"value\": \"1\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\", \"average\"],\n    \"data filters\": [\n        {\n            \"column\": \"average\",\n            \"operator\": \">\",\n            \"value\": \"1\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "what is the age of Joe sharp", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[12, "eq", "True"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "select count ( * )  from singer where Is_male  =  \"True\"", "number_predicates": 1}, "prior_select": [["*"], ["age"]], "prior_where_col": [[["eq", "country", "United States"]], [["eq", "name", "Joe Sharp"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"Joe Sharp\"\n    }]\n}"}, {"previous_utterances": ["what is the age of Joe sharp"], "utterance": "How many US Singers?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[12, "eq", "True"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "select count ( * )  from singer where Is_male  =  \"True\"", "number_predicates": 1}, "prior_select": [["*"], ["age"]], "prior_where_col": [[["eq", "country", "United States"]], [["eq", "name", "Joe Sharp"]]], "result": ["{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"Joe Sharp\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n    \"column\": \"country\",\n    \"operator\": \"=\",\n    \"value\": \"US\"\n    }]\n}"}, {"previous_utterances": ["How many US Singers?", "what is the age of Joe sharp"], "utterance": "How many Male Singers?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[12, "eq", "True"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "select count ( * )  from singer where Is_male  =  \"True\"", "number_predicates": 1}, "prior_select": [["*"], ["age"]], "prior_where_col": [[["eq", "country", "United States"]], [["eq", "name", "Joe Sharp"]]], "result": ["{\n    \"data columns\": [\"age\"],\n    \"data filters\": [{\n    \"column\": \"name\",\n    \"operator\": \"=\",\n    \"value\": \"Joe Sharp\"\n    }]\n}", "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n    \"column\": \"country\",\n    \"operator\": \"=\",\n    \"value\": \"US\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n    \"column\": \"is male\",\n    \"operator\": \"=\",\n    \"value\": \"True\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What is the name of the youngest singer?", "select_target": [10], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Tribal King"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_release_year FROM singer where name  =  'Tribal King'", "number_predicates": 1}, "prior_select": [["song name"], ["name"]], "prior_where_col": [[["eq", "name", "Tribal King"]], []], "result": [], "pred_intent": "{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"age\",\n\"operator\": \"<\",\n\"value\": \"40\"\n},\n{\n\"column\": \"is male\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"}, {"previous_utterances": ["What is the name of the youngest singer?"], "utterance": "What's the name of the song by Tribal King?", "select_target": [10], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Tribal King"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_release_year FROM singer where name  =  'Tribal King'", "number_predicates": 1}, "prior_select": [["song name"], ["name"]], "prior_where_col": [[["eq", "name", "Tribal King"]], []], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"age\",\n\"operator\": \"<\",\n\"value\": \"40\"\n},\n{\n\"column\": \"is male\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"song name\"],\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Tribal King\"\n}\n]\n}"}, {"previous_utterances": ["What's the name of the song by Tribal King?", "What is the name of the youngest singer?"], "utterance": "What was the release year of that song?", "select_target": [10], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Tribal King"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_release_year FROM singer where name  =  'Tribal King'", "number_predicates": 1}, "prior_select": [["song name"], ["name"]], "prior_where_col": [[["eq", "name", "Tribal King"]], []], "result": ["{\n\"data columns\": [\"name\"],\n\"data filters\": [\n{\n\"column\": \"age\",\n\"operator\": \"<\",\n\"value\": \"40\"\n},\n{\n\"column\": \"is male\",\n\"operator\": \"=\",\n\"value\": \"1\"\n}\n]\n}", "{\n\"data columns\": [\"song name\"],\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Tribal King\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"song release year\"],\n\"data filters\": [\n{\n\"column\": \"name\",\n\"operator\": \"=\",\n\"value\": \"Tribal King\"\n},\n{\n\"column\": \"song name\",\n\"operator\": \"=\",\n\"value\": \"song name\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "What are the names of the singers whose song release year is greater than the average song release year", "select_target": [9], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[11, "gt", "age"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ", "number_predicates": 1}, "prior_select": [["song name"], ["song release year"], ["song name"]], "prior_where_col": [[], [], [["gt", "song release year", "song_release_year"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"song release year\",\n        \"operator\": \">\",\n        \"value\": \"average\"\n    }]\n}"}, {"previous_utterances": ["What are the names of the singers whose song release year is greater than the average song release year"], "utterance": "What is the average song release year?", "select_target": [9], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[11, "gt", "age"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ", "number_predicates": 1}, "prior_select": [["song name"], ["song release year"], ["song name"]], "prior_where_col": [[], [], [["gt", "song release year", "song_release_year"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"song release year\",\n        \"operator\": \">\",\n        \"value\": \"average\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"average\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the average song release year?", "What are the names of the singers whose song release year is greater than the average song release year"], "utterance": "List the songs in increasing release years | Do you want the names of the songs ordered by their release year? | Yes I do", "select_target": [9], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[11, "gt", "age"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ", "number_predicates": 1}, "prior_select": [["song name"], ["song release year"], ["song name"]], "prior_where_col": [[], [], [["gt", "song release year", "song_release_year"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"song release year\",\n        \"operator\": \">\",\n        \"value\": \"average\"\n    }]\n}", "{\n    \"data columns\": [\"average\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"song name\"],\n    \"data filters\": [],\n    \"order\": {\n        \"column\": \"song release year\",\n        \"direction\": \"asc\"\n    }\n}"}, {"previous_utterances": ["List the songs in increasing release years | Do you want the names of the songs ordered by their release year? | Yes I do", "What is the average song release year?", "What are the names of the singers whose song release year is greater than the average song release year"], "utterance": "List all song names by singers above the average age", "select_target": [9], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[11, "gt", "age"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ", "number_predicates": 1}, "prior_select": [["song name"], ["song release year"], ["song name"]], "prior_where_col": [[], [], [["gt", "song release year", "song_release_year"]]], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [{\n        \"column\": \"song release year\",\n        \"operator\": \">\",\n        \"value\": \"average\"\n    }]\n}", "{\n    \"data columns\": [\"average\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"song name\"],\n    \"data filters\": [],\n    \"order\": {\n        \"column\": \"song release year\",\n        \"direction\": \"asc\"\n    }\n}"], "pred_intent": "{\n    \"data columns\": [\"song name\"],\n    \"data filters\": [{\n        \"column\": \"age\",\n        \"operator\": \">\",\n        \"value\": \"average\"\n    }],\n    \"order\": {\n        \"column\": \"name\",\n        \"direction\": \"asc\"\n    }\n}"}, {"previous_utterances": [], "utterance": "show the name and theme for all concerts and the number of singers in each concert.", "select_target": [0], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[14, "eq", "Super bootcamp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "number_predicates": 1}, "prior_select": [["year"], ["concert name", "theme", "*"]], "prior_where_col": [[["eq", "concert name", "Super bootcamp"]], []], "result": [], "pred_intent": "{\n\"data columns\": [\"name\", \"theme\", \"singer id\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["show the name and theme for all concerts and the number of singers in each concert."], "utterance": "what year was super bootcamp?", "select_target": [0], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[14, "eq", "Super bootcamp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "number_predicates": 1}, "prior_select": [["year"], ["concert name", "theme", "*"]], "prior_where_col": [[["eq", "concert name", "Super bootcamp"]], []], "result": ["{\n\"data columns\": [\"name\", \"theme\", \"singer id\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"year\"],\n\"data filters\": [\n{\n\"column\": \"concert name\",\n\"operator\": \"=\",\n\"value\": \"super bootcamp\"\n}\n]\n}"}, {"previous_utterances": ["what year was super bootcamp?", "show the name and theme for all concerts and the number of singers in each concert."], "utterance": "what is the Stadium ID for Super bootcamp?", "select_target": [0], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[14, "eq", "Super bootcamp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT Stadium_ID FROM concert WHERE concert_Name  =  \"Super bootcamp\"", "number_predicates": 1}, "prior_select": [["year"], ["concert name", "theme", "*"]], "prior_where_col": [[["eq", "concert name", "Super bootcamp"]], []], "result": ["{\n\"data columns\": [\"name\", \"theme\", \"singer id\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"year\"],\n\"data filters\": [\n{\n\"column\": \"concert name\",\n\"operator\": \"=\",\n\"value\": \"super bootcamp\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"stadium id\"],\n\"data filters\": [\n{\n\"column\": \"concert name\",\n\"operator\": \"=\",\n\"value\": \"super bootcamp\"\n}\n]\n}"}, {"previous_utterances": [], "utterance": "Can you tell me which countries a singer above age 40 are from please?", "select_target": [8, 8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "number_predicates": 0}, "prior_select": [["country"], ["country"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 40]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"40\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you tell me which countries a singer above age 40 are from please?"], "utterance": "Can you tell me which countries a singer below age 30 are from please?", "select_target": [8, 8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "number_predicates": 0}, "prior_select": [["country"], ["country"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 40]]], "result": ["{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"40\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": ["Can you tell me which countries a singer below age 30 are from please?", "Can you tell me which countries a singer above age 40 are from please?"], "utterance": "Can you tell me which countries a singer above age 40 and below age 30 are from please?", "select_target": [8, 8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "number_predicates": 0}, "prior_select": [["country"], ["country"]], "prior_where_col": [[["lt", "age", 30]], [["gt", "age", 40]]], "result": ["{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"40\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [\n        {\n            \"column\": \"age\",\n            \"operator\": \">\",\n            \"value\": \"40\"\n        },\n        {\n            \"column\": \"age\",\n            \"operator\": \"<\",\n            \"value\": \"30\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "select_target": [2, 1], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2014], [16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "number_predicates": 2}, "prior_select": [["name"], ["year"], ["year"], ["name", "location"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\"data columns\": [\"name\", \"location\"], \"data filters\": [{\"column\": \"year\", \"operator\": \"in\", \"value\": [\"2014\", \"2015\"]}] }"}, {"previous_utterances": ["Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."], "utterance": "Which year did the concert Super bootcamp happen in?", "select_target": [2, 1], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2014], [16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "number_predicates": 2}, "prior_select": [["name"], ["year"], ["year"], ["name", "location"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\", \"location\"], \"data filters\": [{\"column\": \"year\", \"operator\": \"in\", \"value\": [\"2014\", \"2015\"]}] }"], "pred_intent": "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Super bootcamp\"}]}"}, {"previous_utterances": ["Which year did the concert Super bootcamp happen in?", "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."], "utterance": "And the concert named Auditions?", "select_target": [2, 1], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2014], [16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "number_predicates": 2}, "prior_select": [["name"], ["year"], ["year"], ["name", "location"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\", \"location\"], \"data filters\": [{\"column\": \"year\", \"operator\": \"in\", \"value\": [\"2014\", \"2015\"]}] }", "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Super bootcamp\"}]}"], "pred_intent": "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Auditions\"}]}"}, {"previous_utterances": ["And the concert named Auditions?", "Which year did the concert Super bootcamp happen in?", "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."], "utterance": "What stadium did it happen in?", "select_target": [2, 1], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2014], [16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "number_predicates": 2}, "prior_select": [["name"], ["year"], ["year"], ["name", "location"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\", \"location\"], \"data filters\": [{\"column\": \"year\", \"operator\": \"in\", \"value\": [\"2014\", \"2015\"]}] }", "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Super bootcamp\"}]}", "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Auditions\"}]}"], "pred_intent": "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Auditions\"}]}"}, {"previous_utterances": ["What stadium did it happen in?", "And the concert named Auditions?", "Which year did the concert Super bootcamp happen in?", "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015."], "utterance": "What are the names and locations of stadiums which had some concerts in either 2014 or 2015?", "select_target": [2, 1], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2014], [16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015", "number_predicates": 2}, "prior_select": [["name"], ["year"], ["year"], ["name", "location"]], "prior_where_col": [[], [], [], []], "result": ["{\"data columns\": [\"name\", \"location\"], \"data filters\": [{\"column\": \"year\", \"operator\": \"in\", \"value\": [\"2014\", \"2015\"]}] }", "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Super bootcamp\"}]}", "{\"data columns\": [\"year\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Auditions\"}]}", "{\"data columns\": [\"name\"], \"data filters\": [{\"column\": \"concert name\", \"operator\": \"=\", \"value\": \"Auditions\"}]}"], "pred_intent": "{\"data columns\": [\"name\", \"location\"], \"data filters\": [{\"column\": \"year\", \"operator\": \"in\", \"value\": [\"2014\", \"2015\"]}] }"}, {"previous_utterances": [], "utterance": "When was the Auditions concert?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["year"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2014]], [["eq", "year", 2014], ["eq", "year", 2015]], [["eq", "concert name", "Home Visits"]], [["eq", "concert name", "Super bootcamp"]], [["eq", "concert name", "Auditions"]]], "result": [], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Auditions\"\n        }\n    ]\n}"}, {"previous_utterances": ["When was the Auditions concert?"], "utterance": "When was the Super bootcamp concert?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["year"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2014]], [["eq", "year", 2014], ["eq", "year", 2015]], [["eq", "concert name", "Home Visits"]], [["eq", "concert name", "Super bootcamp"]], [["eq", "concert name", "Auditions"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Auditions\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Super bootcamp\"\n        }\n    ]\n}"}, {"previous_utterances": ["When was the Super bootcamp concert?", "When was the Auditions concert?"], "utterance": "When was the Home Visits concert?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["year"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2014]], [["eq", "year", 2014], ["eq", "year", 2015]], [["eq", "concert name", "Home Visits"]], [["eq", "concert name", "Super bootcamp"]], [["eq", "concert name", "Auditions"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Auditions\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Super bootcamp\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Home Visits\"\n        }\n    ]\n}"}, {"previous_utterances": ["When was the Home Visits concert?", "When was the Super bootcamp concert?", "When was the Auditions concert?"], "utterance": "How many concerts were there total in 2014 or 2015?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["year"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2014]], [["eq", "year", 2014], ["eq", "year", 2015]], [["eq", "concert name", "Home Visits"]], [["eq", "concert name", "Super bootcamp"]], [["eq", "concert name", "Auditions"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Auditions\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Super bootcamp\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Home Visits\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2014\"\n        },\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2015\"\n        }\n    ]\n}"}, {"previous_utterances": ["How many concerts were there total in 2014 or 2015?", "When was the Home Visits concert?", "When was the Super bootcamp concert?", "When was the Auditions concert?"], "utterance": "And how many concerts were there just in 2014?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["year"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2014]], [["eq", "year", 2014], ["eq", "year", 2015]], [["eq", "concert name", "Home Visits"]], [["eq", "concert name", "Super bootcamp"]], [["eq", "concert name", "Auditions"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Auditions\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Super bootcamp\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Home Visits\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2014\"\n        },\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2015\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2014\"\n        }\n    ]\n}"}, {"previous_utterances": ["And how many concerts were there just in 2014?", "How many concerts were there total in 2014 or 2015?", "When was the Home Visits concert?", "When was the Super bootcamp concert?", "When was the Auditions concert?"], "utterance": "And how many were there in 2015?", "select_target": [17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[16, "eq", 2015]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT count ( * )  FROM concert WHERE YEAR   =   2015", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["year"], ["year"], ["year"]], "prior_where_col": [[["eq", "year", 2014]], [["eq", "year", 2014], ["eq", "year", 2015]], [["eq", "concert name", "Home Visits"]], [["eq", "concert name", "Super bootcamp"]], [["eq", "concert name", "Auditions"]]], "result": ["{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Auditions\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Super bootcamp\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"Home Visits\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2014\"\n        },\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2015\"\n        }\n    ]\n}", "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2014\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"2015\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "how many concert are presented on the table", "select_target": [14], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT concert_name from concert", "number_predicates": 0}, "prior_select": [["capacity"], ["name", "*"], ["*"]], "prior_where_col": [[["eq", "name", "Stark s Park"]], [], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"concert id\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["how many concert are presented on the table"], "utterance": "show the stadium name and the number of concerts in each stadium", "select_target": [14], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT concert_name from concert", "number_predicates": 0}, "prior_select": [["capacity"], ["name", "*"], ["*"]], "prior_where_col": [[["eq", "name", "Stark s Park"]], [], []], "result": ["{\n  \"data columns\": [\"concert id\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"name\", \"COUNT(concert id) AS number_of_concerts\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["show the stadium name and the number of concerts in each stadium", "how many concert are presented on the table"], "utterance": "what is the capacity of Stark's Park", "select_target": [14], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT concert_name from concert", "number_predicates": 0}, "prior_select": [["capacity"], ["name", "*"], ["*"]], "prior_where_col": [[["eq", "name", "Stark s Park"]], [], []], "result": ["{\n  \"data columns\": [\"concert id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"name\", \"COUNT(concert id) AS number_of_concerts\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"capacity\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Stark's Park\"\n    }\n  ]\n}"}, {"previous_utterances": ["what is the capacity of Stark's Park", "show the stadium name and the number of concerts in each stadium", "how many concert are presented on the table"], "utterance": "list out the concert names", "select_target": [14], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT concert_name from concert", "number_predicates": 0}, "prior_select": [["capacity"], ["name", "*"], ["*"]], "prior_where_col": [[["eq", "name", "Stark s Park"]], [], []], "result": ["{\n  \"data columns\": [\"concert id\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"name\", \"COUNT(concert id) AS number_of_concerts\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"capacity\"],\n  \"data filters\": [\n    {\n      \"column\": \"name\",\n      \"operator\": \"=\",\n      \"value\": \"Stark's Park\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"concert name\"],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "what are the singers name on this list?", "select_target": [8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Joe Sharp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country from singer where name  =  \"Joe Sharp\"", "number_predicates": 1}, "prior_select": [["*"], ["song release year"], ["name"]], "prior_where_col": [[["eq", "name", "Joe Sharp"]], [["eq", "name", "Joe Sharp"], ["eq", "song name", "You"]], []], "result": [], "pred_intent": "{\"data columns\": [\"name\"], \"data filters\": []}"}, {"previous_utterances": ["what are the singers name on this list?"], "utterance": "Joe Sharp song \"You\" was released in what year?", "select_target": [8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Joe Sharp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country from singer where name  =  \"Joe Sharp\"", "number_predicates": 1}, "prior_select": [["*"], ["song release year"], ["name"]], "prior_where_col": [[["eq", "name", "Joe Sharp"]], [["eq", "name", "Joe Sharp"], ["eq", "song name", "You"]], []], "result": ["{\"data columns\": [\"name\"], \"data filters\": []}"], "pred_intent": "{\"data columns\": [\"song release year\"], \"data filters\": [{\"column\": \"song name\", \"operator\": \"=\", \"value\": \"You\"}]}"}, {"previous_utterances": ["Joe Sharp song \"You\" was released in what year?", "what are the singers name on this list?"], "utterance": "how many number of concert has Joe Sharp held?", "select_target": [8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Joe Sharp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country from singer where name  =  \"Joe Sharp\"", "number_predicates": 1}, "prior_select": [["*"], ["song release year"], ["name"]], "prior_where_col": [[["eq", "name", "Joe Sharp"]], [["eq", "name", "Joe Sharp"], ["eq", "song name", "You"]], []], "result": ["{\"data columns\": [\"name\"], \"data filters\": []}", "{\"data columns\": [\"song release year\"], \"data filters\": [{\"column\": \"song name\", \"operator\": \"=\", \"value\": \"You\"}]}"], "pred_intent": "{\"data columns\": [\"count(concert id)\"], \"data filters\": [{\"column\": \"singer id\", \"operator\": \"=\", \"value\": \"Joe Sharp\"}]}"}, {"previous_utterances": ["how many number of concert has Joe Sharp held?", "Joe Sharp song \"You\" was released in what year?", "what are the singers name on this list?"], "utterance": "ok. what country is Joe sharp from?", "select_target": [8], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Joe Sharp"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT country from singer where name  =  \"Joe Sharp\"", "number_predicates": 1}, "prior_select": [["*"], ["song release year"], ["name"]], "prior_where_col": [[["eq", "name", "Joe Sharp"]], [["eq", "name", "Joe Sharp"], ["eq", "song name", "You"]], []], "result": ["{\"data columns\": [\"name\"], \"data filters\": []}", "{\"data columns\": [\"song release year\"], \"data filters\": [{\"column\": \"song name\", \"operator\": \"=\", \"value\": \"You\"}]}", "{\"data columns\": [\"count(concert id)\"], \"data filters\": [{\"column\": \"singer id\", \"operator\": \"=\", \"value\": \"Joe Sharp\"}]}"], "pred_intent": "{\"data columns\": [\"country\"], \"data filters\": [{\"column\": \"singer id\", \"operator\": \"=\", \"value\": \"Joe Sharp\"}]}"}, {"previous_utterances": [], "utterance": "what is the name of the stadium that does not have a concert in year 2014?", "select_target": [15], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Balmoor"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'", "number_predicates": 1}, "prior_select": [["capacity"], ["name"]], "prior_where_col": [[["eq", "name", "Balmoor"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"null\"\n        },\n        {\n            \"column\": \"year\",\n            \"operator\": \"!=\",\n            \"value\": \"2014\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the name of the stadium that does not have a concert in year 2014?"], "utterance": "what is the capacity of Balmoor?", "select_target": [15], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Balmoor"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'", "number_predicates": 1}, "prior_select": [["capacity"], ["name"]], "prior_where_col": [[["eq", "name", "Balmoor"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"null\"\n        },\n        {\n            \"column\": \"year\",\n            \"operator\": \"!=\",\n            \"value\": \"2014\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"capacity\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Balmoor\"\n        }\n    ]\n}"}, {"previous_utterances": ["what is the capacity of Balmoor?", "what is the name of the stadium that does not have a concert in year 2014?"], "utterance": "what is the theme of Balmoor?", "select_target": [15], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [[2, "eq", "Balmoor"]], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor'", "number_predicates": 1}, "prior_select": [["capacity"], ["name"]], "prior_where_col": [[["eq", "name", "Balmoor"]], []], "result": ["{\n    \"data columns\": [\"name\"],\n    \"data filters\": [\n        {\n            \"column\": \"concert name\",\n            \"operator\": \"=\",\n            \"value\": \"null\"\n        },\n        {\n            \"column\": \"year\",\n            \"operator\": \"!=\",\n            \"value\": \"2014\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"capacity\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Balmoor\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"theme\"],\n    \"data filters\": [\n        {\n            \"column\": \"name\",\n            \"operator\": \"=\",\n            \"value\": \"Balmoor\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "please list the singers | did you mean list their names? | yes", "select_target": [2, 17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n  \"data columns\": [\"name\"]\n}"}, {"previous_utterances": ["please list the singers | did you mean list their names? | yes"], "utterance": "can you also  give number of concerts for each singer", "select_target": [2, 17], "column_names": ["stadium id", "location", "name", "capacity", "highest", "lowest", "average", "singer id", "country", "song name", "song release year", "age", "is male", "concert id", "concert name", "theme", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "concert_singer", "raw_sql": "SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id", "number_predicates": 0}, "prior_select": [["name"]], "prior_where_col": [[]], "result": ["{\n  \"data columns\": [\"name\"]\n}"], "pred_intent": "{\n  \"data columns\": [\"name\", \"count(concert id)\"]\n}"}, {"previous_utterances": [], "utterance": "whats the average acceleration", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["accelerate"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["whats the average acceleration"], "utterance": "whats the average horse power", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["accelerate"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["whats the average horse power", "whats the average acceleration"], "utterance": "for the cars with 4 cylinders which model has the largest horsepower", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["accelerate"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"cylinders\",\n        \"operator\": \"=\",\n        \"value\": \"4\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you list how many car makers are on each continent please? | Do you want the name of the continent and the count of car makers on each of them? | Yes please, in a table if possible?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count ( * )  from car_makers", "number_predicates": 0}, "prior_select": [["full name", "country name"], ["full name", "country name"], ["full name", "country name"], ["continent", "*"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "asia"]], []], "result": [], "pred_intent": "{\n  \"data columns\": [\"continent\", \"maker\"],\n  \"data filters\": []\n}"}, {"previous_utterances": ["Can you list how many car makers are on each continent please? | Do you want the name of the continent and the count of car makers on each of them? | Yes please, in a table if possible?"], "utterance": "Can you list the full name and country of every car maker from asia? | Do you want the full name and country name of the car makers from asia? | Yes please", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count ( * )  from car_makers", "number_predicates": 0}, "prior_select": [["full name", "country name"], ["full name", "country name"], ["full name", "country name"], ["continent", "*"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "asia"]], []], "result": ["{\n  \"data columns\": [\"continent\", \"maker\"],\n  \"data filters\": []\n}"], "pred_intent": "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"asia\"\n    }\n  ]\n}"}, {"previous_utterances": ["Can you list the full name and country of every car maker from asia? | Do you want the full name and country name of the car makers from asia? | Yes please", "Can you list how many car makers are on each continent please? | Do you want the name of the continent and the count of car makers on each of them? | Yes please, in a table if possible?"], "utterance": "What about from Europe?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count ( * )  from car_makers", "number_predicates": 0}, "prior_select": [["full name", "country name"], ["full name", "country name"], ["full name", "country name"], ["continent", "*"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "asia"]], []], "result": ["{\n  \"data columns\": [\"continent\", \"maker\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"asia\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"europe\"\n    }\n  ]\n}"}, {"previous_utterances": ["What about from Europe?", "Can you list the full name and country of every car maker from asia? | Do you want the full name and country name of the car makers from asia? | Yes please", "Can you list how many car makers are on each continent please? | Do you want the name of the continent and the count of car makers on each of them? | Yes please, in a table if possible?"], "utterance": "How about America?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count ( * )  from car_makers", "number_predicates": 0}, "prior_select": [["full name", "country name"], ["full name", "country name"], ["full name", "country name"], ["continent", "*"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "asia"]], []], "result": ["{\n  \"data columns\": [\"continent\", \"maker\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"asia\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"europe\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"america\"\n    }\n  ]\n}"}, {"previous_utterances": ["How about America?", "What about from Europe?", "Can you list the full name and country of every car maker from asia? | Do you want the full name and country name of the car makers from asia? | Yes please", "Can you list how many car makers are on each continent please? | Do you want the name of the continent and the count of car makers on each of them? | Yes please, in a table if possible?"], "utterance": "How many car makers are there total?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count ( * )  from car_makers", "number_predicates": 0}, "prior_select": [["full name", "country name"], ["full name", "country name"], ["full name", "country name"], ["continent", "*"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "asia"]], []], "result": ["{\n  \"data columns\": [\"continent\", \"maker\"],\n  \"data filters\": []\n}", "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"asia\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"europe\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"full name\", \"country\"],\n  \"data filters\": [\n    {\n      \"column\": \"continent\",\n      \"operator\": \"=\",\n      \"value\": \"america\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [],\n  \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Hi! which countries are in europe?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"}, {"previous_utterances": ["Hi! which countries are in europe?"], "utterance": "How many car manufacturers are in each of those countries?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"}, {"previous_utterances": ["How many car manufacturers are in each of those countries?", "Hi! which countries are in europe?"], "utterance": "which of those has at least 3?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"count(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}"}, {"previous_utterances": ["which of those has at least 3?", "How many car manufacturers are in each of those countries?", "Hi! which countries are in europe?"], "utterance": "how many do each of those have?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"count(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"country name\", \"COUNT(maker)\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"COUNT(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}"}, {"previous_utterances": ["how many do each of those have?", "which of those has at least 3?", "How many car manufacturers are in each of those countries?", "Hi! which countries are in europe?"], "utterance": "how many total car manufacturers does europe have?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"count(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country name\", \"COUNT(maker)\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"COUNT(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"COUNT(DISTINCT maker)\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"}, {"previous_utterances": ["how many total car manufacturers does europe have?", "how many do each of those have?", "which of those has at least 3?", "How many car manufacturers are in each of those countries?", "Hi! which countries are in europe?"], "utterance": "what about america?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"count(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country name\", \"COUNT(maker)\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"COUNT(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"COUNT(DISTINCT maker)\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"COUNT(DISTINCT maker)\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}"}, {"previous_utterances": ["what about america?", "how many total car manufacturers does europe have?", "how many do each of those have?", "which of those has at least 3?", "How many car manufacturers are in each of those countries?", "Hi! which countries are in europe?"], "utterance": "what are those?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[1, "eq", "america"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america'", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["country name", "*"], ["country name"], ["country name", "*"], ["country name"]], "prior_where_col": [[["eq", "continent", "america"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]], [["eq", "continent", "europe"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"country name\", \"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"count(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"country name\", \"COUNT(maker)\"],\n    \"data filters\": [\n        {\n            \"column\": \"continent\",\n            \"operator\": \"=\",\n            \"value\": \"Europe\"\n        },\n        {\n            \"column\": \"COUNT(maker)\",\n            \"operator\": \">=\",\n            \"value\": \"3\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"COUNT(DISTINCT maker)\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"Europe\"\n    }]\n}", "{\n    \"data columns\": [\"COUNT(DISTINCT maker)\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What are all the car models available?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "gt", 1980]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980", "number_predicates": 1}, "prior_select": [["model"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"model\"]\n}"}, {"previous_utterances": ["What are all the car models available?"], "utterance": "Which of those distinct models are produced after 1980?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "gt", 1980]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980", "number_predicates": 1}, "prior_select": [["model"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"model\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"year\",\n        \"operator\": \">\",\n        \"value\": \"1980\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Show me continent IDs of each continent", "select_target": [1, 19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["continent", "*"], ["cont id", "continent"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"continent id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Show me continent IDs of each continent"], "utterance": "Show me continent names and the number of countries they have", "select_target": [1, 19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["continent", "*"], ["cont id", "continent"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"continent id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"continent\", \"count(*)\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Show me continent names and the number of countries they have", "Show me continent IDs of each continent"], "utterance": "Which continent has the highest number of countries?", "select_target": [1, 19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["continent", "*"], ["cont id", "continent"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"continent id\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"continent\", \"count(*)\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"continent\"],\n    \"data filters\": [],\n    \"sort by\": {\n        \"column\": \"count(*)\",\n        \"order\": \"desc\"\n    },\n    \"limit\": 1\n}"}, {"previous_utterances": [], "utterance": "how many car models are produced in the USA?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[5, "eq", "t2.id"], [5, "eq", "ford"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"", "number_predicates": 2}, "prior_select": [["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "usa"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}"}, {"previous_utterances": ["how many car models are produced in the USA?"], "utterance": "which companies produce those models?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[5, "eq", "t2.id"], [5, "eq", "ford"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"", "number_predicates": 2}, "prior_select": [["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "usa"]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"make\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}"}, {"previous_utterances": ["which companies produce those models?", "how many car models are produced in the USA?"], "utterance": "how many Models has Ford produced?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[5, "eq", "t2.id"], [5, "eq", "ford"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  \"ford\"", "number_predicates": 2}, "prior_select": [["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "usa"]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}", "{\n    \"data columns\": [\"make\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"Ford\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "What countries produced cars?", "select_target": [3, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country", "number_predicates": 0}, "prior_select": [["country name"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What countries produced cars?"], "utterance": "What country does not have a car maker?", "select_target": [3, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country", "number_predicates": 0}, "prior_select": [["country name"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"country\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"country\"],\n    \"data filters\": [{\n        \"column\": \"maker\",\n        \"operator\": \"=\",\n        \"value\": \"\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Which models are manufactured by the maker with the name \"General Motors\"?", "select_target": [11, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "General Motors"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1", "number_predicates": 1}, "prior_select": [["*"], ["model", "maker"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["gt", "mpg", 15]], [["eq", "full name", "General Motors"]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": [], "pred_intent": "{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    }\n  ]\n}"}, {"previous_utterances": ["Which models are manufactured by the maker with the name \"General Motors\"?"], "utterance": "How about models that weight more than 3500?", "select_target": [11, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "General Motors"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1", "number_predicates": 1}, "prior_select": [["*"], ["model", "maker"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["gt", "mpg", 15]], [["eq", "full name", "General Motors"]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"weight\",\n      \"operator\": \">\",\n      \"value\": \"3500\"\n    }\n  ]\n}"}, {"previous_utterances": ["How about models that weight more than 3500?", "Which models are manufactured by the maker with the name \"General Motors\"?"], "utterance": "What is the make and model of the car with the largest horsepower?", "select_target": [11, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "General Motors"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1", "number_predicates": 1}, "prior_select": [["*"], ["model", "maker"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["gt", "mpg", 15]], [["eq", "full name", "General Motors"]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"weight\",\n      \"operator\": \">\",\n      \"value\": \"3500\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"make\", \"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"horsepower\",\n      \"operator\": \"=\",\n      \"value\": \"(SELECT MAX(horsepower) FROM dataset)\"\n    }\n  ]\n}"}, {"previous_utterances": ["What is the make and model of the car with the largest horsepower?", "How about models that weight more than 3500?", "Which models are manufactured by the maker with the name \"General Motors\"?"], "utterance": "How many cars manufactured by General Motors get more than 15 mpg?", "select_target": [11, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "General Motors"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1", "number_predicates": 1}, "prior_select": [["*"], ["model", "maker"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["gt", "mpg", 15]], [["eq", "full name", "General Motors"]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"weight\",\n      \"operator\": \">\",\n      \"value\": \"3500\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"make\", \"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"horsepower\",\n      \"operator\": \"=\",\n      \"value\": \"(SELECT MAX(horsepower) FROM dataset)\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"COUNT(*)\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"mpg\",\n      \"operator\": \">\",\n      \"value\": \"15\"\n    }\n  ]\n}"}, {"previous_utterances": ["How many cars manufactured by General Motors get more than 15 mpg?", "What is the make and model of the car with the largest horsepower?", "How about models that weight more than 3500?", "Which models are manufactured by the maker with the name \"General Motors\"?"], "utterance": "What is the make and model of the car manufactured by General Motors that gets the highest mpg?", "select_target": [11, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "General Motors"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1", "number_predicates": 1}, "prior_select": [["*"], ["model", "maker"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["gt", "mpg", 15]], [["eq", "full name", "General Motors"]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"weight\",\n      \"operator\": \">\",\n      \"value\": \"3500\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"make\", \"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"horsepower\",\n      \"operator\": \"=\",\n      \"value\": \"(SELECT MAX(horsepower) FROM dataset)\"\n    }\n  ]\n}", "{\n  \"data columns\": [\"COUNT(*)\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"mpg\",\n      \"operator\": \">\",\n      \"value\": \"15\"\n    }\n  ]\n}"], "pred_intent": "{\n  \"data columns\": [\"make\", \"model\"],\n  \"data filters\": [\n    {\n      \"column\": \"maker\",\n      \"operator\": \"=\",\n      \"value\": \"General Motors\"\n    },\n    {\n      \"column\": \"mpg\",\n      \"operator\": \"=\",\n      \"value\": \"(SELECT MAX(mpg) FROM dataset WHERE maker = 'General Motors')\"\n    }\n  ]\n}"}, {"previous_utterances": [], "utterance": "how many cylinders in the cars_data table", "select_target": [15], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["accelerate"], ["*"], ["weight"], ["cylinders"]], "prior_where_col": [[], [], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"cylinders\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many cylinders in the cars_data table"], "utterance": "i want to highest weight in the cars_data table", "select_target": [15], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["accelerate"], ["*"], ["weight"], ["cylinders"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"cylinders\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"weight\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["i want to highest weight in the cars_data table", "how many cylinders in the cars_data table"], "utterance": "how many year in the cars_data table", "select_target": [15], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["accelerate"], ["*"], ["weight"], ["cylinders"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"cylinders\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"weight\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"year\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many year in the cars_data table", "i want to highest weight in the cars_data table", "how many cylinders in the cars_data table"], "utterance": "what is the highest accelerate in the cars_data table", "select_target": [15], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["accelerate"], ["*"], ["weight"], ["cylinders"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"cylinders\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"weight\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"year\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the highest accelerate in the cars_data table", "how many year in the cars_data table", "i want to highest weight in the cars_data table", "how many cylinders in the cars_data table"], "utterance": "i want to highest edispl in the cars_data table", "select_target": [15], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["accelerate"], ["*"], ["weight"], ["cylinders"]], "prior_where_col": [[], [], [], []], "result": ["{\n    \"data columns\": [\"cylinders\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"weight\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"year\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"edispl\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What are the cars with the lowest horsepower? | Do you mean the id of the car with the lowest horsepower? | Yes please.", "select_target": [4, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[15, "lt", "Horsepower"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ", "number_predicates": 1}, "prior_select": [["id"], ["horsepower"], ["id"]], "prior_where_col": [[["lt", "horsepower", "Horsepower"]], [], []], "result": [], "pred_intent": "{\n\"data columns\": [\"id\", \"horsepower\"],\n\"data filters\": [\n{\n\"column\": \"horsepower\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n]\n}"}, {"previous_utterances": ["What are the cars with the lowest horsepower? | Do you mean the id of the car with the lowest horsepower? | Yes please."], "utterance": "What is the average horsepower of all the cars?", "select_target": [4, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[15, "lt", "Horsepower"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ", "number_predicates": 1}, "prior_select": [["id"], ["horsepower"], ["id"]], "prior_where_col": [[["lt", "horsepower", "Horsepower"]], [], []], "result": ["{\n\"data columns\": [\"id\", \"horsepower\"],\n\"data filters\": [\n{\n\"column\": \"horsepower\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"horsepower\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["What is the average horsepower of all the cars?", "What are the cars with the lowest horsepower? | Do you mean the id of the car with the lowest horsepower? | Yes please."], "utterance": "Can you list the car ids of all the cars with lower than the average horsepower?", "select_target": [4, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[15, "lt", "Horsepower"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ", "number_predicates": 1}, "prior_select": [["id"], ["horsepower"], ["id"]], "prior_where_col": [[["lt", "horsepower", "Horsepower"]], [], []], "result": ["{\n\"data columns\": [\"id\", \"horsepower\"],\n\"data filters\": [\n{\n\"column\": \"horsepower\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n]\n}", "{\n\"data columns\": [\"horsepower\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"id\"],\n\"data filters\": [\n{\n\"column\": \"horsepower\",\n\"operator\": \"<\",\n\"value\": \"average horsepower\"\n}\n]\n}"}, {"previous_utterances": ["Can you list the car ids of all the cars with lower than the average horsepower?", "What is the average horsepower of all the cars?", "What are the cars with the lowest horsepower? | Do you mean the id of the car with the lowest horsepower? | Yes please."], "utterance": "Could you add the model and make of each of those into the table please?", "select_target": [4, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[15, "lt", "Horsepower"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ", "number_predicates": 1}, "prior_select": [["id"], ["horsepower"], ["id"]], "prior_where_col": [[["lt", "horsepower", "Horsepower"]], [], []], "result": ["{\n\"data columns\": [\"id\", \"horsepower\"],\n\"data filters\": [\n{\n\"column\": \"horsepower\",\n\"operator\": \">\",\n\"value\": \"0\"\n}\n]\n}", "{\n\"data columns\": [\"horsepower\"],\n\"data filters\": []\n}", "{\n\"data columns\": [\"id\"],\n\"data filters\": [\n{\n\"column\": \"horsepower\",\n\"operator\": \"<\",\n\"value\": \"average horsepower\"\n}\n]\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"model\", \"make\"],\n    \"data filters\": [\n        {\n            \"column\": \"horsepower\",\n            \"operator\": \"<\",\n            \"value\": \"average horsepower\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What are the full name of amc? | Did you mean the full name of the car maker amc? | Yes", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["model"], ["full name"]], "prior_where_col": [[["eq", "model", "bmw"]], [["eq", "country name", "germany"]], [["eq", "maker", "amc"]]], "result": [], "pred_intent": "{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}"}, {"previous_utterances": ["What are the full name of amc? | Did you mean the full name of the car maker amc? | Yes"], "utterance": "What kind of car is produced in Germany? | Did you mean the car models produced in Germany? | Yes", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["model"], ["full name"]], "prior_where_col": [[["eq", "model", "bmw"]], [["eq", "country name", "germany"]], [["eq", "maker", "amc"]]], "result": ["{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}"], "pred_intent": "{\"data columns\": [\"model\"], \"data filters\": [{\"column\": \"country\", \"operator\": \"=\", \"value\": \"Germany\"}]}"}, {"previous_utterances": ["What kind of car is produced in Germany? | Did you mean the car models produced in Germany? | Yes", "What are the full name of amc? | Did you mean the full name of the car maker amc? | Yes"], "utterance": "What are the model id of BMW?", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["model"], ["full name"]], "prior_where_col": [[["eq", "model", "bmw"]], [["eq", "country name", "germany"]], [["eq", "maker", "amc"]]], "result": ["{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}", "{\"data columns\": [\"model\"], \"data filters\": [{\"column\": \"country\", \"operator\": \"=\", \"value\": \"Germany\"}]}"], "pred_intent": "{\"data columns\": [\"model id\"], \"data filters\": [{\"column\": \"make\", \"operator\": \"=\", \"value\": \"BMW\"}]}"}, {"previous_utterances": ["What are the model id of BMW?", "What kind of car is produced in Germany? | Did you mean the car models produced in Germany? | Yes", "What are the full name of amc? | Did you mean the full name of the car maker amc? | Yes"], "utterance": "What are the id and names of the countries which have more than 3 cars makers or produce the 'flat' model?", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["model"], ["full name"]], "prior_where_col": [[["eq", "model", "bmw"]], [["eq", "country name", "germany"]], [["eq", "maker", "amc"]]], "result": ["{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}", "{\"data columns\": [\"model\"], \"data filters\": [{\"column\": \"country\", \"operator\": \"=\", \"value\": \"Germany\"}]}", "{\"data columns\": [\"model id\"], \"data filters\": [{\"column\": \"make\", \"operator\": \"=\", \"value\": \"BMW\"}]}"], "pred_intent": "{\"data columns\": [\"country id\", \"country name\"], \"data filters\": [{\"column\": \"*\", \"operator\": \">\", \"value\": \"3\"}, {\"column\": \"model\", \"operator\": \"=\", \"value\": \"flat\"}]}"}, {"previous_utterances": [], "utterance": "Can you tell me the ID of the american motor company ?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "American Motor Company"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'", "number_predicates": 1}, "prior_select": [["maker"], ["model id"], ["id"]], "prior_where_col": [[["eq", "id", 2]], [["eq", "maker", "amc"]], [["eq", "full name", "American Motor Company"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}"}, {"previous_utterances": ["Can you tell me the ID of the american motor company ?"], "utterance": "Can you tell me the model id of the maker amc ?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "American Motor Company"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'", "number_predicates": 1}, "prior_select": [["maker"], ["model id"], ["id"]], "prior_where_col": [[["eq", "id", 2]], [["eq", "maker", "amc"]], [["eq", "full name", "American Motor Company"]]], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"model id\"],\n    \"data filters\": [{\n        \"column\": \"maker\",\n        \"operator\": \"=\",\n        \"value\": \"amc\"\n    }]\n}"}, {"previous_utterances": ["Can you tell me the model id of the maker amc ?", "Can you tell me the ID of the american motor company ?"], "utterance": "Who is maker for the ID number 2 ? | Did you mean Id or ModelId? | I mean id", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "American Motor Company"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'", "number_predicates": 1}, "prior_select": [["maker"], ["model id"], ["id"]], "prior_where_col": [[["eq", "id", 2]], [["eq", "maker", "amc"]], [["eq", "full name", "American Motor Company"]]], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}", "{\n    \"data columns\": [\"model id\"],\n    \"data filters\": [{\n        \"column\": \"maker\",\n        \"operator\": \"=\",\n        \"value\": \"amc\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    }]\n}"}, {"previous_utterances": ["Who is maker for the ID number 2 ? | Did you mean Id or ModelId? | I mean id", "Can you tell me the model id of the maker amc ?", "Can you tell me the ID of the american motor company ?"], "utterance": "How many car models were produced by the maker with the full name American Motor Company ?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[6, "eq", "American Motor Company"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company'", "number_predicates": 1}, "prior_select": [["maker"], ["model id"], ["id"]], "prior_where_col": [[["eq", "id", 2]], [["eq", "maker", "amc"]], [["eq", "full name", "American Motor Company"]]], "result": ["{\n    \"data columns\": [\"id\"],\n    \"data filters\": [{\n        \"column\": \"continent\",\n        \"operator\": \"=\",\n        \"value\": \"America\"\n    }]\n}", "{\n    \"data columns\": [\"model id\"],\n    \"data filters\": [{\n        \"column\": \"maker\",\n        \"operator\": \"=\",\n        \"value\": \"amc\"\n    }]\n}", "{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"count(model)\"],\n    \"data filters\": [{\n        \"column\": \"full name\",\n        \"operator\": \"=\",\n        \"value\": \"American Motor Company\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "WHAT IS THE ACCELERATE OF THE CAR MAKE AMC HORNET SPORTABOUT(SW)", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1", "number_predicates": 0}, "prior_select": [["accelerate"]], "prior_where_col": [[["eq", "make", "amc hornet sportabout  ( sw ) "]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"AMC\"\n    },\n    {\n        \"column\": \"model\",\n        \"operator\": \"=\",\n        \"value\": \"HORNET SPORTABOUT\"\n    }]\n}"}, {"previous_utterances": ["WHAT IS THE ACCELERATE OF THE CAR MAKE AMC HORNET SPORTABOUT(SW)"], "utterance": "CAN YOU WHICH CAR MODEL IS MOST RECENT RELEASED", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1", "number_predicates": 0}, "prior_select": [["accelerate"]], "prior_where_col": [[["eq", "make", "amc hornet sportabout  ( sw ) "]]], "result": ["{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"AMC\"\n    },\n    {\n        \"column\": \"model\",\n        \"operator\": \"=\",\n        \"value\": \"HORNET SPORTABOUT\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "Can you list the number of car makers on each continent?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "france"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["continent", "*"]], "prior_where_col": [[["eq", "country name", "germany"]], [["eq", "country name", "usa"]], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"continent\", \"maker\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Can you list the number of car makers on each continent?"], "utterance": "What about the number of car makers in the country USA?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "france"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["continent", "*"]], "prior_where_col": [[["eq", "country name", "germany"]], [["eq", "country name", "usa"]], []], "result": ["{\n    \"data columns\": [\"continent\", \"maker\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"country\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}"}, {"previous_utterances": ["What about the number of car makers in the country USA?", "Can you list the number of car makers on each continent?"], "utterance": "How about in the country Germany?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "france"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["continent", "*"]], "prior_where_col": [[["eq", "country name", "germany"]], [["eq", "country name", "usa"]], []], "result": ["{\n    \"data columns\": [\"continent\", \"maker\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"country\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"country\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Germany\"\n    }]\n}"}, {"previous_utterances": ["How about in the country Germany?", "What about the number of car makers in the country USA?", "Can you list the number of car makers on each continent?"], "utterance": "What about France?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "france"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  \"france\"", "number_predicates": 1}, "prior_select": [["*"], ["*"], ["continent", "*"]], "prior_where_col": [[["eq", "country name", "germany"]], [["eq", "country name", "usa"]], []], "result": ["{\n    \"data columns\": [\"continent\", \"maker\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"country\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"USA\"\n    }]\n}", "{\n    \"data columns\": [\"country\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"Germany\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"country\", \"maker\"],\n    \"data filters\": [{\n        \"column\": \"country\",\n        \"operator\": \"=\",\n        \"value\": \"France\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "what models are produced by the make General Motors?", "select_target": [9, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  <=   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  <=   3500", "number_predicates": 0}, "prior_select": [["model"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["lt", "weight", 3500]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"General Motors\"\n    }]\n}"}, {"previous_utterances": ["what models are produced by the make General Motors?"], "utterance": "what models have a weight greater than 3500", "select_target": [9, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  <=   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  <=   3500", "number_predicates": 0}, "prior_select": [["model"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["lt", "weight", 3500]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"General Motors\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"weight\",\n        \"operator\": \">\",\n        \"value\": \"3500\"\n    }]\n}"}, {"previous_utterances": ["what models have a weight greater than 3500", "what models are produced by the make General Motors?"], "utterance": "could you list the models from the previous two questions with no duplicates please", "select_target": [9, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  <=   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  <=   3500", "number_predicates": 0}, "prior_select": [["model"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["lt", "weight", 3500]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"General Motors\"\n    }]\n}", "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"weight\",\n        \"operator\": \">\",\n        \"value\": \"3500\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [\n        {\n            \"column\": \"make\",\n            \"operator\": \"=\",\n            \"value\": \"General Motors\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \">\",\n            \"value\": \"3500\"\n        }\n    ]\n}"}, {"previous_utterances": ["could you list the models from the previous two questions with no duplicates please", "what models have a weight greater than 3500", "what models are produced by the make General Motors?"], "utterance": "can you list the models that weight greater than 3500 or have the maker General Motors, but not both", "select_target": [9, 9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  <=   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  <=   3500", "number_predicates": 0}, "prior_select": [["model"], ["model"], ["model"]], "prior_where_col": [[["eq", "full name", "General Motors"], ["lt", "weight", 3500]], [["gt", "weight", 3500]], [["eq", "full name", "General Motors"]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"General Motors\"\n    }]\n}", "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"weight\",\n        \"operator\": \">\",\n        \"value\": \"3500\"\n    }]\n}", "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [\n        {\n            \"column\": \"make\",\n            \"operator\": \"=\",\n            \"value\": \"General Motors\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \">\",\n            \"value\": \"3500\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [\n        {\n            \"column\": \"weight\",\n            \"operator\": \">\",\n            \"value\": \"3500\"\n        },\n        {\n            \"column\": \"make\",\n            \"operator\": \"!=\",\n            \"value\": \"General Motors\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["model"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"mpg\",\n        \"operator\": \"=\",\n        \"value\": \"MAX\"\n    }]\n}"}, {"previous_utterances": ["Which model saves the most gasoline? That is to say, have the maximum miles per gallon?"], "utterance": "Which model has the highest horsepower?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["model"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"mpg\",\n        \"operator\": \"=\",\n        \"value\": \"MAX\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"horsepower\",\n        \"operator\": \"=\",\n        \"value\": \"MAX\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "How many Volvo cars are there?", "select_target": [13], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[9, "eq", "volvo"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "number_predicates": 1}, "prior_select": [["id"], ["*"]], "prior_where_col": [[["eq", "model", "volvo"]], [["eq", "model", "volvo"]]], "result": [], "pred_intent": "{\"data filters\": [\n    {\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"Volvo\"\n    }\n]}"}, {"previous_utterances": ["How many Volvo cars are there?"], "utterance": "Which Volvo car has the least accelerate? | Do you want its car id? | Yes", "select_target": [13], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[9, "eq", "volvo"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "number_predicates": 1}, "prior_select": [["id"], ["*"]], "prior_where_col": [[["eq", "model", "volvo"]], [["eq", "model", "volvo"]]], "result": ["{\"data filters\": [\n    {\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"Volvo\"\n    }\n]}"], "pred_intent": "{\"data columns\": [\"car id\"], \"data filters\": [{\"column\": \"make\", \"operator\": \"=\", \"value\": \"Volvo\"}]}"}, {"previous_utterances": ["Which Volvo car has the least accelerate? | Do you want its car id? | Yes", "How many Volvo cars are there?"], "utterance": "How many cylinders does that car have?", "select_target": [13], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[9, "eq", "volvo"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1", "number_predicates": 1}, "prior_select": [["id"], ["*"]], "prior_where_col": [[["eq", "model", "volvo"]], [["eq", "model", "volvo"]]], "result": ["{\"data filters\": [\n    {\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"Volvo\"\n    }\n]}", "{\"data columns\": [\"car id\"], \"data filters\": [{\"column\": \"make\", \"operator\": \"=\", \"value\": \"Volvo\"}]}"], "pred_intent": "{\"data columns\": [\"cylinders\"], \"data filters\": [{\"column\": \"car id\", \"operator\": \"=\", \"value\": \"Car_Id_Value\"}]}"}, {"previous_utterances": [], "utterance": "What are the names of the makers who produced some cars in the year 1970?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "eq", "1970"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1", "number_predicates": 1}, "prior_select": [["model", "make"], ["maker"]], "prior_where_col": [[["eq", "year", "1970"]], [["eq", "year", "1970"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1970\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the names of the makers who produced some cars in the year 1970?"], "utterance": "What are the models and makes of the cars produced that year?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "eq", "1970"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1", "number_predicates": 1}, "prior_select": [["model", "make"], ["maker"]], "prior_where_col": [[["eq", "year", "1970"]], [["eq", "year", "1970"]]], "result": ["{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1970\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"model\", \"make\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1970\"\n        }\n    ]\n}"}, {"previous_utterances": ["What are the models and makes of the cars produced that year?", "What are the names of the makers who produced some cars in the year 1970?"], "utterance": "What is the full name of the maker that produced the heaviest car in the year 1970?", "select_target": [6], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "eq", "1970"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1", "number_predicates": 1}, "prior_select": [["model", "make"], ["maker"]], "prior_where_col": [[["eq", "year", "1970"]], [["eq", "year", "1970"]]], "result": ["{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1970\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"model\", \"make\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1970\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"full name\"],\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1970\"\n        },\n        {\n            \"column\": \"weight\",\n            \"operator\": \">\",\n            \"value\": \"0\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "tell me the FullName of the maker amc", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["country name"], ["full name"]], "prior_where_col": [[["eq", "model", "amc"]], [["eq", "country id", 1], ["eq", "country id", 2], ["eq", "country id", 3]], [["eq", "maker", "amc"]]], "result": [], "pred_intent": "{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}"}, {"previous_utterances": ["tell me the FullName of the maker amc"], "utterance": "Tell me CountryName for Countryid  1, 2, and 3.", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["country name"], ["full name"]], "prior_where_col": [[["eq", "model", "amc"]], [["eq", "country id", 1], ["eq", "country id", 2], ["eq", "country id", 3]], [["eq", "maker", "amc"]]], "result": ["{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}"], "pred_intent": "{\"data columns\": [\"country name\"], \"data filters\": [{\"column\": \"country id\", \"operator\": \"=\", \"value\": \"1\"}, {\"column\": \"country id\", \"operator\": \"=\", \"value\": \"2\"}, {\"column\": \"country id\", \"operator\": \"=\", \"value\": \"3\"}]}"}, {"previous_utterances": ["Tell me CountryName for Countryid  1, 2, and 3.", "tell me the FullName of the maker amc"], "utterance": "Tell me the model id made by amc...", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["country name"], ["full name"]], "prior_where_col": [[["eq", "model", "amc"]], [["eq", "country id", 1], ["eq", "country id", 2], ["eq", "country id", 3]], [["eq", "maker", "amc"]]], "result": ["{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}", "{\"data columns\": [\"country name\"], \"data filters\": [{\"column\": \"country id\", \"operator\": \"=\", \"value\": \"1\"}, {\"column\": \"country id\", \"operator\": \"=\", \"value\": \"2\"}, {\"column\": \"country id\", \"operator\": \"=\", \"value\": \"3\"}]}"], "pred_intent": "{\"data columns\": [\"model id\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}"}, {"previous_utterances": ["Tell me the model id made by amc...", "Tell me CountryName for Countryid  1, 2, and 3.", "tell me the FullName of the maker amc"], "utterance": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model ?", "select_target": [2, 3, 2, 3], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'", "number_predicates": 0}, "prior_select": [["model id"], ["country name"], ["full name"]], "prior_where_col": [[["eq", "model", "amc"]], [["eq", "country id", 1], ["eq", "country id", 2], ["eq", "country id", 3]], [["eq", "maker", "amc"]]], "result": ["{\"data columns\": [\"full name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}", "{\"data columns\": [\"country name\"], \"data filters\": [{\"column\": \"country id\", \"operator\": \"=\", \"value\": \"1\"}, {\"column\": \"country id\", \"operator\": \"=\", \"value\": \"2\"}, {\"column\": \"country id\", \"operator\": \"=\", \"value\": \"3\"}]}", "{\"data columns\": [\"model id\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \"=\", \"value\": \"amc\"}]}"], "pred_intent": "{\"data columns\": [\"country id\", \"country name\"], \"data filters\": [{\"column\": \"maker\", \"operator\": \">\", \"value\": \"3\"}, {\"column\": \"model\", \"operator\": \"=\", \"value\": \"fiat\"}]}"}, {"previous_utterances": [], "utterance": "how many car makers are their in germany", "select_target": [5], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "usa"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "number_predicates": 1}, "prior_select": [["maker"], ["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "germany"]], [["eq", "country name", "germany"]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\"column\": \"country name\", \"operator\": \"=\", \"value\": \"germany\"}]\n}"}, {"previous_utterances": ["how many car makers are their in germany"], "utterance": "what are their names", "select_target": [5], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "usa"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "number_predicates": 1}, "prior_select": [["maker"], ["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "germany"]], [["eq", "country name", "germany"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\"column\": \"country name\", \"operator\": \"=\", \"value\": \"germany\"}]\n}"], "pred_intent": "{\n    \"data columns\": [\"maker\"]\n}"}, {"previous_utterances": ["what are their names", "how many car makers are their in germany"], "utterance": "how many cars are their in usa | do you mean car makers? | yes", "select_target": [5], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "usa"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "number_predicates": 1}, "prior_select": [["maker"], ["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "germany"]], [["eq", "country name", "germany"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\"column\": \"country name\", \"operator\": \"=\", \"value\": \"germany\"}]\n}", "{\n    \"data columns\": [\"maker\"]\n}"], "pred_intent": "{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\"column\": \"country name\", \"operator\": \"=\", \"value\": \"usa\"}]\n}"}, {"previous_utterances": ["how many cars are their in usa | do you mean car makers? | yes", "what are their names", "how many car makers are their in germany"], "utterance": "what are their names", "select_target": [5], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[3, "eq", "usa"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa'", "number_predicates": 1}, "prior_select": [["maker"], ["maker"], ["*"]], "prior_where_col": [[["eq", "country name", "usa"]], [["eq", "country name", "germany"]], [["eq", "country name", "germany"]]], "result": ["{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\"column\": \"country name\", \"operator\": \"=\", \"value\": \"germany\"}]\n}", "{\n    \"data columns\": [\"maker\"]\n}", "{\n    \"data columns\": [\"country name\"],\n    \"data filters\": [{\"column\": \"country name\", \"operator\": \"=\", \"value\": \"usa\"}]\n}"], "pred_intent": "{\n    \"data columns\": [\"maker\"]\n}"}, {"previous_utterances": [], "utterance": "How many models does each car maker make? | Here is the result table of the full name of car makers and the number of models they made. For example, the car maker \"American Motor Company\" made 1 model. | What are all the ids of car makers?", "select_target": [7], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT  Country  FROM CAR_MAKERS", "number_predicates": 0}, "prior_select": [["id"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n    \"data columns\": [\"id\", \"maker\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many models does each car maker make? | Here is the result table of the full name of car makers and the number of models they made. For example, the car maker \"American Motor Company\" made 1 model. | What are all the ids of car makers?"], "utterance": "And what is their country ids?", "select_target": [7], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT  Country  FROM CAR_MAKERS", "number_predicates": 0}, "prior_select": [["id"]], "prior_where_col": [[]], "result": ["{\n    \"data columns\": [\"id\", \"maker\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"id\", \"maker\", \"country id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many makes are there for Chevrolet?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["model"], ["make"]], "prior_where_col": [[], [["eq", "model", "chevrolet"]]], "result": [], "pred_intent": "{\n\"data columns\": [\"make\"],\n\"data filters\": [\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"Chevrolet\"\n}\n]\n}"}, {"previous_utterances": ["How many makes are there for Chevrolet?"], "utterance": "How many models are in the list?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["model"], ["make"]], "prior_where_col": [[], [["eq", "model", "chevrolet"]]], "result": ["{\n\"data columns\": [\"make\"],\n\"data filters\": [\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"Chevrolet\"\n}\n]\n}"], "pred_intent": "{\n\"data columns\": [\"model\"],\n\"data filters\": []\n}"}, {"previous_utterances": ["How many models are in the list?", "How many makes are there for Chevrolet?"], "utterance": "Can you tell me which model has the most makes of cars?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1", "number_predicates": 0}, "prior_select": [["model"], ["make"]], "prior_where_col": [[], [["eq", "model", "chevrolet"]]], "result": ["{\n\"data columns\": [\"make\"],\n\"data filters\": [\n{\n\"column\": \"country\",\n\"operator\": \"=\",\n\"value\": \"Chevrolet\"\n}\n]\n}", "{\n\"data columns\": [\"model\"],\n\"data filters\": []\n}"], "pred_intent": "{\n\"data columns\": [\"model\"],\n\"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "What is the average horsepower?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[17, "gt", 19.0]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0", "number_predicates": 1}, "prior_select": [["accelerate"], ["id"], ["horsepower"]], "prior_where_col": [[], [], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["What is the average horsepower?"], "utterance": "Which car has the largest horsepower?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[17, "gt", 19.0]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0", "number_predicates": 1}, "prior_select": [["accelerate"], ["id"], ["horsepower"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"full name\"],\n    \"data filters\": [\n        {\n            \"column\": \"horsepower\",\n            \"operator\": \"=\",\n            \"value\": \"MAX(horsepower)\"\n        }\n    ]\n}"}, {"previous_utterances": ["Which car has the largest horsepower?", "What is the average horsepower?"], "utterance": "What is the accelerate of car 39?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[17, "gt", 19.0]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0", "number_predicates": 1}, "prior_select": [["accelerate"], ["id"], ["horsepower"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"full name\"],\n    \"data filters\": [\n        {\n            \"column\": \"horsepower\",\n            \"operator\": \"=\",\n            \"value\": \"MAX(horsepower)\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": [\n        {\n            \"column\": \"id\",\n            \"operator\": \"=\",\n            \"value\": \"39\"\n        }\n    ]\n}"}, {"previous_utterances": ["What is the accelerate of car 39?", "Which car has the largest horsepower?", "What is the average horsepower?"], "utterance": "Which cars have an accelerate larger than 19.0?", "select_target": [19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[17, "gt", 19.0]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0", "number_predicates": 1}, "prior_select": [["accelerate"], ["id"], ["horsepower"]], "prior_where_col": [[], [], []], "result": ["{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"full name\"],\n    \"data filters\": [\n        {\n            \"column\": \"horsepower\",\n            \"operator\": \"=\",\n            \"value\": \"MAX(horsepower)\"\n        }\n    ]\n}", "{\n    \"data columns\": [\"accelerate\"],\n    \"data filters\": [\n        {\n            \"column\": \"id\",\n            \"operator\": \"=\",\n            \"value\": \"39\"\n        }\n    ]\n}"], "pred_intent": "{\n    \"data columns\": [\"full name\"],\n    \"data filters\": [\n        {\n            \"column\": \"accelerate\",\n            \"operator\": \">\",\n            \"value\": \"19.0\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "list the makers who designed more than 3 car models", "select_target": [6, 4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "number_predicates": 0}, "prior_select": [["id"], ["*"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n\"data columns\": [\"maker\"],\n\"data filters\": [{\n    \"column\": \"model\",\n    \"operator\": \">\",\n    \"value\": \"3\"\n}]\n}"}, {"previous_utterances": ["list the makers who designed more than 3 car models"], "utterance": "what is the id of these makers", "select_target": [6, 4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "number_predicates": 0}, "prior_select": [["id"], ["*"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"maker\"],\n\"data filters\": [{\n    \"column\": \"model\",\n    \"operator\": \">\",\n    \"value\": \"3\"\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"id\"],\n\"data filters\": [{\n    \"column\": \"maker\",\n    \"operator\": \"in\",\n    \"value\": [\"Ford\", \"Chevrolet\", \"Toyota\"]\n}]\n}"}, {"previous_utterances": ["what is the id of these makers", "list the makers who designed more than 3 car models"], "utterance": "make a list so that the full name and id of the makers who designed more than 3 car models appear in the same table", "select_target": [6, 4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3", "number_predicates": 0}, "prior_select": [["id"], ["*"]], "prior_where_col": [[], []], "result": ["{\n\"data columns\": [\"maker\"],\n\"data filters\": [{\n    \"column\": \"model\",\n    \"operator\": \">\",\n    \"value\": \"3\"\n}]\n}", "{\n\"data columns\": [\"id\"],\n\"data filters\": [{\n    \"column\": \"maker\",\n    \"operator\": \"in\",\n    \"value\": [\"Ford\", \"Chevrolet\", \"Toyota\"]\n}]\n}"], "pred_intent": "{\n\"data columns\": [\"full name\", \"id\"],\n\"data filters\": [{\n    \"column\": \"maker\",\n    \"operator\": \"in\",\n    \"value\": [\"Ford\", \"Chevrolet\", \"Toyota\"]\n},\n{\n    \"column\": \"model\",\n    \"operator\": \">\",\n    \"value\": \"3\"\n}]\n}"}, {"previous_utterances": [], "utterance": "How many different cars on this list were produced in 1974?", "select_target": [4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "eq", "1974"], [13, "eq", "8"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select id  from cars_data where year = '1974' and Cylinders  =  '8'", "number_predicates": 2}, "prior_select": [["*"]], "prior_where_col": [[["eq", "year", "1974"]]], "result": [], "pred_intent": "{\n    \"data filters\": [{\n        \"column\": \"year\",\n        \"operator\": \"=\",\n        \"value\": \"1974\"\n    }]\n}"}, {"previous_utterances": ["How many different cars on this list were produced in 1974?"], "utterance": "Can you list just the car IDs produced in 1974 with 8 cylinders?", "select_target": [4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[18, "eq", "1974"], [13, "eq", "8"]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "select id  from cars_data where year = '1974' and Cylinders  =  '8'", "number_predicates": 2}, "prior_select": [["*"]], "prior_where_col": [[["eq", "year", "1974"]]], "result": ["{\n    \"data filters\": [{\n        \"column\": \"year\",\n        \"operator\": \"=\",\n        \"value\": \"1974\"\n    }]\n}"], "pred_intent": "{\n    \"data filters\": [\n        {\n            \"column\": \"year\",\n            \"operator\": \"=\",\n            \"value\": \"1974\"\n        },\n        {\n            \"column\": \"cylinders\",\n            \"operator\": \"=\",\n            \"value\": \"8\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "What is the weight of make id 1? | Did you mean to ask for the weight of the car with make id 1? | Yes", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["year"], ["weight"]], "prior_where_col": [[["eq", "model", "plymouth"]], [["eq", "model", "buick"]], [["eq", "make id", 1]]], "result": [], "pred_intent": "{ \"data columns\": [\"Weight\"], \"data filters\": [{ \"column\": \"Make ID\", \"operator\": \"=\", \"value\": \"1\" }] }"}, {"previous_utterances": ["What is the weight of make id 1? | Did you mean to ask for the weight of the car with make id 1? | Yes"], "utterance": "Which year launch the car model  buick? | Did you want to ask for the year on which the car model buick was launched? | Yes", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["year"], ["weight"]], "prior_where_col": [[["eq", "model", "plymouth"]], [["eq", "model", "buick"]], [["eq", "make id", 1]]], "result": ["{ \"data columns\": [\"Weight\"], \"data filters\": [{ \"column\": \"Make ID\", \"operator\": \"=\", \"value\": \"1\" }] }"], "pred_intent": "{ \"data columns\": [\"Year\"], \"data filters\": [{ \"column\": \"Model\", \"operator\": \"=\", \"value\": \"buick\" }] }"}, {"previous_utterances": ["Which year launch the car model  buick? | Did you want to ask for the year on which the car model buick was launched? | Yes", "What is the weight of make id 1? | Did you mean to ask for the weight of the car with make id 1? | Yes"], "utterance": "Find the horsepower of model plymouth.", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["year"], ["weight"]], "prior_where_col": [[["eq", "model", "plymouth"]], [["eq", "model", "buick"]], [["eq", "make id", 1]]], "result": ["{ \"data columns\": [\"Weight\"], \"data filters\": [{ \"column\": \"Make ID\", \"operator\": \"=\", \"value\": \"1\" }] }", "{ \"data columns\": [\"Year\"], \"data filters\": [{ \"column\": \"Model\", \"operator\": \"=\", \"value\": \"buick\" }] }"], "pred_intent": "{ \"data columns\": [\"Horsepower\"], \"data filters\": [{ \"column\": \"Model\", \"operator\": \"=\", \"value\": \"plymouth\" }] }"}, {"previous_utterances": ["Find the horsepower of model plymouth.", "Which year launch the car model  buick? | Did you want to ask for the year on which the car model buick was launched? | Yes", "What is the weight of make id 1? | Did you mean to ask for the weight of the car with make id 1? | Yes"], "utterance": "For the cars with 4 cylinders, which model has the largest horspower?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[13, "eq", 4]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1", "number_predicates": 1}, "prior_select": [["horsepower"], ["year"], ["weight"]], "prior_where_col": [[["eq", "model", "plymouth"]], [["eq", "model", "buick"]], [["eq", "make id", 1]]], "result": ["{ \"data columns\": [\"Weight\"], \"data filters\": [{ \"column\": \"Make ID\", \"operator\": \"=\", \"value\": \"1\" }] }", "{ \"data columns\": [\"Year\"], \"data filters\": [{ \"column\": \"Model\", \"operator\": \"=\", \"value\": \"buick\" }] }", "{ \"data columns\": [\"Horsepower\"], \"data filters\": [{ \"column\": \"Model\", \"operator\": \"=\", \"value\": \"plymouth\" }] }"], "pred_intent": "{\n    \"data columns\": [\"Model\"],\n    \"data filters\": [\n        {\n            \"column\": \"Cylinders\",\n            \"operator\": \"=\",\n            \"value\": \"4\"\n        }\n    ]\n}"}, {"previous_utterances": [], "utterance": "which models are lighter than 3500?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[10, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Model FROM car_names WHERE MakeId = 2", "number_predicates": 1}, "prior_select": [["weight"], ["model"]], "prior_where_col": [[["eq", "model", "bmw"]], [["lt", "weight", 3500]]], "result": [], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"weight\",\n        \"operator\": \"<\",\n        \"value\": \"3500\"\n    }]\n}"}, {"previous_utterances": ["which models are lighter than 3500?"], "utterance": "what is the weight of  BMW?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[10, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Model FROM car_names WHERE MakeId = 2", "number_predicates": 1}, "prior_select": [["weight"], ["model"]], "prior_where_col": [[["eq", "model", "bmw"]], [["lt", "weight", 3500]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"weight\",\n        \"operator\": \"<\",\n        \"value\": \"3500\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"weight\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"BMW\"\n    }]\n}"}, {"previous_utterances": ["what is the weight of  BMW?", "which models are lighter than 3500?"], "utterance": "what is the name of the id 2? | Are you asking about the car or the carmaker? | carmaker?", "select_target": [9], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [[10, "eq", 2]], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Model FROM car_names WHERE MakeId = 2", "number_predicates": 1}, "prior_select": [["weight"], ["model"]], "prior_where_col": [[["eq", "model", "bmw"]], [["lt", "weight", 3500]]], "result": ["{\n    \"data columns\": [\"model\"],\n    \"data filters\": [{\n        \"column\": \"weight\",\n        \"operator\": \"<\",\n        \"value\": \"3500\"\n    }]\n}", "{\n    \"data columns\": [\"weight\"],\n    \"data filters\": [{\n        \"column\": \"make\",\n        \"operator\": \"=\",\n        \"value\": \"BMW\"\n    }]\n}"], "pred_intent": "{\n    \"data columns\": [\"full name\"],\n    \"data filters\": [{\n        \"column\": \"id\",\n        \"operator\": \"=\",\n        \"value\": \"2\"\n    }]\n}"}, {"previous_utterances": [], "utterance": "Can you list all the continents?", "select_target": [0, 1, 19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId", "number_predicates": 0}, "prior_select": [["continent"]], "prior_where_col": [[]], "result": [], "pred_intent": "{\n\"data columns\": [\"continent\"]\n}"}, {"previous_utterances": ["Can you list all the continents?"], "utterance": "Okay, now can you list the number of countries belonging to each continent, including the continent id as well?", "select_target": [0, 1, 19], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId", "number_predicates": 0}, "prior_select": [["continent"]], "prior_where_col": [[]], "result": ["{\n\"data columns\": [\"continent\"]\n}"], "pred_intent": "{\n\"data columns\": [\"continent id\", \"continent\", \"COUNT(country id)\"],\n\"data filters\": [],\n\"sorting\": {\n\"column\": \"COUNT(country id)\",\n\"order\": \"desc\"\n},\n\"grouping\": {\n\"column\": \"continent id\",\n\"aggregate\": \"count\"\n}\n}"}, {"previous_utterances": [], "utterance": "what is the highest horsepower on the table?", "select_target": [13], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT sum ( cylinders )  FROM CARS_DATA", "number_predicates": 0}, "prior_select": [["*"], ["horsepower"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["what is the highest horsepower on the table?"], "utterance": "how many cars data on the table?", "select_target": [13], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT sum ( cylinders )  FROM CARS_DATA", "number_predicates": 0}, "prior_select": [["*"], ["horsepower"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"cont id\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["how many cars data on the table?", "what is the highest horsepower on the table?"], "utterance": "how many cylinders on the table?", "select_target": [13], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT sum ( cylinders )  FROM CARS_DATA", "number_predicates": 0}, "prior_select": [["*"], ["horsepower"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"horsepower\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"cont id\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"cylinders\"],\n    \"data filters\": []\n}"}, {"previous_utterances": [], "utterance": "How many car models are produced by each maker? List the count and the maker full name.", "select_target": [19, 6, 4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   >=  3", "number_predicates": 0}, "prior_select": [["model"], ["*", "full name"]], "prior_where_col": [[], []], "result": [], "pred_intent": "{\n    \"data columns\": [\"maker\", \"full name\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["How many car models are produced by each maker? List the count and the maker full name."], "utterance": "Which models are the most popular?", "select_target": [19, 6, 4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   >=  3", "number_predicates": 0}, "prior_select": [["model"], ["*", "full name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"maker\", \"full name\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"model\"],\n    \"data filters\": []\n}"}, {"previous_utterances": ["Which models are the most popular?", "How many car models are produced by each maker? List the count and the maker full name."], "utterance": "Which companies have three or more models?", "select_target": [19, 6, 4], "column_names": ["cont id", "continent", "country id", "country name", "id", "maker", "full name", "country", "model id", "model", "make id", "make", "mpg", "cylinders", "edispl", "horsepower", "weight", "accelerate", "year", "*"], "where_clauses": [], "debug_info": {"where_categorization": -1, "db_id": "car_1", "raw_sql": "SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   >=  3", "number_predicates": 0}, "prior_select": [["model"], ["*", "full name"]], "prior_where_col": [[], []], "result": ["{\n    \"data columns\": [\"maker\", \"full name\"],\n    \"data filters\": []\n}", "{\n    \"data columns\": [\"model\"],\n    \"data filters\": []\n}"], "pred_intent": "{\n    \"data columns\": [\"maker\"],\n    \"data filters\": [\n    {\n        \"column\": \"maker\",\n        \"operator\": \"!=\",\n        \"value\": \"\"\n    }\n    ]\n}"}]